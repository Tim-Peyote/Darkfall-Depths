/* Darkfall Depths - –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã */

// ==================== –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ====================
export const gameState = {
  screen: 'loading',
  level: 1,
  gameTime: 0,
  player: null,
  selectedCharacter: null,
  gold: 0,
  entities: [],
  projectiles: [],
  particles: [],
  map: null,
  rooms: [],
  fogOfWar: null,
  camera: { x: 0, y: 0 },
  input: {
    keys: {},
    mouse: { x: 0, y: 0, pressed: false },
    joystick: { active: false, x: 0, y: 0, dx: 0, dy: 0 }
  },
  inventory: {
    equipment: new Array(9).fill(null), // head, weapon1, weapon2, chest, accessory1, accessory2, gloves, belt, boots
    backpack: new Array(42).fill(null), // 6x7 = 42 —Å–ª–æ—Ç–∞
    quickSlots: [null, null, null] // –•—Ä–∞–Ω–∏—Ç —Ç–∏–ø—ã –∑–µ–ª–∏–π: 'potion', 'speed_potion', 'strength_potion', etc. // –ë—ã—Å—Ç—Ä—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –±–∞–Ω–æ–∫ (1, 2, 3)
  },
  buffs: {
    active: [], // –ê–∫—Ç–∏–≤–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–∞—Ñ—Ñ—ã
    icons: {
      damage: '‚öîÔ∏è',
      crit: 'üí•',
      defense: 'üõ°Ô∏è',
      moveSpeed: 'üí®',
      attackSpeed: '‚ö°',
      attackRadius: 'üéØ',
      fire: 'üî•',
      ice: '‚ùÑÔ∏è'
    }
  },
  debuffs: {
    active: [], // –ê–∫—Ç–∏–≤–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ–±–∞—Ñ—ã
    icons: {
      poison: 'ü¶†',
      burn: 'üî•',
      freeze: '‚ùÑÔ∏è',
      stun: '‚ö°',
      slow: 'üêå',
      weakness: 'üíÄ',
      vulnerability: 'ü©∏'
    }
  },
  stats: {
    enemiesKilled: 0,
    levelsCompleted: 0,
    totalPlayTime: 0,
    bestLevel: 0,
    currentSessionKills: 0
  },
  audio: {
    enabled: true,
    masterVolume: 0.7,
    musicVolume: 0.5,
    sfxVolume: 0.8
  },
  isPaused: false,
  gameRunning: false,
  pools: {
    particles: [],
    enemies: [],
    projectiles: []
  }
};

// ==================== CANVAS –ò –ö–û–ù–¢–ï–ö–°–¢ ====================
export let canvas, ctx, minimapCanvas, minimapCtx;
export let DPR = window.devicePixelRatio || 1;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ canvas —ç–ª–µ–º–µ–Ω—Ç–æ–≤
export function setCanvasElements() {
  canvas = document.getElementById('gameCanvas');
  ctx = canvas ? canvas.getContext('2d', { alpha: false }) : null;
  minimapCanvas = document.getElementById('minimap');
  minimapCtx = minimapCanvas ? minimapCanvas.getContext('2d') : null;
}

// ==================== –£–¢–ò–õ–ò–¢–´ ====================
export const Utils = {
  random: (min, max) => Math.floor(Math.random() * (max - min + 1)) + min,
  randomFloat: (min, max) => Math.random() * (max - min) + min,
  distance: (a, b) => Math.hypot(a.x - b.x, a.y - b.y),
  angle: (a, b) => Math.atan2(b.y - a.y, b.x - a.x),
  clamp: (value, min, max) => Math.max(min, Math.min(max, value)),
  lerp: (a, b, t) => a + (b - a) * t,
  normalize: (vector) => {
    const len = Math.hypot(vector.x, vector.y);
    return len > 0 ? { x: vector.x / len, y: vector.y / len } : { x: 0, y: 0 };
  },
  formatTime: (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}–º ${secs}—Å`;
  }
};

// –î–µ–ª–∞–µ–º gameState –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã
if (typeof window !== 'undefined') {
  window.gameState = gameState;
} 