/* Darkfall Depths - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–≤–æ–¥–æ–º */

import { gameState } from '../core/GameState.js';
import { IS_MOBILE } from '../config/constants.js';

export class InputManager {
  static qPressed = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π Q
  
  static init() {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    document.body.style.overflow = 'hidden';
    document.documentElement.style.overflow = 'hidden';
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞ —Ç–æ–ª—å–∫–æ –≤ –∏–≥—Ä–µ
    document.addEventListener('keydown', (e) => {
      // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –º—ã –≤ –∏–≥—Ä–µ
      if (gameState.screen === 'game' && ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'KeyW', 'KeyA', 'KeyS', 'KeyD', 'Space'].includes(e.code)) {
        e.preventDefault();
      }
    }, { passive: false });
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –≤ –∏–≥—Ä–æ–≤–æ–º —ç–∫—Ä–∞–Ω–µ
    document.addEventListener('touchmove', (e) => {
      // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
      const inventoryOverlay = document.getElementById('inventoryOverlay');
      if (inventoryOverlay && !inventoryOverlay.classList.contains('hidden')) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ touch —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–ª–∏ –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if (inventoryOverlay.contains(e.target)) {
          return; // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        }
      }
      
      // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª —Ç–æ–ª—å–∫–æ –≤ –∏–≥—Ä–æ–≤–æ–º —ç–∫—Ä–∞–Ω–µ
      if (gameState.screen === 'game') {
        e.preventDefault();
      }
    }, { passive: false });
    
    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä—ã
    window.addEventListener('keydown', (e) => {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –∏–≥—Ä–µ
      if (gameState.screen !== 'game') return;
      
      gameState.input.keys[e.code] = true;
      
      // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª —Ç–æ–ª—å–∫–æ –≤ –∏–≥—Ä–µ
      if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'KeyW', 'KeyA', 'KeyS', 'KeyD'].includes(e.code)) {
        e.preventDefault();
      }
      
      if (e.code === 'Space') {
        e.preventDefault();
        if (gameState.player && gameState.player.hasDash) {
          gameState.player.performDash();
        }
      }
      // ESC —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ MenuNavigationManager
      if (e.code === 'Tab' || e.code === 'KeyI') {
        e.preventDefault();
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º/–∑–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Ç–æ–ª—å–∫–æ –≤ –∏–≥—Ä–µ
        // –ù–û –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã (–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—å)
        if (gameState.screen === 'game') {
          (async () => {
            const { InventoryManager } = await import('../ui/InventoryManager.js');
            await InventoryManager.toggleInventory();
          })();
        }
      }
      if (e.code === 'Digit1') {
        e.preventDefault();
        (async () => {
          const { GameEngine } = await import('../game/GameEngine.js');
          GameEngine.useQuickPotion(0);
        })();
      }
      
      if (e.code === 'Digit2') {
        e.preventDefault();
        (async () => {
          const { GameEngine } = await import('../game/GameEngine.js');
          GameEngine.useQuickPotion(1);
        })();
      }
      
      if (e.code === 'Digit3') {
        e.preventDefault();
        (async () => {
          const { GameEngine } = await import('../game/GameEngine.js');
          GameEngine.useQuickPotion(2);
        })();
      }
      
      if (e.code === 'KeyQ' && !this.qPressed) {
        e.preventDefault();
        this.qPressed = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
        
        if (gameState.screen === 'game' && gameState.player && !gameState.isPaused) {
          // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
          if (gameState.player.hasDash) {
            gameState.player.performDash();
          } else if (gameState.player.hasShield) {
            gameState.player.performShield();
          } else if (gameState.player.hasBlast) {
            gameState.player.performBlast();
          }
        }
      }
    });
    
    window.addEventListener('keyup', (e) => {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –∏–≥—Ä–µ
      if (gameState.screen !== 'game') return;
      gameState.input.keys[e.code] = false;
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ Q –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏ –∫–ª–∞–≤–∏—à–∏
      if (e.code === 'KeyQ') {
        this.qPressed = false;
      }
    });
    
    // –ú–æ–±–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    this.initTouchControls();
  }
  
  static initTouchControls() {
    if (!IS_MOBILE) return;
    
    const mobileControls = document.getElementById('mobileControls');
    if (mobileControls) {
      mobileControls.classList.remove('hidden');
    }
    
    const joystickContainer = document.getElementById('joystickContainer');
    const joystickKnob = document.getElementById('joystickKnob');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∂–æ–π—Å—Ç–∏–∫–∞
    if (joystickContainer && joystickKnob) {
      // –î–∂–æ–π—Å—Ç–∏–∫
      joystickContainer.addEventListener('touchstart', (e) => {
        e.preventDefault();
        gameState.input.joystick.active = true;
        const rect = joystickContainer.getBoundingClientRect();
        gameState.input.joystick.x = rect.left + rect.width / 2;
        gameState.input.joystick.y = rect.top + rect.height / 2;
      }, { passive: false });
      
      joystickContainer.addEventListener('touchmove', (e) => {
        e.preventDefault();
        if (!gameState.input.joystick.active) return;
        
        const touch = e.touches[0];
        const dx = touch.clientX - gameState.input.joystick.x;
        const dy = touch.clientY - gameState.input.joystick.y;
        const distance = Math.hypot(dx, dy);
        const maxDistance = 50;
        
        if (distance <= maxDistance) {
          gameState.input.joystick.dx = dx / maxDistance;
          gameState.input.joystick.dy = dy / maxDistance;
          joystickKnob.style.transform = `translate(${dx}px, ${dy}px)`;
        } else {
          gameState.input.joystick.dx = dx / distance;
          gameState.input.joystick.dy = dy / distance;
          joystickKnob.style.transform = `translate(${(dx / distance) * maxDistance}px, ${(dy / distance) * maxDistance}px)`;
        }
      }, { passive: false });
      
      joystickContainer.addEventListener('touchend', (e) => {
        e.preventDefault();
        gameState.input.joystick.active = false;
        gameState.input.joystick.dx = 0;
        gameState.input.joystick.dy = 0;
        joystickKnob.style.transform = 'translate(0px, 0px)';
      }, { passive: false });
    }
    
    // –ö–Ω–æ–ø–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –¥–∂–æ–π—Å—Ç–∏–∫–∞)
    const abilityBtn = document.getElementById('abilityBtn');
    if (abilityBtn) {
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      abilityBtn.addEventListener('touchstart', (e) => {
        e.preventDefault();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –Ω–µ –≤ –ø–∞—É–∑–µ
        if (gameState.isPaused) {
          console.log('Ability button clicked during pause - ignoring');
          return;
        }
        
        if (gameState.player) {
          if (gameState.player.hasDash && gameState.player.dashCooldown <= 0) {
            gameState.player.performDash();
          } else if (gameState.player.hasShield && gameState.player.shieldCooldown <= 0) {
            gameState.player.performShield();
          } else if (gameState.player.hasBlast && gameState.player.blastCooldown <= 0) {
            gameState.player.performBlast();
          }
        }
      }, { passive: false });
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ)
      abilityBtn.addEventListener('click', (e) => {
        e.preventDefault();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –Ω–µ –≤ –ø–∞—É–∑–µ
        if (gameState.isPaused) {
          console.log('Ability button clicked during pause - ignoring');
          return;
        }
        
        if (gameState.player) {
          if (gameState.player.hasDash && gameState.player.dashCooldown <= 0) {
            gameState.player.performDash();
          } else if (gameState.player.hasShield && gameState.player.shieldCooldown <= 0) {
            gameState.player.performShield();
          } else if (gameState.player.hasBlast && gameState.player.blastCooldown <= 0) {
            gameState.player.performBlast();
          }
        }
      });
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
      setInterval(() => {
        if (gameState.player) {
          let cooldown = 0;
          let maxCooldown = 1;
          let abilityName = '';
          
          if (gameState.player.hasDash) {
            cooldown = gameState.player.dashCooldown;
            maxCooldown = 3.0;
            abilityBtn.innerHTML = 'üí®';
            abilityBtn.title = 'Dash (Q)';
            abilityName = 'Dash';
          } else if (gameState.player.hasShield) {
            cooldown = gameState.player.shieldCooldown;
            maxCooldown = 8.0;
            abilityBtn.innerHTML = 'üõ°Ô∏è';
            abilityBtn.title = '–©–∏—Ç (Q)';
            abilityName = 'Shield';
          } else if (gameState.player.hasBlast) {
            cooldown = gameState.player.blastCooldown;
            maxCooldown = 12.0;
            abilityBtn.innerHTML = 'üí•';
            abilityBtn.title = '–í–∑—Ä—ã–≤ (Q)';
            abilityName = 'Blast';
          }
          
          const cooldownPercent = (cooldown / maxCooldown) * 100;
          abilityBtn.style.setProperty('--cooldown-width', cooldownPercent + '%');
          abilityBtn.disabled = cooldown > 0;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç–∫–∞—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫–µ
          if (cooldown > 0) {
            abilityBtn.style.setProperty('--cooldown-width', cooldownPercent + '%');
            abilityBtn.style.opacity = '0.6';
          } else {
            abilityBtn.style.setProperty('--cooldown-width', '0%');
            abilityBtn.style.opacity = '1';
          }
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
          if (gameState.player.hasDash || gameState.player.hasShield || gameState.player.hasBlast) {
            abilityBtn.style.display = 'flex';
          } else {
            abilityBtn.style.display = 'none';
          }
        }
      }, 100);
    }
  }
} 