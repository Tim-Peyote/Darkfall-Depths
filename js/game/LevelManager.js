/* Darkfall Depths - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è–º–∏ - v2 */

import { gameState, Utils, canvas, DPR } from '../core/GameState.js';
import { MapGenerator } from '../map/MapGenerator.js';
import { FogOfWar } from '../map/FogOfWar.js';
import { Player } from '../entities/Player.js';
import { Enemy } from '../entities/Enemy.js';
import { TILE_SIZE, ENEMY_TYPES, generateRandomItem } from '../config/constants.js';

export class LevelManager {
  static async generateLevel() {
    console.log('üó∫Ô∏è Generating level...');
    
    if (!gameState.selectedCharacter) {
      console.error('‚ùå No character selected!');
      return;
    }
    
    const { map, rooms } = MapGenerator.generateDungeon();
    
    if (!rooms || rooms.length === 0) {
      console.error('‚ùå No rooms generated!');
      return;
    }
    
    if (!map || map.length === 0) {
      console.error('‚ùå Map not generated!');
      return;
    }
    
    gameState.map = map;
    gameState.rooms = rooms;
    gameState.fogOfWar = new FogOfWar();
    
    // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π
    gameState.entities = [];
    gameState.projectiles = [];
    gameState.particles = [];
    
    // –°–ø–∞–≤–Ω –∏–≥—Ä–æ–∫–∞ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
    const startRoom = rooms[0];
    
    if (gameState.selectedCharacter) {
      console.log('üë§ Creating player with character:', gameState.selectedCharacter);
      console.log('üó∫Ô∏è Start room:', startRoom);
      console.log('üó∫Ô∏è Map size:', gameState.map.length, 'x', gameState.map[0].length);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–∞—Ä—Ç—ã
      if (startRoom && startRoom.centerX >= 0 && startRoom.centerX < gameState.map[0].length &&
          startRoom.centerY >= 0 && startRoom.centerY < gameState.map.length) {
        
        const playerX = (startRoom.centerX + 0.5) * TILE_SIZE;
        const playerY = (startRoom.centerY + 0.5) * TILE_SIZE;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ –Ω–µ –≤ —Å—Ç–µ–Ω–µ
        const tileX = Math.floor(playerX / TILE_SIZE);
        const tileY = Math.floor(playerY / TILE_SIZE);
        
        if (tileX >= 0 && tileX < gameState.map[0].length && 
            tileY >= 0 && tileY < gameState.map.length &&
            gameState.map[tileY][tileX] === 0) { // 0 = –ø–æ–ª, 1 = —Å—Ç–µ–Ω–∞
          
          console.log('üë§ Player spawn position:', playerX, playerY);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          let savedPlayer = null;
          if (gameState.player) {
            savedPlayer = {
              hp: gameState.player.hp,
              maxHp: gameState.player.maxHp,
              damage: gameState.player.damage,
              moveSpeed: gameState.player.moveSpeed,
              attackSpeed: gameState.player.attackSpeed,
              attackRadius: gameState.player.attackRadius,
              crit: gameState.player.crit,
              defense: gameState.player.defense,
              hasDash: gameState.player.hasDash,
              hasShield: gameState.player.hasShield,
              hasBlast: gameState.player.hasBlast
            };
            console.log('üë§ Saved player stats:', savedPlayer);
          }
          
          gameState.player = new Player(
            { ...gameState.selectedCharacter },
            playerX,
            playerY
          );
          
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω
          if (savedPlayer) {
            gameState.player.hp = savedPlayer.hp;
            gameState.player.maxHp = savedPlayer.maxHp;
            gameState.player.damage = savedPlayer.damage;
            gameState.player.moveSpeed = savedPlayer.moveSpeed;
            gameState.player.attackSpeed = savedPlayer.attackSpeed;
            gameState.player.attackRadius = savedPlayer.attackRadius;
            gameState.player.crit = savedPlayer.crit;
            gameState.player.defense = savedPlayer.defense;
            gameState.player.hasDash = savedPlayer.hasDash;
            gameState.player.hasShield = savedPlayer.hasShield;
            gameState.player.hasBlast = savedPlayer.hasBlast;
            console.log('üë§ Restored player stats:', {
              hp: gameState.player.hp,
              maxHp: gameState.player.maxHp,
              damage: gameState.player.damage
            });
          }
          
          // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É –Ω–∞ –∏–≥—Ä–æ–∫–µ (—Å—Ä–∞–∑—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é)
          const canvasWidth = canvas ? canvas.width / DPR : 800; // fallback
          const canvasHeight = canvas ? canvas.height / DPR : 600; // fallback
          gameState.camera.x = gameState.player.x - canvasWidth / 2;
          gameState.camera.y = gameState.player.y - canvasHeight / 2;
          
          console.log('üì∑ Camera position:', gameState.camera.x, gameState.camera.y);
        } else {
          console.error('‚ùå Player spawn position is in wall:', tileX, tileY, 'Tile value:', gameState.map[tileY]?.[tileX]);
          // Fallback: –∏—â–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
          this.findSafeSpawnPosition(startRoom, gameState.map);
        }
      } else {
        console.error('‚ùå Invalid start room position:', startRoom);
        // Fallback: —Å–ø–∞–≤–Ω–∏–º –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞—Ä—Ç—ã
        const centerX = Math.floor(gameState.map[0].length / 2);
        const centerY = Math.floor(gameState.map.length / 2);
        gameState.player = new Player(
          { ...gameState.selectedCharacter },
          (centerX + 0.5) * TILE_SIZE,
          (centerY + 0.5) * TILE_SIZE
        );
      }
    }
    
    // –°–ø–∞–≤–Ω –≤—Ä–∞–≥–æ–≤ –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö (—Å —É—á—ë—Ç–æ–º —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
    for (let i = 1; i < rooms.length; i++) {
      const room = rooms[i];
      const baseEnemyCount = Utils.random(1, 2); // –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–∞–≥–æ–≤
      const levelBonus = Math.floor(gameState.level / 3); // –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è
      const enemyCount = baseEnemyCount + levelBonus;
      
      for (let j = 0; j < enemyCount; j++) {
        // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –≤—Ä–∞–≥–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        let enemyType;
        let availableEnemies = ENEMY_TYPES.filter(enemy => !enemy.levelRequirement || gameState.level >= enemy.levelRequirement);
        
        if (gameState.level >= 10) {
          // –ù–∞ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω—è—Ö –±–æ–ª—å—à–µ —à–∞–Ω—Å –Ω–∞ —Å–∏–ª—å–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤
          const strongEnemyChance = Math.min(0.3 + (gameState.level - 10) * 0.05, 0.7);
          if (Math.random() < strongEnemyChance) {
            // –í—ã–±–∏—Ä–∞–µ–º –∏–∑ —Å–∏–ª—å–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ç–∏–ø–∞)
            const strongEnemies = availableEnemies.slice(-3);
            enemyType = strongEnemies[Utils.random(0, strongEnemies.length - 1)].type;
          } else {
            enemyType = availableEnemies[Utils.random(0, availableEnemies.length - 1)].type;
          }
        } else {
          enemyType = availableEnemies[Utils.random(0, availableEnemies.length - 1)].type;
        }
        
        const enemy = new Enemy(
          (room.centerX + Utils.random(-1, 1) + 0.5) * TILE_SIZE, // Position closer to center
          (room.centerY + Utils.random(-1, 1) + 0.5) * TILE_SIZE,
          enemyType
        );
        
        // –£—Å–∏–ª–µ–Ω–∏–µ –≤—Ä–∞–≥–æ–≤ —Å —É—Ä–æ–≤–Ω–µ–º (–±–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è)
        if (gameState.level > 1) {
          // –ë–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
          const baseMultiplier = 1 + (gameState.level - 1) * 0.12;
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
          const highLevelBonus = gameState.level >= 10 ? (gameState.level - 10) * 0.05 : 0;
          const totalMultiplier = baseMultiplier + highLevelBonus;
          
          enemy.hp = Math.floor(enemy.hp * totalMultiplier);
          enemy.maxHp = enemy.hp;
          enemy.damage = Math.floor(enemy.damage * totalMultiplier);
          
          // –ù–∞ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω—è—Ö –≤—Ä–∞–≥–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ
          if (gameState.level >= 5) {
            const speedBonus = Math.min(0.3, (gameState.level - 5) * 0.02);
            enemy.speed = Math.floor(enemy.speed * (1 + speedBonus));
          }
          
          console.log(`üëπ Enemy level ${gameState.level} - HP: ${enemy.hp}, Damage: ${enemy.damage}, Speed: ${enemy.speed}`);
        }
        
        gameState.entities.push(enemy);
      }
    }
    
    // –°–ø–∞–≤–Ω –ø–æ—Ä—Ç–∞–ª–∞ –≤ —Å–∞–º–æ–π –¥–∞–ª—å–Ω–µ–π –æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
    let portalRoom = null;
    if (!rooms || rooms.length <= 1) {
      portalRoom = null;
      console.warn('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–º–Ω–∞—Ç –¥–ª—è —Å–ø–∞–≤–Ω–∞ –ø–æ—Ä—Ç–∞–ª–∞! rooms:', rooms);
    } else {
      const startRoom = rooms[0];
      let maxDist = -1;
      for (let i = 1; i < rooms.length; i++) {
        const room = rooms[i];
        const dx = room.centerX - startRoom.centerX;
        const dy = room.centerY - startRoom.centerY;
        const dist = dx * dx + dy * dy;
        if (dist > maxDist) {
          maxDist = dist;
          portalRoom = room;
        }
      }
    }
    if (portalRoom) {
      try {
        const { Portal } = await import('../entities/Portal.js');
        const portal = new Portal(
          (portalRoom.centerX + 0.5) * TILE_SIZE,
          (portalRoom.centerY + 0.5) * TILE_SIZE
        );
        gameState.entities.push(portal);
        console.log('–ü–æ—Ä—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ:', portalRoom);
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Ä—Ç–∞–ª–∞:', e);
      }
    } else {
      console.warn('–ü–æ—Ä—Ç–∞–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–æ–º–Ω–∞—Ç—ã! rooms:', rooms);
    }
    
    // –°–ø–∞–≤–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (—É–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏)
    const baseItemChance = 0.3;
    const levelBonus = Math.min(0.4, gameState.level * 0.03);
    const itemChance = baseItemChance + levelBonus;
    
    console.log(`üì¶ Level ${gameState.level} - Item spawn chance: ${(itemChance * 100).toFixed(1)}%`);
    
    for (let i = 1; i < rooms.length; i++) {
      const room = rooms[i];
      if (Math.random() < itemChance) {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞
        const minItemLevel = Math.max(1, gameState.level - 1);
        const maxItemLevel = gameState.level + 1; // –ü—Ä–µ–¥–º–µ—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
        const itemLevel = Utils.random(minItemLevel, maxItemLevel);
        
        const item = generateRandomItem(itemLevel, gameState.selectedCharacter?.class || null);
        const { DroppedItem } = await import('../entities/DroppedItem.js');
        const droppedItem = new DroppedItem(
          (room.centerX + Utils.random(-1, 1) + 0.5) * TILE_SIZE,
          (room.centerY + Utils.random(-1, 1) + 0.5) * TILE_SIZE,
          item
        );
        gameState.entities.push(droppedItem);
      }
    }
  }

  static async nextLevel() {
    console.log(`üéÆ nextLevel called - current level: ${gameState.level}`);
    gameState.level++;
    console.log(`üéÆ nextLevel - level increased to: ${gameState.level}`);
    gameState.stats.levelsCompleted++;
    gameState.stats.bestLevel = Math.max(gameState.stats.bestLevel, gameState.level);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–±–∏—Ç—ã—Ö –≤—Ä–∞–≥–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∫ –æ–±—â–µ–º—É —Å—á–µ—Ç—á–∏–∫—É
    gameState.stats.enemiesKilled += gameState.stats.currentSessionKills;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É–±–∏–π—Å—Ç–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    gameState.stats.currentSessionKills = 0;
    
    // –í —Ä–æ–≥–∞–ª–∏–∫–µ –ù–ï –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–∞–º –ª–µ—á–∏—Ç—å—Å—è
    console.log(`üéÆ Level ${gameState.level} - Player HP: ${gameState.player?.hp}/${gameState.player?.maxHp} (no auto-heal)`);
    
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±–∞—Ñ—Ñ—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ - –æ–Ω–∏ —Å–∞–º–∏ –∏—Å—Ç–µ–∫–∞—é—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    
    // –ú—É–∑—ã–∫–∞ stage1 –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∏–≥—Ä–∞—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    // (–Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º)
    
    await this.generateLevel();
    
    console.log(`üéÆ nextLevel completed - final level: ${gameState.level}`);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    (async () => {
      const { GameEngine } = await import('../game/GameEngine.js');
      GameEngine.updateUI();
      GameEngine.updateQuickPotions();
    })();
  }

  static showLevelComplete() {
    console.log(`üéÆ showLevelComplete called - level: ${gameState.level}, gameRunning: ${gameState.gameRunning}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —ç–∫—Ä–∞–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    const completedLevelEl = document.getElementById('completedLevel');
    const enemiesKilledEl = document.getElementById('enemiesKilled');
    
    if (completedLevelEl) {
      completedLevelEl.textContent = gameState.level;
    }
    
    if (enemiesKilledEl) {
      enemiesKilledEl.textContent = gameState.stats.currentSessionKills;
    }
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    (async () => {
      const { audioManager } = await import('../audio/AudioManager.js');
      audioManager.playLevelComplete();
    })();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    const overlay = document.getElementById('levelCompleteOverlay');
    if (overlay) {
      overlay.classList.remove('hidden');
    }
    
    console.log(`üéÆ showLevelComplete completed - gameRunning: ${gameState.gameRunning}`);
  }

  static async showGameOver() {
    gameState.gameRunning = false;
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –≥–µ–π–º–æ–≤–µ—Ä–∞
    const { audioManager } = await import('../audio/AudioManager.js');
    audioManager.playGameOver();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ—Ä–¥—ã
    const { RecordsManager } = await import('../ui/RecordsManager.js');
    RecordsManager.saveRecords();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ø-—Ä–µ–∫–æ—Ä–¥
    if (gameState.selectedCharacter) {
      RecordsManager.saveTopRecord(gameState.selectedCharacter, {
        level: gameState.level,
        enemiesKilled: gameState.stats.currentSessionKills,
        totalPlayTime: gameState.gameTime
      });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —ç–∫—Ä–∞–Ω–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    const finalLevelEl = document.getElementById('finalLevel');
    const finalKillsEl = document.getElementById('finalKills');
    const finalTimeEl = document.getElementById('finalTime');
    
    if (finalLevelEl) {
      finalLevelEl.textContent = gameState.level;
    }
    
    if (finalKillsEl) {
      finalKillsEl.textContent = gameState.stats.currentSessionKills;
    }
    
    if (finalTimeEl) {
      finalTimeEl.textContent = Utils.formatTime(gameState.gameTime);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    const overlay = document.getElementById('gameOverOverlay');
    if (overlay) {
      overlay.classList.remove('hidden');
    }
  }

  static endGame() {
    gameState.gameRunning = false;
    gameState.player = null;
    gameState.entities = [];
    gameState.projectiles = [];
    gameState.particles = [];
    gameState.map = null;
    gameState.fogOfWar = null;
  }

  static restartGame() {
    this.endGame();
    // startGame(); // –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ
  }

  static returnToMenu() {
    this.endGame();
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–º—É–∑—ã–∫–∞ Main –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –≤ switchScreen)
    // switchScreen('menu'); // –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ
  }

  static findSafeSpawnPosition(room, map) {
    console.log('üîç Looking for safe spawn position in room:', room);
    
    // –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –∫–æ–º–Ω–∞—Ç–µ
    for (let y = room.y; y < room.y + room.height; y++) {
      for (let x = room.x; x < room.x + room.width; x++) {
        if (x >= 0 && x < map[0].length && y >= 0 && y < map.length && map[y][x] === 0) {
          const playerX = (x + 0.5) * TILE_SIZE;
          const playerY = (y + 0.5) * TILE_SIZE;
          
          console.log('‚úÖ Found safe spawn position:', playerX, playerY);
          
          gameState.player = new Player(
            { ...gameState.selectedCharacter },
            playerX,
            playerY
          );
          
          // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É –Ω–∞ –∏–≥—Ä–æ–∫–µ
          const canvasWidth = canvas ? canvas.width / DPR : 800;
          const canvasHeight = canvas ? canvas.height / DPR : 600;
          gameState.camera.x = gameState.player.x - canvasWidth / 2;
          gameState.camera.y = gameState.player.y - canvasHeight / 2;
          
          return;
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä –∫–æ–º–Ω–∞—Ç—ã
    console.warn('‚ö†Ô∏è No safe position found, using room center');
    const playerX = (room.centerX + 0.5) * TILE_SIZE;
    const playerY = (room.centerY + 0.5) * TILE_SIZE;
    
    gameState.player = new Player(
      { ...gameState.selectedCharacter },
      playerX,
      playerY
    );
    
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É –Ω–∞ –∏–≥—Ä–æ–∫–µ
    const canvasWidth = canvas ? canvas.width / DPR : 800;
    const canvasHeight = canvas ? canvas.height / DPR : 600;
    gameState.camera.x = gameState.player.x - canvasWidth / 2;
    gameState.camera.y = gameState.player.y - canvasHeight / 2;
  }
} 