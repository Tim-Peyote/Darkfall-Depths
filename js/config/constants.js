/* Darkfall Depths - –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ */

// ==================== –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò ====================
export const TILE_SIZE = 32;
export const MAP_SIZE = 60; // –±—ã–ª–æ 50
export const ROOM_MIN_SIZE = 8; // –±—ã–ª–æ 6
export const ROOM_MAX_SIZE = 16; // –±—ã–ª–æ 12
export const MIN_ROOMS = 10; // –±—ã–ª–æ 8
export const MAX_ROOMS = 15; // –±—ã–ª–æ 12
export const FPS_TARGET = 120; // –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 60 –¥–æ 120 FPS –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export const FRAME_TIME = 1000 / FPS_TARGET;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∞—á —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
export const IS_MOBILE = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth <= 768;

// ==================== –ò–ì–†–û–í–´–ï –î–ê–ù–ù–´–ï ====================
// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ - $(date)
export const CHARACTERS = [
  {
    id: 'dimon',
    name: 'Dimon',
    class: 'mage',
    description: '–ú–∞–≥ –¥–∞–ª—å–Ω–µ–≥–æ –±–æ—è —Å –∞–≤—Ç–æ–Ω–∞—Ü–µ–ª–∏–≤–∞–Ω–∏–µ–º —Å–Ω–∞—Ä—è–¥–æ–≤',
    hp: 80,
    maxHp: 80,
    damage: 15,
    moveSpeed: 70,
    attackSpeed: 1.2,
    attackRadius: 200,
    defense: 2,
    crit: 5,
    type: 'ranged',
    projectileSpeed: 300,
    color: '#9b59b6',
    sprite: 'üîÆ',
    // –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –í–∑—Ä—ã–≤–Ω–∞—è –≤–æ–ª–Ω–∞
    hasBlast: true,
    blastCooldown: 12.0,
    blastRadius: 120,
    blastDamage: 40
  },
  {
    id: 'andre',
    name: 'Andre',
    class: 'warrior',
    description: '–ú–æ—â–Ω—ã–π –≤–æ–∏–Ω –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è —Å –≤—ã—Å–æ–∫–∏–º–∏ HP –∏ –∑–∞—â–∏—Ç–æ–π',
    hp: 140,
    maxHp: 140,
    damage: 18,
    moveSpeed: 75,
    attackSpeed: 1.0,
    attackRadius: 64,
    defense: 8,
    crit: 0,
    type: 'melee',
    color: '#e74c3c',
    sprite: '‚öîÔ∏è',
    // –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –©–∏—Ç
    hasShield: true,
    shieldCooldown: 8.0,
    shieldDuration: 4.0,
    shieldDefenseBonus: 15
  },
  {
    id: 'tim',
    name: 'Tim',
    class: 'rogue',
    description: '–ë—ã—Å—Ç—Ä—ã–π —Ä–∞–∑–±–æ–π–Ω–∏–∫ —Å dash —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é',
    hp: 85,
    maxHp: 85,
    damage: 25,
    moveSpeed: 110,
    attackSpeed: 0.7,
    attackRadius: 56,
    defense: 2,
    crit: 15,
    type: 'melee',
    hasDash: true,
    dashCooldown: 3.0,
    dashDistance: 80,
    color: '#27ae60',
    sprite: 'üó°Ô∏è'
  }
];

export const ENEMY_TYPES = [
  { 
    type: 'Skeleton', 
    hp: 30, 
    damage: 18, 
    speed: 60, 
    attackRange: 48, 
    color: '#bdc3c7', 
    reward: 10,
    sprite: 'üíÄ'
  },
  { 
    type: 'Skeleton Archer', 
    hp: 25, 
    damage: 15, 
    speed: 55, 
    attackRange: 180, 
    color: '#95a5a6', 
    reward: 15,
    sprite: 'üèπ',
    projectileSpeed: 250,
    hasBow: true
  },
  { 
    type: 'Dark Mage', 
    hp: 25, 
    damage: 12, 
    speed: 45, 
    attackRange: 150, 
    color: '#8e44ad', 
    reward: 15,
    sprite: 'üßô‚Äç‚ôÇÔ∏è',
    projectileSpeed: 200
  },
  { 
    type: 'Frost Mage', 
    hp: 30, 
    damage: 10, 
    speed: 40, 
    attackRange: 160, 
    color: '#3498db', 
    reward: 20,
    sprite: '‚ùÑÔ∏è',
    projectileSpeed: 180,
    canFreeze: true,
    freezeChance: 0.3,
    freezeDuration: 3.0
  },
  { 
    type: 'Poison Spitter', 
    hp: 35, 
    damage: 8, 
    speed: 50, 
    attackRange: 140, 
    color: '#27ae60', 
    reward: 18,
    sprite: 'ü¶é',
    projectileSpeed: 150,
    canPoison: true,
    poisonChance: 0.4,
    poisonDamage: 5,
    poisonDuration: 8.0
  },
  { 
    type: 'Stun Warrior', 
    hp: 45, 
    damage: 20, 
    speed: 55, 
    attackRange: 48, 
    color: '#f39c12', 
    reward: 22,
    sprite: '‚ö°',
    canStun: true,
    stunChance: 0.25,
    stunDuration: 2.5
  },
  { 
    type: 'Orc Warrior', 
    hp: 45, 
    damage: 22, 
    speed: 50, 
    attackRange: 48, 
    color: '#27ae60', 
    reward: 20,
    sprite: 'üëπ'
  },
  { 
    type: 'Shadow Assassin', 
    hp: 35, 
    damage: 25, 
    speed: 80, 
    attackRange: 48, 
    color: '#2c3e50', 
    reward: 25,
    sprite: 'üë§',
    levelRequirement: 5
  },
  { 
    type: 'Demon Lord', 
    hp: 80, 
    damage: 35, 
    speed: 40, 
    attackRange: 200, 
    color: '#e74c3c', 
    reward: 50,
    sprite: 'üëø',
    projectileSpeed: 250,
    levelRequirement: 10
  },
  { 
    type: 'Ancient Guardian', 
    hp: 120, 
    damage: 30, 
    speed: 35, 
    attackRange: 48, 
    color: '#f39c12', 
    reward: 40,
    sprite: 'üõ°Ô∏è',
    levelRequirement: 8
  },
  { 
    type: 'Void Wraith', 
    hp: 50, 
    damage: 28, 
    speed: 70, 
    attackRange: 120, 
    color: '#9b59b6', 
    reward: 35,
    sprite: 'üëª',
    levelRequirement: 6,
    projectileSpeed: 220,
    canTeleport: true,
    teleportChance: 0.15
  },
  { 
    type: 'Crystal Golem', 
    hp: 90, 
    damage: 32, 
    speed: 30, 
    attackRange: 48, 
    color: '#e67e22', 
    reward: 45,
    sprite: 'üíé',
    levelRequirement: 7,
    canReflect: true,
    reflectChance: 0.2
  }
];

// ==================== –°–ò–°–¢–ï–ú–ê –ü–†–ï–î–ú–ï–¢–û–í ====================
export const BASE_ITEMS = [
  // –û—Ä—É–∂–∏–µ
  { base: 'sword', name: '–ú–µ—á', class: 'warrior', icon: '‚öîÔ∏è', color: '#e67e22', type: 'weapon', slot: 'weapon', minRadius: 56, maxRadius: 72 },
  { base: 'axe', name: '–¢–æ–ø–æ—Ä', class: 'warrior', icon: 'ü™ì', color: '#b87333', type: 'weapon', slot: 'weapon', minRadius: 56, maxRadius: 72 },
  { base: 'staff', name: '–ü–æ—Å–æ—Ö', class: 'mage', icon: 'ü™Ñ', color: '#8e44ad', type: 'weapon', slot: 'weapon', minRadius: 120, maxRadius: 180 },
  { base: 'wand', name: '–ñ–µ–∑–ª', class: 'mage', icon: '‚ú®', color: '#9b59b6', type: 'weapon', slot: 'weapon', minRadius: 100, maxRadius: 160 },
  { base: 'dagger', name: '–ö–∏–Ω–∂–∞–ª', class: 'rogue', icon: 'üó°Ô∏è', color: '#27ae60', type: 'weapon', slot: 'weapon', minRadius: 40, maxRadius: 56 },
  { base: 'crossbow', name: '–ê—Ä–±–∞–ª–µ—Ç', class: 'rogue', icon: 'üèπ', color: '#34495e', type: 'weapon', slot: 'weapon', minRadius: 80, maxRadius: 120 },
  
  // –©–∏—Ç—ã
  { base: 'shield', name: '–©–∏—Ç', class: 'warrior', icon: 'üõ°Ô∏è', color: '#95a5a6', type: 'shield', slot: 'shield' },
  
  // –ë—Ä–æ–Ω—è
  { base: 'robe', name: '–ú–∞–Ω—Ç–∏—è', class: 'mage', icon: 'üß•', color: '#6c3483', type: 'armor', slot: 'armor' },
  { base: 'leather', name: '–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è', class: 'rogue', icon: 'ü•ã', color: '#d35400', type: 'armor', slot: 'armor' },
  { base: 'plate', name: '–õ–∞—Ç–Ω–∞—è –±—Ä–æ–Ω—è', class: 'warrior', icon: 'ü•ã', color: '#7f8c8d', type: 'armor', slot: 'armor' },
  
  // –ì–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã
  { base: 'helmet', name: '–®–ª–µ–º', class: 'warrior', icon: '‚õëÔ∏è', color: '#95a5a6', type: 'head', slot: 'head' },
  { base: 'hood', name: '–ö–∞–ø—é—à–æ–Ω', class: 'mage', icon: 'üëí', color: '#6c3483', type: 'head', slot: 'head' },
  { base: 'cap', name: '–ö–µ–ø–∫–∞', class: 'rogue', icon: 'üé©', color: '#34495e', type: 'head', slot: 'head' },
  
  // –ü–µ—Ä—á–∞—Ç–∫–∏
  { base: 'gloves', name: '–ü–µ—Ä—á–∞—Ç–∫–∏', class: null, icon: 'üß§', color: '#95a5a6', type: 'gloves', slot: 'gloves' },
  
  // –ü–æ—è—Å–∞
  { base: 'belt', name: '–ü–æ—è—Å', class: null, icon: 'üéóÔ∏è', color: '#d35400', type: 'belt', slot: 'belt' },
  
  // –û–±—É–≤—å
  { base: 'boots', name: '–ë–æ—Ç–∏–Ω–∫–∏', class: null, icon: 'üë¢', color: '#8b4513', type: 'boots', slot: 'boots' },
  
  // –£–∫—Ä–∞—à–µ–Ω–∏—è
  { base: 'amulet', name: '–ê–º—É–ª–µ—Ç', class: null, icon: 'üìø', color: '#f39c12', type: 'accessory', slot: 'accessory' },
  { base: 'ring', name: '–ö–æ–ª—å—Ü–æ', class: null, icon: 'üíç', color: '#e67e22', type: 'accessory', slot: 'accessory' },
  
  // –ó–µ–ª—å—è
  { base: 'potion', name: '–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è', class: null, icon: 'üß™', color: '#e74c3c', type: 'consumable', slot: 'consumable' },
  { base: 'speed_potion', name: '–ó–µ–ª—å–µ —Å–∫–æ—Ä–æ—Å—Ç–∏', class: null, icon: 'üí®', color: '#3498db', type: 'consumable', slot: 'consumable' },
  { base: 'strength_potion', name: '–ó–µ–ª—å–µ —Å–∏–ª—ã', class: null, icon: 'üí™', color: '#e67e22', type: 'consumable', slot: 'consumable' },
  { base: 'defense_potion', name: '–ó–µ–ª—å–µ –∑–∞—â–∏—Ç—ã', class: null, icon: 'üõ°Ô∏è', color: '#95a5a6', type: 'consumable', slot: 'consumable' },
  { base: 'regen_potion', name: '–ó–µ–ª—å–µ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', class: null, icon: 'üíö', color: '#27ae60', type: 'consumable', slot: 'consumable' },
  { base: 'combo_potion', name: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∑–µ–ª—å–µ', class: null, icon: 'üåà', color: '#9b59b6', type: 'consumable', slot: 'consumable' },
  { base: 'purification_potion', name: '–ó–µ–ª—å–µ –æ—á–∏—â–µ–Ω–∏—è', class: null, icon: '‚ú®', color: '#f39c12', type: 'consumable', slot: 'consumable' },
  { base: 'mystery_potion', name: '–¢–∞–π–Ω–∞—è –±–∞–Ω–∫–∞', class: null, icon: '‚ùì', color: '#8e44ad', type: 'consumable', slot: 'consumable' },
  
  // –°–≤–∏—Ç–∫–∏
  { base: 'scroll_werewolf', name: '–°–≤–∏—Ç–æ–∫ –æ–±–æ—Ä–æ—Ç–Ω—è', class: null, icon: 'üê∫', color: '#8b4513', type: 'consumable', slot: 'consumable', description: '–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤ –≤–æ–ª–∫–∞: —Å–∫–æ—Ä–æ—Å—Ç—å +50%, —É—Ä–æ–Ω +30%, –∑–∞—â–∏—Ç–∞ -20% –Ω–∞ 15 —Å–µ–∫' },
  { base: 'scroll_stone', name: '–°–≤–∏—Ç–æ–∫ –∫–∞–º–Ω—è', class: null, icon: 'üóø', color: '#7f8c8d', type: 'consumable', slot: 'consumable', description: '–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–æ–ª–µ–º–∞: –∑–∞—â–∏—Ç–∞ +100%, —Å–∫–æ—Ä–æ—Å—Ç—å -60% –Ω–∞ 12 —Å–µ–∫' },
  { base: 'scroll_fire_explosion', name: '–°–≤–∏—Ç–æ–∫ –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ –≤–∑—Ä—ã–≤–∞', class: null, icon: 'üî•', color: '#e74c3c', type: 'consumable', slot: 'consumable', description: '–í–∑—Ä—ã–≤–Ω–∞—è –≤–æ–ª–Ω–∞ –æ–≥–Ω—è: —É—Ä–æ–Ω 40, —Ä–∞–¥–∏—É—Å 120, –ø–æ–¥–∂–∏–≥–∞–µ—Ç –≤—Ä–∞–≥–æ–≤' },
  { base: 'scroll_ice_storm', name: '–°–≤–∏—Ç–æ–∫ –ª–µ–¥—è–Ω–æ–π –±—É—Ä–∏', class: null, icon: '‚ùÑÔ∏è', color: '#3498db', type: 'consumable', slot: 'consumable', description: '–ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 150 –Ω–∞ 5 —Å–µ–∫' },
  { base: 'scroll_lightning', name: '–°–≤–∏—Ç–æ–∫ –º–æ–ª–Ω–∏–∏', class: null, icon: '‚ö°', color: '#f1c40f', type: 'consumable', slot: 'consumable', description: '–¶–µ–ø–Ω–∞—è –º–æ–ª–Ω–∏—è –º–µ–∂–¥—É –≤—Ä–∞–≥–∞–º–∏: —É—Ä–æ–Ω 25, –¥–æ 5 —Ü–µ–ª–µ–π' },
  { base: 'scroll_earthquake', name: '–°–≤–∏—Ç–æ–∫ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏—è', class: null, icon: 'üåã', color: '#8b4513', type: 'consumable', slot: 'consumable', description: '–°–æ–∑–¥–∞–µ—Ç —Ç—Ä–µ—â–∏–Ω—ã, –∑–∞–º–µ–¥–ª—è—é—â–∏–µ –≤—Ä–∞–≥–æ–≤ –Ω–∞ 8 —Å–µ–∫' },
  { base: 'scroll_clone', name: '–°–≤–∏—Ç–æ–∫ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', class: null, icon: 'üë•', color: '#9b59b6', type: 'consumable', slot: 'consumable', description: '–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª–æ–Ω–∞ –∏–≥—Ä–æ–∫–∞: —É—Ä–æ–Ω 50% –Ω–∞ 20 —Å–µ–∫' },
  { base: 'scroll_teleport', name: '–°–≤–∏—Ç–æ–∫ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏', class: null, icon: 'üåÄ', color: '#e67e22', type: 'consumable', slot: 'consumable', description: '–°–ª—É—á–∞–π–Ω—ã–π —Ç–µ–ª–µ–ø–æ—Ä—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–∞—Ä—Ç—ã' },
  { base: 'scroll_invisibility', name: '–°–≤–∏—Ç–æ–∫ –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏', class: null, icon: 'üëÅÔ∏è', color: '#95a5a6', type: 'consumable', slot: 'consumable', description: '–ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—å –¥–ª—è –≤—Ä–∞–≥–æ–≤ –Ω–∞ 8 —Å–µ–∫' },
  { base: 'scroll_time', name: '–°–≤–∏—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏', class: null, icon: '‚è∞', color: '#34495e', type: 'consumable', slot: 'consumable', description: '–ó–∞–º–µ–¥–ª—è–µ—Ç –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –Ω–∞ 60% –Ω–∞ 10 —Å–µ–∫' },
  { base: 'scroll_curse', name: '–°–≤–∏—Ç–æ–∫ –ø—Ä–æ–∫–ª—è—Ç–∏—è', class: null, icon: 'üíÄ', color: '#2c3e50', type: 'consumable', slot: 'consumable', description: '–ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –¥–µ–±–∞—Ñ—Ñ –Ω–∞ –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 200' },
  { base: 'scroll_chaos', name: '–°–≤–∏—Ç–æ–∫ —Ö–∞–æ—Å–∞', class: null, icon: 'üé≠', color: '#e74c3c', type: 'consumable', slot: 'consumable', description: '–ó–∞—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Ä–∞–≥–æ–≤ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –Ω–∞ 15 —Å–µ–∫' },
  { base: 'scroll_fear', name: '–°–≤–∏—Ç–æ–∫ —Å—Ç—Ä–∞—Ö–∞', class: null, icon: 'üò±', color: '#8e44ad', type: 'consumable', slot: 'consumable', description: '–ó–∞—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Ä–∞–≥–æ–≤ —É–±–µ–≥–∞—Ç—å –æ—Ç –∏–≥—Ä–æ–∫–∞ –Ω–∞ 12 —Å–µ–∫' },
  { base: 'scroll_smoke', name: '–°–≤–∏—Ç–æ–∫ –¥—ã–º–∞', class: null, icon: 'üí®', color: '#7f8c8d', type: 'consumable', slot: 'consumable', description: '–°–æ–∑–¥–∞–µ—Ç –¥—ã–º–æ–≤—É—é –∑–∞–≤–µ—Å—É, —Å–∫—Ä—ã–≤–∞—é—â—É—é –∏–≥—Ä–æ–∫–∞ –Ω–∞ 10 —Å–µ–∫' },
  { base: 'scroll_meteor', name: '–°–≤–∏—Ç–æ–∫ –º–µ—Ç–µ–æ—Ä–∏—Ç–∞', class: null, icon: '‚òÑÔ∏è', color: '#e67e22', type: 'consumable', slot: 'consumable', description: '–í—ã–∑—ã–≤–∞–µ—Ç –ø–∞–¥–µ–Ω–∏–µ –º–µ—Ç–µ–æ—Ä–∏—Ç–∞ –≤ —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É –∫–∞—Ä—Ç—ã' },
  { base: 'scroll_barrier', name: '–°–≤–∏—Ç–æ–∫ –±–∞—Ä—å–µ—Ä–∞', class: null, icon: 'üõ°Ô∏è', color: '#3498db', type: 'consumable', slot: 'consumable', description: '–°–æ–∑–¥–∞–µ—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —â–∏—Ç, –∞–±—Å–æ—Ä–±–∏—Ä—É—é—â–∏–π 100 —É—Ä–æ–Ω–∞' },
  { base: 'scroll_rage', name: '–°–≤–∏—Ç–æ–∫ —è—Ä–æ—Å—Ç–∏', class: null, icon: 'üò°', color: '#e74c3c', type: 'consumable', slot: 'consumable', description: '–£—Ä–æ–Ω +100%, –Ω–æ –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–Ω –ø—Ä–∏ –∞—Ç–∞–∫–µ –Ω–∞ 12 —Å–µ–∫' },
  { base: 'scroll_invulnerability', name: '–°–≤–∏—Ç–æ–∫ –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏', class: null, icon: 'üíé', color: '#f1c40f', type: 'consumable', slot: 'consumable', description: '–ü–æ–ª–Ω–∞—è –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å –∫ —É—Ä–æ–Ω—É –Ω–∞ 5 —Å–µ–∫' },
  { base: 'scroll_vampirism', name: '–°–≤–∏—Ç–æ–∫ –≤–∞–º–ø–∏—Ä–∏–∑–º–∞', class: null, icon: 'ü¶á', color: '#8e44ad', type: 'consumable', slot: 'consumable', description: '50% —É—Ä–æ–Ω–∞ –æ—Ç –∞—Ç–∞–∫ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ 15 —Å–µ–∫' },
  { base: 'mystery_scroll', name: '–¢–∞–π–Ω—ã–π —Å–≤–∏—Ç–æ–∫', class: null, icon: 'üìú', color: '#8e44ad', type: 'consumable', slot: 'consumable', description: '–°–ª—É—á–∞–π–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∏–∑ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–≤–∏—Ç–∫–æ–≤' }
];

export const AFFIXES = [
  { key: 'damage', name: '–£—Ä–æ–Ω', min: 5, max: 30 },
  { key: 'crit', name: '–ö—Ä–∏—Ç', min: 2, max: 15 },
  { key: 'defense', name: '–ó–∞—â–∏—Ç–∞', min: 2, max: 15 },
  { key: 'maxHp', name: 'HP', min: 10, max: 60 },
  { key: 'moveSpeed', name: '–°–∫–æ—Ä–æ—Å—Ç—å', min: 5, max: 30 },
  { key: 'attackSpeed', name: '–°–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫–∏', min: 5, max: 25 },
  { key: 'attackRadius', name: '–î–∞–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏', min: 10, max: 50 },
  { key: 'fire', name: '–û–≥–æ–Ω—å', min: 5, max: 20 },
  { key: 'ice', name: '–õ—ë–¥', min: 5, max: 20 }
];

export const RARITIES = [
  { key: 'common', name: '–û–±—ã—á–Ω—ã–π', color: '#95a5a6', chance: 0.68 },
  { key: 'rare', name: '–†–µ–¥–∫–∏–π', color: '#3498db', chance: 0.21 },
  { key: 'epic', name: '–≠–ø–∏–∫', color: '#e67e22', chance: 0.07 },
  { key: 'legendary', name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', color: '#e74c3c', chance: 0.04 }
];

// ==================== –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–†–ï–î–ú–ï–¢–û–í ====================
export async function generateRandomItem(level, playerClass) {
  const { LOOT_CONFIG, getLevelRarityRates, getClassWeights, PityTimerSystem } = await import('./lootConfig.js');

  // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤—ã—Ö —à–∞–Ω—Å–æ–≤ –∏ –∫–ª–∞—Å—Å–æ–≤—ã—Ö –≤–µ—Å–æ–≤
  const classWeights = getClassWeights(playerClass || 'WARRIOR');
  const baseRates = LOOT_CONFIG.BASE_DROP_RATES;
  const roll = Math.random();
  let itemType;
  let accumulatedChance = 0;

  // –°–Ω–∞—á–∞–ª–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
  const totalWeight = Object.entries(baseRates).reduce((sum, [type, chance]) => {
    return sum + chance * (classWeights[type] || 1);
  }, 0);

  for (const [type, chance] of Object.entries(baseRates)) {
    const normalizedChance = (chance * (classWeights[type] || 1)) / totalWeight;
    accumulatedChance += normalizedChance;
    if (roll <= accumulatedChance) {
      itemType = type;
      break;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ itemType –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
  if (!itemType) {
    console.error('‚ùå ItemType is undefined! roll:', roll, 'accumulatedChance:', accumulatedChance);
    // –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∏–ø –∫–∞–∫ fallback
    const types = Object.keys(baseRates);
    itemType = types[types.length - 1];
  }

  // 2. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É–ª –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
  let pool = BASE_ITEMS.filter(it => {
    if (itemType === 'EQUIPMENT') {
      return !it.base.startsWith('scroll_') && !it.base.includes('potion');
    } else if (itemType === 'SCROLLS') {
      return it.base.startsWith('scroll_');
    } else if (itemType === 'POTIONS') {
      return it.base.includes('potion');
    }
    return true; // MISC items
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É–ª –Ω–µ –ø—É—Å—Ç–æ–π
  if (pool.length === 0) {
    console.error('‚ùå Item pool is empty! itemType:', itemType, 'BASE_ITEMS length:', BASE_ITEMS.length);
    // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    pool = BASE_ITEMS;
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–ª–∞—Å—Å—É, —Å –Ω–µ–±–æ–ª—å—à–∏–º —à–∞–Ω—Å–æ–º –Ω–∞ "–Ω–µ —Å–≤–æ–π" –ø—Ä–µ–¥–º–µ—Ç
  if (playerClass && Math.random() > 0.1) { // 10% —à–∞–Ω—Å –Ω–∞ "–Ω–µ —Å–≤–æ–π" –ø—Ä–µ–¥–º–µ—Ç
    pool = pool.filter(it => !it.class || it.class === playerClass);
  }

  // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞
  const rarityRates = getLevelRarityRates(level);
  const rarityRoll = Math.random();
  let rarity;
  let acc = 0;

  // –£—á–∏—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É Pity Timer –¥–ª—è —ç–ø–∏—á–µ—Å–∫–∏—Ö –∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
  if (PityTimerSystem.failedAttempts > 0) {
    const epicChance = PityTimerSystem.getAdjustedRareChance(LOOT_CONFIG.PITY_TIMER.BASE_EPIC_CHANCE);
    const legendaryChance = PityTimerSystem.getAdjustedRareChance(LOOT_CONFIG.PITY_TIMER.BASE_LEGENDARY_CHANCE);
    
    if (Math.random() < legendaryChance) {
      rarity = RARITIES.find(r => r.key === 'legendary');
      PityTimerSystem.reset();
    } else if (Math.random() < epicChance) {
      rarity = RARITIES.find(r => r.key === 'epic');
      PityTimerSystem.reset();
    }
  }

  // –ï—Å–ª–∏ Pity Timer –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ä–µ–¥–∫–æ—Å—Ç–∏
  if (!rarity) {
    for (const [rarityKey, chance] of Object.entries(rarityRates)) {
      acc += chance;
      if (rarityRoll < acc) {
        rarity = RARITIES.find(r => r.key.toUpperCase() === rarityKey);
        break;
      }
    }
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
    if (rarity.key !== 'epic' && rarity.key !== 'legendary') {
      PityTimerSystem.registerFailedAttempt();
    }
  }

  const base = pool[Math.floor(Math.random() * pool.length)];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ base –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
  if (!base) {
    console.error('‚ùå Base item is undefined! Pool length:', pool.length);
    return null;
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Å–æ–±—ã–µ/–¥–∂–æ–∫–µ—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
  if (Math.random() < LOOT_CONFIG.SPECIAL_ITEMS.UNIQUE_ITEM_CHANCE) {
    // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç, –µ—Å–ª–∏ –≤—ã–ø–∞–ª —à–∞–Ω—Å
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—É–ª —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    rarity = RARITIES.find(r => r.key === 'legendary');
  }

  // 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—Ñ—Ñ–∏–∫—Å—ã
  const affixCount = rarity.key === 'legendary' ? 3 : rarity.key === 'epic' ? 2 : rarity.key === 'rare' ? 1 : 0;
  const affixes = {};
  let used = new Set();
  
  // –ü–æ–¥–±–∏—Ä–∞–µ–º –∞—Ñ—Ñ–∏–∫—Å—ã —Å —É—á–µ—Ç–æ–º –∫–ª–∞—Å—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  for (let i = 0; i < affixCount; ++i) {
    let compatibleAffixes = AFFIXES.filter(aff => 
      !used.has(aff.key) && (!aff.class || aff.class === playerClass)
    );
    
    if (compatibleAffixes.length === 0) {
      compatibleAffixes = AFFIXES.filter(aff => !used.has(aff.key));
    }
    
    const aff = compatibleAffixes[Math.floor(Math.random() * compatibleAffixes.length)];
    used.add(aff.key);
    
    // –ó–Ω–∞—á–µ–Ω–∏–µ –∞—Ñ—Ñ–∏–∫—Å–∞ —Ä–∞—Å—Ç–µ—Ç —Å —É—Ä–æ–≤–Ω–µ–º –∏ –∏–º–µ–µ—Ç –Ω–µ–±–æ–ª—å—à–æ–π —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ä–∞–∑–±—Ä–æ—Å
    const levelScale = 0.7 + 0.3 * (level / 20); // –û—Ç 0.7 –¥–æ 1.0 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
    const randomScale = 0.8 + 0.4 * Math.random(); // –û—Ç 0.8 –¥–æ 1.2
    let value = Math.floor(aff.min + (aff.max - aff.min) * levelScale * randomScale);
    
    // –î–ª—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É—Å–∏–ª–∏–≤–∞–µ–º –±–æ–Ω—É—Å—ã
    if (rarity.key === 'legendary') {
      value = Math.floor(value * 1.2); // +20% –∫ –∑–Ω–∞—á–µ–Ω–∏—é
    }
    
    affixes[aff.key] = value;
  }
  
  // 6. –ë–∞–∑–æ–≤—ã–µ –±–æ–Ω—É—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∏ —Ä–µ–¥–∫–æ—Å—Ç–∏
  let bonus = { ...affixes };

  if (base.stats) {
    for (const [key, value] of Object.entries(base.stats)) {
      // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ + –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è –æ—Ç —É—Ä–æ–≤–Ω—è
      let scaledValue = value * (1 + (level - 1) * 0.2);
      
      // –ë–æ–Ω—É—Å –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏
      scaledValue *= rarity.key === 'legendary' ? 1.5 :
                     rarity.key === 'epic' ? 1.3 :
                     rarity.key === 'rare' ? 1.15 : 1;
      
      bonus[key] = Math.floor(scaledValue);
    }
  }

  // 7. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
  if (base.type === 'weapon') {
    bonus.damage = (bonus.damage || 0) + Math.floor(8 + level * 2 + (rarity.key === 'legendary' ? 10 : 0));
    if (base.base === 'staff' || base.base === 'wand') bonus.crit = (bonus.crit || 0) + Math.floor(level/2);
  }
  if (base.type === 'shield') {
    bonus.defense = (bonus.defense || 0) + Math.floor(6 + level * 1.5 + (rarity.key === 'legendary' ? 8 : 0));
    bonus.maxHp = (bonus.maxHp || 0) + Math.floor(15 + level * 2);
  }
  if (base.type === 'armor') {
    bonus.defense = (bonus.defense || 0) + Math.floor(4 + level + (rarity.key === 'legendary' ? 6 : 0));
    bonus.maxHp = (bonus.maxHp || 0) + Math.floor(10 + level * 2);
  }
  if (base.type === 'head') {
    bonus.defense = (bonus.defense || 0) + Math.floor(2 + level * 0.8 + (rarity.key === 'legendary' ? 4 : 0));
    bonus.maxHp = (bonus.maxHp || 0) + Math.floor(8 + level * 1.5);
  }
  if (base.type === 'gloves') {
    bonus.attackSpeed = (bonus.attackSpeed || 0) + Math.floor(2 + level * 0.5 + (rarity.key === 'legendary' ? 3 : 0));
    bonus.crit = (bonus.crit || 0) + Math.floor(1 + level * 0.3);
  }
  if (base.type === 'belt') {
    bonus.maxHp = (bonus.maxHp || 0) + Math.floor(5 + level * 1.2 + (rarity.key === 'legendary' ? 4 : 0));
    bonus.moveSpeed = (bonus.moveSpeed || 0) + Math.floor(2 + level * 0.4);
  }
  if (base.type === 'boots') {
    bonus.moveSpeed = (bonus.moveSpeed || 0) + Math.floor(3 + level * 0.8 + (rarity.key === 'legendary' ? 5 : 0));
    bonus.defense = (bonus.defense || 0) + Math.floor(1 + level * 0.3);
  }
  if (base.type === 'accessory') {
    bonus.moveSpeed = (bonus.moveSpeed || 0) + Math.floor(3 + level);
    bonus.crit = (bonus.crit || 0) + Math.floor(2 + level * 0.5);
  }
  if (base.type === 'consumable') {
    // –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –±–∞–Ω–æ–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
    switch (base.base) {
      case 'potion':
        // –û–±—ã—á–Ω–æ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        bonus.heal = 40 + Math.floor(level * 2.5);
        break;
      case 'speed_potion':
        // –ó–µ–ª—å–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ - –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞—Ñ—Ñ
        bonus.moveSpeed = 20 + Math.floor(level * 1.5);
        bonus.duration = 15; // 15 —Å–µ–∫—É–Ω–¥
        break;
      case 'strength_potion':
        // –ó–µ–ª—å–µ —Å–∏–ª—ã - –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞—Ñ—Ñ —É—Ä–æ–Ω–∞
        bonus.damage = 15 + Math.floor(level * 2);
        bonus.duration = 20; // 20 —Å–µ–∫—É–Ω–¥
        break;
      case 'defense_potion':
        // –ó–µ–ª—å–µ –∑–∞—â–∏—Ç—ã - –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞—Ñ—Ñ –∑–∞—â–∏—Ç—ã
        bonus.defense = 10 + Math.floor(level * 1.5);
        bonus.duration = 18; // 18 —Å–µ–∫—É–Ω–¥
        break;
      case 'regen_potion':
        // –ó–µ–ª—å–µ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        bonus.heal = 60 + Math.floor(level * 3);
        bonus.regenDuration = 8; // 8 —Å–µ–∫—É–Ω–¥ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        bonus.regenTick = 2; // –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        break;
      case 'combo_potion':
        // –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∑–µ–ª—å–µ - –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        bonus.heal = 30 + Math.floor(level * 2);
        bonus.damage = 10 + Math.floor(level * 1.5);
        bonus.moveSpeed = 15 + Math.floor(level * 1);
        bonus.duration = 12; // 12 —Å–µ–∫—É–Ω–¥
        break;
      case 'purification_potion':
        // –ó–µ–ª—å–µ –æ—á–∏—â–µ–Ω–∏—è - —Å–Ω–∏–º–∞–µ—Ç –≤—Å–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        bonus.purify = true; // –§–ª–∞–≥ –¥–ª—è –æ—á–∏—â–µ–Ω–∏—è
        bonus.heal = 20 + Math.floor(level * 1.5); // –ù–µ–±–æ–ª—å—à–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
        break;
      case 'mystery_potion':
        // –¢–∞–π–Ω–∞—è –±–∞–Ω–∫–∞ - —Å–ª—É—á–∞–π–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏/–∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ)
        bonus.mystery = true; // –§–ª–∞–≥ –¥–ª—è —Ç–∞–π–Ω–æ–π –±–∞–Ω–∫–∏
        bonus.effects = generateMysteryEffects(level);
        break;
      default:
        bonus.heal = 40 + Math.floor(level * 2.5);
    }
  }
  
  // 5. –†–∞–¥–∏—É—Å –¥–ª—è –º–∏–ª–∏—à–Ω–∏–∫–æ–≤
  let attackRadius = base.minRadius || 48;
  if (base.class === 'warrior') attackRadius = Math.floor(64 + level * 1.2);
  if (base.class === 'rogue') attackRadius = Math.floor(40 + level * 0.7);
  
  // –î–æ–±–∞–≤–ª—è–µ–º attackRadius –≤ bonus –¥–ª—è –æ—Ä—É–∂–∏—è
  if (base.type === 'weapon') {
    bonus.attackRadius = attackRadius;
  }
  
  // 6. –ù–∞–∑–≤–∞–Ω–∏–µ
  let name = base.name;
  if (affixCount > 0) name = `${rarity.name} ${name}`;
  
  // 7. –û–ø–∏—Å–∞–Ω–∏–µ
  let description = '';
  if (base.type === 'consumable') {
    // –î–ª—è –∑–µ–ª–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch (base.base) {
      case 'potion':
        description = `–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ${bonus.heal} –∑–¥–æ—Ä–æ–≤—å—è`;
        break;
      case 'speed_potion':
        description = `–°–∫–æ—Ä–æ—Å—Ç—å +${bonus.moveSpeed} –Ω–∞ ${bonus.duration}—Å`;
        break;
      case 'strength_potion':
        description = `–£—Ä–æ–Ω +${bonus.damage} –Ω–∞ ${bonus.duration}—Å`;
        break;
      case 'defense_potion':
        description = `–ó–∞—â–∏—Ç–∞ +${bonus.defense} –Ω–∞ ${bonus.duration}—Å`;
        break;
      case 'regen_potion':
        description = `–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è ${bonus.heal} HP –∑–∞ ${bonus.regenDuration}—Å`;
        break;
      case 'purification_potion':
        description = `–°–Ω–∏–º–∞–µ—Ç –≤—Å–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ${bonus.heal} –∑–¥–æ—Ä–æ–≤—å—è`;
        break;
      case 'combo_potion':
        const effects = [];
        if (bonus.heal) effects.push(`HP +${bonus.heal}`);
        if (bonus.damage) effects.push(`–£—Ä–æ–Ω +${bonus.damage}`);
        if (bonus.moveSpeed) effects.push(`–°–∫–æ—Ä–æ—Å—Ç—å +${bonus.moveSpeed}`);
        description = `${effects.join(', ')} –Ω–∞ ${bonus.duration}—Å`;
        break;
      case 'mystery_potion':
        description = '–°–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã. –ú–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –ø–æ–ª–µ–∑–Ω—ã–º, —Ç–∞–∫ –∏ –≤—Ä–µ–¥–Ω—ã–º...';
        break;
      // –°–≤–∏—Ç–∫–∏
      case 'scroll_werewolf':
        description = '–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤ –≤–æ–ª–∫–∞: —Å–∫–æ—Ä–æ—Å—Ç—å +50%, —É—Ä–æ–Ω +30%, –∑–∞—â–∏—Ç–∞ -20% –Ω–∞ 15 —Å–µ–∫';
        break;
      case 'scroll_stone':
        description = '–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–æ–ª–µ–º–∞: –∑–∞—â–∏—Ç–∞ +100%, —Å–∫–æ—Ä–æ—Å—Ç—å -60% –Ω–∞ 12 —Å–µ–∫';
        break;
      case 'scroll_fire_explosion':
        description = '–í–∑—Ä—ã–≤–Ω–∞—è –≤–æ–ª–Ω–∞ –æ–≥–Ω—è: —É—Ä–æ–Ω 40, —Ä–∞–¥–∏—É—Å 120, –ø–æ–¥–∂–∏–≥–∞–µ—Ç –≤—Ä–∞–≥–æ–≤';
        break;
      case 'scroll_ice_storm':
        description = '–ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 150 –Ω–∞ 5 —Å–µ–∫';
        break;
      case 'scroll_lightning':
        description = '–¶–µ–ø–Ω–∞—è –º–æ–ª–Ω–∏—è –º–µ–∂–¥—É –≤—Ä–∞–≥–∞–º–∏: —É—Ä–æ–Ω 25, –¥–æ 5 —Ü–µ–ª–µ–π';
        break;
      case 'scroll_earthquake':
        description = '–°–æ–∑–¥–∞–µ—Ç —Ç—Ä–µ—â–∏–Ω—ã, –∑–∞–º–µ–¥–ª—è—é—â–∏–µ –≤—Ä–∞–≥–æ–≤ –Ω–∞ 8 —Å–µ–∫';
        break;
      case 'scroll_clone':
        description = '–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª–æ–Ω–∞ –∏–≥—Ä–æ–∫–∞: —É—Ä–æ–Ω 50% –Ω–∞ 20 —Å–µ–∫';
        break;
      case 'scroll_teleport':
        description = '–°–ª—É—á–∞–π–Ω—ã–π —Ç–µ–ª–µ–ø–æ—Ä—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–∞—Ä—Ç—ã';
        break;
      case 'scroll_invisibility':
        description = '–ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—å –¥–ª—è –≤—Ä–∞–≥–æ–≤ –Ω–∞ 8 —Å–µ–∫';
        break;
      case 'scroll_time':
        description = '–ó–∞–º–µ–¥–ª—è–µ—Ç –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –Ω–∞ 60% –Ω–∞ 10 —Å–µ–∫';
        break;
      case 'scroll_curse':
        description = '–ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –¥–µ–±–∞—Ñ—Ñ –Ω–∞ –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 200';
        break;
      case 'scroll_chaos':
        description = '–ó–∞—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Ä–∞–≥–æ–≤ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –Ω–∞ 15 —Å–µ–∫';
        break;
      case 'scroll_fear':
        description = '–ó–∞—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Ä–∞–≥–æ–≤ —É–±–µ–≥–∞—Ç—å –æ—Ç –∏–≥—Ä–æ–∫–∞ –Ω–∞ 12 —Å–µ–∫';
        break;
      case 'scroll_smoke':
        description = '–°–æ–∑–¥–∞–µ—Ç –¥—ã–º–æ–≤—É—é –∑–∞–≤–µ—Å—É, —Å–∫—Ä—ã–≤–∞—é—â—É—é –∏–≥—Ä–æ–∫–∞ –Ω–∞ 10 —Å–µ–∫';
        break;
      case 'scroll_meteor':
        description = '–í—ã–∑—ã–≤–∞–µ—Ç –ø–∞–¥–µ–Ω–∏–µ –º–µ—Ç–µ–æ—Ä–∏—Ç–∞ –≤ —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É –∫–∞—Ä—Ç—ã';
        break;
      case 'scroll_barrier':
        description = '–°–æ–∑–¥–∞–µ—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —â–∏—Ç, –∞–±—Å–æ—Ä–±–∏—Ä—É—é—â–∏–π 100 —É—Ä–æ–Ω–∞';
        break;
      case 'scroll_rage':
        description = '–£—Ä–æ–Ω +100%, –Ω–æ –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–Ω –ø—Ä–∏ –∞—Ç–∞–∫–µ –Ω–∞ 12 —Å–µ–∫';
        break;
      case 'scroll_invulnerability':
        description = '–ü–æ–ª–Ω–∞—è –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å –∫ —É—Ä–æ–Ω—É –Ω–∞ 5 —Å–µ–∫';
        break;
      case 'scroll_vampirism':
        description = '50% —É—Ä–æ–Ω–∞ –æ—Ç –∞—Ç–∞–∫ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ 15 —Å–µ–∫';
        break;
      case 'mystery_scroll':
        description = '–°–ª—É—á–∞–π–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∏–∑ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–≤–∏—Ç–∫–æ–≤';
        break;
      default:
        description = `–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ${bonus.heal} –∑–¥–æ—Ä–æ–≤—å—è`;
    }
  } else {
    // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –±–æ–Ω—É—Å—ã
    const bonusEntries = Object.entries(bonus).filter(([k, v]) => v > 0);
    if (bonusEntries.length > 0) {
      description = bonusEntries.map(([k,v]) => {
        if (k === 'attackRadius') return `–î–∞–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏: ${v}`;
        if (k === 'maxHp') return `HP: +${v}`;
        if (k === 'damage') return `–£—Ä–æ–Ω: +${v}`;
        if (k === 'defense') return `–ó–∞—â–∏—Ç–∞: +${v}`;
        if (k === 'crit') return `–ö—Ä–∏—Ç: +${v}%`;
        if (k === 'moveSpeed') return `–°–∫–æ—Ä–æ—Å—Ç—å: +${v}`;
        if (k === 'attackSpeed') return `–°–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫–∏: +${v}%`;
        return `${AFFIXES.find(a=>a.key===k)?.name||k}: +${v}`;
      }).join(', ');
    } else {
      description = '–ë–∞–∑–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç';
    }
  }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ–Ω–∫—É –∏–∑ –±–∞–∑—ã –ø—Ä–µ–¥–º–µ—Ç–∞ (—Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–ø—Ä–∞–π—Ç—ã –±—É–¥—É—Ç –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å—Å—è –≤ DroppedItem)
  let icon = base.icon;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
  const id = Math.random().toString(36).substr(2, 9) + Date.now().toString(36);
  
  return {
    id, // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    name,
    base: base.base,
    class: base.class,
    type: base.type,
    slot: base.slot, // –î–æ–±–∞–≤–ª—è–µ–º slot –∏–∑ base
    bonus,
    rarity: rarity.key,
    color: rarity.color,
    icon,
    description,
    attackRadius
  };
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–∞–π–Ω–æ–π –±–∞–Ω–∫–∏
export function generateMysteryEffects(level) {
  const effects = [];
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (1-3)
  const effectCount = Math.floor(Math.random() * 3) + 1;
  
  // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  const positiveEffects = [
    { type: 'heal', value: 30 + Math.floor(level * 2), description: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è' },
    { type: 'damage', value: 10 + Math.floor(level * 1.5), duration: 15, description: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞' },
    { type: 'defense', value: 8 + Math.floor(level * 1.2), duration: 12, description: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã' },
    { type: 'moveSpeed', value: 15 + Math.floor(level * 1), duration: 10, description: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏' },
    { type: 'crit', value: 8 + Math.floor(level * 0.8), duration: 18, description: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞' },
    { type: 'attackSpeed', value: 12 + Math.floor(level * 1), duration: 14, description: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏' },
    { type: 'maxHp', value: 20 + Math.floor(level * 2), description: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è' },
    { type: 'fire', value: 8 + Math.floor(level * 1), duration: 20, description: '–û–≥–Ω–µ–Ω–Ω—ã–π —É—Ä–æ–Ω' },
    { type: 'ice', value: 6 + Math.floor(level * 0.8), duration: 16, description: '–õ–µ–¥—è–Ω–æ–π —É—Ä–æ–Ω' }
  ];
  
  // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  const negativeEffects = [
    { type: 'poison', value: 5 + Math.floor(level * 0.5), duration: 8, description: '–û—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ' },
    { type: 'burn', value: 4 + Math.floor(level * 0.4), duration: 6, description: '–û–∂–æ–≥' },
    { type: 'freeze', value: 0, duration: 3, description: '–ó–∞–º–æ—Ä–æ–∑–∫–∞' },
    { type: 'slow', value: 0, duration: 5, description: '–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ' },
    { type: 'weakness', value: 0, duration: 7, description: '–°–ª–∞–±–æ—Å—Ç—å' },
    { type: 'vulnerability', value: 5 + Math.floor(level * 0.3), duration: 10, description: '–£—è–∑–≤–∏–º–æ—Å—Ç—å' },
    { type: 'damage_debuff', value: 8 + Math.floor(level * 1), duration: 12, description: '–°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞' },
    { type: 'defense_debuff', value: 6 + Math.floor(level * 0.8), duration: 10, description: '–°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã' },
    { type: 'moveSpeed_debuff', value: 10 + Math.floor(level * 0.6), duration: 8, description: '–°–Ω–∏–∂–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏' }
  ];
  
  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  const usedTypes = new Set();
  
  for (let i = 0; i < effectCount; i++) {
    // 60% —à–∞–Ω—Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞, 40% –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ
    const isPositive = Math.random() < 0.6;
    const effectPool = isPositive ? positiveEffects : negativeEffects;
    
    let effect;
    let attempts = 0;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
    do {
      effect = effectPool[Math.floor(Math.random() * effectPool.length)];
      attempts++;
    } while (usedTypes.has(effect.type) && attempts < 10);
    
    if (!usedTypes.has(effect.type)) {
      usedTypes.add(effect.type);
      effects.push({
        ...effect,
        isPositive
      });
    }
  }
  
  return effects;
} // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ - Fri Aug  1 19:38:58 MSK 2025
