/* Darkfall Depths - –°—É–Ω–¥—É–∫ */

import { Entity } from './Entity.js';
import { gameState, ctx } from '../core/GameState.js';
import { TILE_SIZE, IS_MOBILE } from '../config/constants.js';
import { generateRandomItem } from '../config/constants.js';

export class Chest extends Entity {
  constructor(x, y, level = 1) {
    super(x, y);
    this.radius = 16;
    this.isOpened = false; // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
    this.isInteracting = false;
    this.level = level;
    this.inventory = [];
    this.maxSlots = 6; // –ú–∞–∫—Å–∏–º—É–º 6 —Å–ª–æ—Ç–æ–≤ –≤ —Å—É–Ω–¥—É–∫–µ
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É–Ω–¥—É–∫–∞
    this.generateContents();
  }
  
  generateContents() {
    // –®–∞–Ω—Å –ø—É—Å—Ç–æ–≥–æ —Å—É–Ω–¥—É–∫–∞ (20%)
    if (Math.random() < 0.2) {
      return;
    }
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (1-4, —Ä–µ–¥–∫–æ 5-6)
    const itemCount = Math.random() < 0.7 ? 
      Math.floor(Math.random() * 3) + 1 : 
      Math.floor(Math.random() * 2) + 4;
    
    for (let i = 0; i < itemCount && this.inventory.length < this.maxSlots; i++) {
      const item = generateRandomItem(this.level, gameState.player?.class);
      if (item) {
        this.inventory.push(item);
      }
    }
  }
  
  update(dt) {
    super.update(dt);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∏–≥—Ä–æ–∫–æ–º
    if (gameState.player && this.inventory.length > 0) {
      const distance = Math.sqrt(
        Math.pow(this.x - gameState.player.x, 2) + 
        Math.pow(this.y - gameState.player.y, 2)
      );
      
      if (distance < this.radius + gameState.player.radius) {
        this.isInteracting = true;
        this.showInteractionHint();
      } else {
        this.isInteracting = false;
        this.hideInteractionHint();
      }
    }
  }
  
  showInteractionHint() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –±–ª–∏–∂–∞–π—à–∏–π —Å—É–Ω–¥—É–∫ –∫ –∏–≥—Ä–æ–∫—É
    if (!gameState.player || !gameState.entities) return;
    
    let nearestChest = null;
    let minDistance = Infinity;
    
    for (const entity of gameState.entities) {
      if (entity.constructor.name === 'Chest' && entity.inventory.length > 0) {
        const distance = Math.sqrt(
          Math.pow(entity.x - gameState.player.x, 2) + 
          Math.pow(entity.y - gameState.player.y, 2)
        );
        
        if (distance < minDistance) {
          minDistance = distance;
          nearestChest = entity;
        }
      }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å—É–Ω–¥—É–∫–∞, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –≤ –±–æ—é
    if (nearestChest === this && !this.isPlayerInCombat()) {
      const hint = document.getElementById('interactionHint');
      if (hint && !hint.classList.contains('active')) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if (IS_MOBILE) {
          // –ú–æ–±–∏–ª—å–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
          hint.innerHTML = '<div class="hint-content"><span class="hint-text">–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å—É–Ω–¥—É–∫</span></div>';
        } else {
          // –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
          hint.innerHTML = '<div class="hint-content"><span class="hint-key">E</span><span class="hint-text">–û—Ç–∫—Ä—ã—Ç—å —Å—É–Ω–¥—É–∫</span></div>';
        }
        
        hint.classList.remove('hidden');
        hint.classList.add('active');
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        if (IS_MOBILE) {
          console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Å—É–Ω–¥—É–∫–∞');
        }
      }
    }
  }
  
  hideInteractionHint() {
    // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ—Ç–æ—à–µ–ª –æ—Ç —Å—É–Ω–¥—É–∫–∞
    const hint = document.getElementById('interactionHint');
    if (hint && hint.classList.contains('active')) {
      hint.classList.add('hidden');
      hint.classList.remove('active');
    }
  }
  
  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞
  static hideAllInteractionHints() {
    const hint = document.getElementById('interactionHint');
    if (hint && hint.classList.contains('active')) {
      hint.classList.add('hidden');
      hint.classList.remove('active');
    }
  }
  
  isPlayerInCombat() {
    if (!gameState.player || !gameState.entities) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–∞–≥–∏ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º
    for (const entity of gameState.entities) {
      if (entity.constructor.name === 'Enemy' && !entity.isDead) {
        const distance = Math.sqrt(
          Math.pow(entity.x - gameState.player.x, 2) + 
          Math.pow(entity.y - gameState.player.y, 2)
        );
        
        if (distance < 150) { // –†–∞–¥–∏—É—Å –±–æ—è
          // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –±–æ—è
          this.hideInteractionHint();
          return true;
        }
      }
    }
    
    return false;
  }
  
  draw() {
    const screenX = this.x - gameState.camera.x;
    const screenY = this.y - gameState.camera.y;
    
    // –†–∏—Å—É–µ–º —Å—É–Ω–¥—É–∫ –≤ —Å—Ç–∏–ª–µ –∏–≥—Ä—ã
    ctx.save();
    
    // –û—Å–Ω–æ–≤–Ω–æ–π —Å—É–Ω–¥—É–∫
    ctx.fillStyle = '#8B4513';
    ctx.fillRect(screenX - 12, screenY - 8, 24, 16);
    ctx.fillStyle = '#654321';
    ctx.fillRect(screenX - 10, screenY - 6, 20, 12);
    
    // –ó–∞–º–æ–∫
    ctx.fillStyle = '#FFD700';
    ctx.fillRect(screenX - 2, screenY - 2, 4, 4);
    
    // –≠–º–æ–¥–∑–∏ —Å—É–Ω–¥—É–∫–∞
    ctx.font = '16px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('üóÉÔ∏è', screenX, screenY + 4);
    
    // –ú–µ–ª–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã
    if (this.inventory.length > 0) {
      ctx.fillStyle = '#FFD700';
      ctx.beginPath();
      ctx.arc(screenX + 8, screenY - 6, 3, 0, Math.PI * 2);
      ctx.fill();
    }
    
    ctx.restore();
  }
  
  async open() {
    // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—É–Ω–¥—É–∫–∞
    this.hideInteractionHint();
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º UI —Å—É–Ω–¥—É–∫–∞ (–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç)
    try {
      const { ChestManager } = await import('../ui/ChestManager.js');
      if (!ChestManager.isInitialized) {
        ChestManager.init();
        ChestManager.isInitialized = true;
      }
      await ChestManager.openChest(this);
      
      // –ù–ï –ø–æ–º–µ—á–∞–µ–º —Å—É–Ω–¥—É–∫ –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—ã–π - –ø–æ–∑–≤–æ–ª—è–µ–º –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
      // this.isOpened = true;
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—É–Ω–¥—É–∫–∞:', e);
    }
  }
  
  takeItem(itemIndex) {
    if (itemIndex < 0 || itemIndex >= this.inventory.length) return null;
    
    const item = this.inventory.splice(itemIndex, 1)[0];
    
    // –ù–ï –ø–æ–º–µ—á–∞–µ–º —Å—É–Ω–¥—É–∫ –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—ã–π - –ø–æ–∑–≤–æ–ª—è–µ–º –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
    // if (this.inventory.length === 0) {
    //   this.isOpened = true;
    // }
    
    return item;
  }
  
  isEmpty() {
    return this.inventory.length === 0;
  }
}
