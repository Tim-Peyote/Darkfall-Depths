/* Darkfall Depths - –ö–ª–∞—Å—Å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ */

import { Entity } from './Entity.js';
import { gameState, ctx, Utils } from '../core/GameState.js';
import { audioManager } from '../audio/AudioManager.js';
import { BASE_ITEMS } from '../config/constants.js';

export class DroppedItem extends Entity {
  constructor(x, y, itemData) {
    super(x, y);
    this.itemData = itemData;
    this.radius = 16; // –£–≤–µ–ª–∏—á–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
    this.bobTime = 0;
    this.pulseTime = 0;
    this.sparkleTime = 0;
  }
  
  update(dt) {
    this.bobTime += dt * 3;
    this.pulseTime += dt * 4;
    this.sparkleTime += dt * 6;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–º
    if (gameState.player && Utils.distance(this, gameState.player) < 25) {
      this.pickup();
    }
  }
  
  pickup() {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    for (let i = 0; i < gameState.inventory.backpack.length; i++) {
      if (!gameState.inventory.backpack[i]) {
        this.itemData.isNew = true; // –§–ª–∞–≥ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        gameState.inventory.backpack[i] = this.itemData;
        this.isDead = true;
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø–æ–¥–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ (–¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π)
        audioManager.playItemPickup();
        
        return;
      }
    }
  }
  
  draw() {
    const screenX = this.x - gameState.camera.x;
    const screenY = this.y - gameState.camera.y;
    const offsetY = Math.sin(this.bobTime) * 4;
    
    // –†–∏—Å—É–µ–º —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    this.renderCustomItem(ctx, screenX, screenY + offsetY);
  }
  
  renderCustomItem(ctx, x, y) {
    ctx.save();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    const rotation = this.bobTime * 0.5;
    
    // –ü—É–ª—å—Å–∏—Ä—É—é—â–µ–µ —Å–≤–µ—á–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    const pulseGlow = Math.sin(this.pulseTime) * 0.3 + 0.7;
    const glowSize = this.radius * (1.2 + pulseGlow * 0.3);
    
    // –§–æ–Ω–æ–≤–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
    const gradient = ctx.createRadialGradient(x, y, 0, x, y, glowSize);
    gradient.addColorStop(0, `${this.itemData.color}40`);
    gradient.addColorStop(0.7, `${this.itemData.color}20`);
    gradient.addColorStop(1, `${this.itemData.color}00`);
    ctx.fillStyle = gradient;
    ctx.beginPath();
    ctx.arc(x, y, glowSize, 0, Math.PI * 2);
    ctx.fill();
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–µ–¥–º–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ —Å fallback –Ω–∞ base
    let itemType = this.itemData.slot || this.itemData.type;
    
    // Fallback: –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ base
    if (!itemType && this.itemData.base) {
      const baseItem = BASE_ITEMS.find(bi => bi.base === this.itemData.base);
      if (baseItem) {
        itemType = baseItem.slot || baseItem.type;
      }
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ itemType –≤—Å–µ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º type
    if (!itemType) {
      itemType = this.itemData.type;
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–∞–Ω—Ç–∏–∏
    if (this.itemData.base === 'robe') {
      itemType = 'armor';
    }
    
    // –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è —Å–≤–∏—Ç–∫–æ–≤
    if (this.itemData.base && this.itemData.base.startsWith('scroll_')) {
              // Logger.debug('üîç –°–≤–∏—Ç–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω:', this.itemData.base, 'itemType:', itemType, 'slot:', this.itemData.slot, 'type:', this.itemData.type);
    }
    

    
    switch (itemType) {
      case 'weapon':
        DroppedItem.renderWeapon(ctx, x, y, rotation, this.radius, this.itemData);
        break;
      case 'shield':
        DroppedItem.renderShield(ctx, x, y, rotation, this.radius);
        break;
      case 'armor':
        DroppedItem.renderArmor(ctx, x, y, rotation, this.radius, this.itemData);
        break;
      case 'head':
        DroppedItem.renderHead(ctx, x, y, rotation, this.radius, this.itemData);
        break;
      case 'gloves':
        DroppedItem.renderGloves(ctx, x, y, rotation, this.radius);
        break;
      case 'belt':
        DroppedItem.renderBelt(ctx, x, y, rotation, this.radius);
        break;
      case 'boots':
        DroppedItem.renderBoots(ctx, x, y, rotation, this.radius);
        break;
      case 'accessory':
        DroppedItem.renderAccessory(ctx, x, y, rotation, this.radius, this.itemData);
        break;
      case 'consumable':
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–≤–∏—Ç–∫–æ–º
        if (this.itemData.base && this.itemData.base.startsWith('scroll_')) {
          // –°–≤–∏—Ç–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ renderScroll
          DroppedItem.renderScroll(ctx, x, y, rotation, this.radius, this.itemData, this.sparkleTime);
        } else {
          // –ó–µ–ª—å—è –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ renderConsumable
          DroppedItem.renderConsumable(ctx, x, y, rotation, this.radius, this.itemData, this.sparkleTime);
        }
        break;
      default:
        // –ï—Å–ª–∏ itemType –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å base
        switch (this.itemData.base) {
          case 'sword':
          case 'axe':
          case 'staff':
          case 'wand':
          case 'dagger':
          case 'crossbow':
            DroppedItem.renderWeapon(ctx, x, y, rotation, this.radius, this.itemData);
            break;
          case 'shield':
            DroppedItem.renderShield(ctx, x, y, rotation, this.radius);
            break;
          case 'robe':
          case 'leather':
          case 'plate':
            DroppedItem.renderArmor(ctx, x, y, rotation, this.radius, this.itemData);
            break;
          case 'helmet':
          case 'hood':
          case 'cap':
            DroppedItem.renderHead(ctx, x, y, rotation, this.radius, this.itemData);
            break;
          case 'gloves':
            DroppedItem.renderGloves(ctx, x, y, rotation, this.radius);
            break;
          case 'belt':
            DroppedItem.renderBelt(ctx, x, y, rotation, this.radius);
            break;
          case 'boots':
            DroppedItem.renderBoots(ctx, x, y, rotation, this.radius);
            break;
          case 'amulet':
          case 'ring':
            DroppedItem.renderAccessory(ctx, x, y, rotation, this.radius, this.itemData);
            break;
          case 'potion':
          case 'speed_potion':
          case 'strength_potion':
          case 'defense_potion':
          case 'regen_potion':
          case 'combo_potion':
          case 'mystery_potion':
          case 'purification_potion':
            // –ó–µ–ª—å—è –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω—ã –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            DroppedItem.renderConsumable(ctx, x, y, rotation, this.radius, this.itemData, this.sparkleTime);
            break;
          // –°–≤–∏—Ç–∫–∏
          case 'scroll_werewolf':
          case 'scroll_stone':
          case 'scroll_ghost':
          case 'scroll_fire_explosion':
          case 'scroll_ice_storm':
          case 'scroll_lightning':
          case 'scroll_earthquake':
          case 'scroll_clone':
          case 'scroll_teleport':
          case 'scroll_invisibility':
          case 'scroll_time':
          case 'scroll_curse':
          case 'scroll_chaos':
          case 'scroll_fear':
          case 'scroll_smoke':
          case 'scroll_meteor':
          case 'scroll_barrier':
          case 'scroll_rage':
          case 'scroll_invulnerability':
          case 'scroll_vampirism':
          case 'mystery_scroll':
            // –°–≤–∏—Ç–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ renderConsumable
            DroppedItem.renderConsumable(ctx, x, y, rotation, this.radius, this.itemData, this.sparkleTime);
            break;
          default:
            // –£–ª—É—á—à–µ–Ω–Ω—ã–π fallback - –∫—Ä—É–≥–ª–∞—è –∏–∫–æ–Ω–∫–∞ —Å —Ü–≤–µ—Ç–æ–º –ø—Ä–µ–¥–º–µ—Ç–∞
            ctx.fillStyle = this.itemData.color;
            ctx.beginPath();
            ctx.arc(x, y, this.radius * 0.4, 0, Math.PI * 2);
            ctx.fill();
            
            // –û–±–≤–æ–¥–∫–∞
            ctx.strokeStyle = '#ffffff';
            ctx.lineWidth = 2;
            ctx.stroke();
            
            // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            ctx.fillStyle = '#ffffff';
            ctx.font = `${this.radius * 0.3}px Arial`;
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            
            let symbol = '?';
            if (this.itemData.base) {
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –ø–æ base
              switch (this.itemData.base) {
                case 'sword': symbol = '‚öîÔ∏è'; break;
                case 'axe': symbol = 'ü™ì'; break;
                case 'staff': symbol = 'üîÆ'; break;
                case 'wand': symbol = '‚ú®'; break;
                case 'dagger': symbol = 'üó°Ô∏è'; break;
                case 'crossbow': symbol = 'üèπ'; break;
                case 'shield': symbol = 'üõ°Ô∏è'; break;
                case 'robe': symbol = 'üß•'; break;
                case 'leather': symbol = 'ü•ã'; break;
                case 'plate': symbol = 'ü•ã'; break;
                case 'helmet': symbol = '‚õëÔ∏è'; break;
                case 'hood': symbol = 'üëí'; break;
                case 'cap': symbol = 'üé©'; break;
                case 'gloves': symbol = 'üß§'; break;
                case 'belt': symbol = 'üéóÔ∏è'; break;
                case 'boots': symbol = 'üë¢'; break;
                case 'amulet': symbol = 'üìø'; break;
                case 'ring': symbol = 'üíç'; break;
                case 'potion': symbol = 'üß™'; break;
                case 'speed_potion': symbol = 'üí®'; break;
                case 'strength_potion': symbol = 'üí™'; break;
                case 'defense_potion': symbol = 'üõ°Ô∏è'; break;
                case 'regen_potion': symbol = 'üíö'; break;
                case 'combo_potion': symbol = 'üåà'; break;
                case 'mystery_potion': symbol = '‚ùì'; break;
                case 'purification_potion': symbol = '‚ú®'; break;
                // –°–≤–∏—Ç–∫–∏
                case 'scroll_werewolf': symbol = 'üê∫'; break;
                case 'scroll_stone': symbol = 'üóø'; break;
                case 'scroll_ghost': symbol = 'üëª'; break;
                case 'scroll_fire_explosion': symbol = 'üî•'; break;
                case 'scroll_ice_storm': symbol = '‚ùÑÔ∏è'; break;
                case 'scroll_lightning': symbol = '‚ö°'; break;
                case 'scroll_earthquake': symbol = 'üåã'; break;
                case 'scroll_clone': symbol = 'üë•'; break;
                case 'scroll_teleport': symbol = 'üåÄ'; break;
                case 'scroll_invisibility': symbol = 'üëÅÔ∏è'; break;
                case 'scroll_time': symbol = '‚è∞'; break;
                case 'scroll_curse': symbol = 'üíÄ'; break;
                case 'scroll_chaos': symbol = 'üé≠'; break;
                case 'scroll_fear': symbol = 'üò±'; break;
                case 'scroll_smoke': symbol = 'üí®'; break;
                case 'scroll_meteor': symbol = '‚òÑÔ∏è'; break;
                case 'scroll_barrier': symbol = 'üõ°Ô∏è'; break;
                case 'scroll_rage': symbol = 'üò°'; break;
                case 'scroll_invulnerability': symbol = 'üíé'; break;
                case 'scroll_vampirism': symbol = 'ü¶á'; break;
                case 'mystery_scroll': symbol = '‚ùì'; break;
                default: symbol = 'üì¶'; break;
              }
            }
            
            ctx.fillText(symbol, x, y);
            break;
        }
        break;
    }
    
    // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å–∫—Ä—ã
    this.renderSparkles(ctx, x, y);
    
    // –£—Å–∏–ª–µ–Ω–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Ç–µ–Ω—å, –±–µ–∑ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–µ–≥–æ –∫—Ä—É–≥–∞)
    if (this.itemData.rarity === 'rare') {
      ctx.shadowColor = this.itemData.color;
      ctx.shadowBlur = 20;
      ctx.shadowBlur = 0;
    }
    
    ctx.restore();
  }
  
  renderSparkles(ctx, x, y) {
    ctx.fillStyle = '#ffffff';
    for (let i = 0; i < 4; i++) {
      const angle = (i / 4) * Math.PI * 2 + this.sparkleTime;
      const sparkleX = x + Math.cos(angle) * this.radius * 0.8;
      const sparkleY = y + Math.sin(angle) * this.radius * 0.8;
      const sparkleSize = Math.sin(this.sparkleTime * 2 + i) * 0.5 + 1;
      
      ctx.save();
      ctx.translate(sparkleX, sparkleY);
      ctx.scale(sparkleSize, sparkleSize);
      ctx.fillRect(-1, -1, 2, 2);
      ctx.restore();
    }
  }
  
  static renderShield(ctx, x, y, rotation, radius) {
    const size = radius * 1.2;
    
    ctx.save();
    ctx.translate(x, y);
    ctx.rotate(rotation);
    
    // –©–∏—Ç - –∫—Ä—É–≥–ª–∞—è —Ñ–æ—Ä–º–∞
    ctx.fillStyle = '#95a5a6';
    ctx.beginPath();
    ctx.arc(0, 0, size * 0.4, 0, Math.PI * 2);
    ctx.fill();
    
    // –û–±–≤–æ–¥–∫–∞ —â–∏—Ç–∞
    ctx.strokeStyle = '#ffffff';
    ctx.lineWidth = 2;
    ctx.stroke();
    
    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —ç–º–±–ª–µ–º–∞
    ctx.fillStyle = '#ffffff';
    ctx.beginPath();
    ctx.arc(0, 0, size * 0.15, 0, Math.PI * 2);
    ctx.fill();
    
    ctx.restore();
  }
  
  static renderHead(ctx, x, y, rotation, radius, itemData) {
    const size = radius * 1.2;
    
    ctx.save();
    ctx.translate(x, y);
    ctx.rotate(rotation);
    
    switch (itemData.base) {
      case 'helmet':
        // –®–ª–µ–º
        ctx.fillStyle = '#95a5a6';
        ctx.beginPath();
        ctx.arc(0, 0, size * 0.4, 0, Math.PI * 2);
        ctx.fill();
        
        // –û–±–≤–æ–¥–∫–∞ —à–ª–µ–º–∞
        ctx.strokeStyle = '#ffffff';
        ctx.lineWidth = 2;
        ctx.stroke();
        break;
        
      case 'hood':
        // –ö–∞–ø—é—à–æ–Ω
        ctx.fillStyle = '#6c3483';
        ctx.beginPath();
        ctx.arc(0, 0, size * 0.4, 0, Math.PI * 2);
        ctx.fill();
        
        // –î–µ—Ç–∞–ª–∏ –∫–∞–ø—é—à–æ–Ω–∞
        ctx.strokeStyle = '#8e44ad';
        ctx.lineWidth = 2;
        ctx.stroke();
        break;
        
      case 'cap':
        // –ö–µ–ø–∫–∞
        ctx.fillStyle = '#d35400';
        ctx.beginPath();
        ctx.arc(0, 0, size * 0.4, 0, Math.PI * 2);
        ctx.fill();
        
        // –ö–æ–∑—ã—Ä–µ–∫
        ctx.fillStyle = '#8b4513';
        ctx.fillRect(-size * 0.2, -size * 0.1, size * 0.4, size * 0.1);
        break;
        
      default:
        // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —É–±–æ—Ä–∞
        ctx.fillStyle = '#95a5a6';
        ctx.beginPath();
        ctx.arc(0, 0, size * 0.4, 0, Math.PI * 2);
        ctx.fill();
        break;
    }
    
    ctx.restore();
  }
  
  static renderGloves(ctx, x, y, rotation, radius) {
    const size = radius * 1.2;
    
    ctx.save();
    ctx.translate(x, y);
    ctx.rotate(rotation);
    
    // –ü–µ—Ä—á–∞—Ç–∫–∏ - —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ
    ctx.fillStyle = '#8b4513';
    ctx.beginPath();
    ctx.arc(0, 0, size * 0.3, 0, Math.PI * 2);
    ctx.fill();
    
    // –î–µ—Ç–∞–ª–∏ –ø–µ—Ä—á–∞—Ç–æ–∫
    ctx.strokeStyle = '#654321';
    ctx.lineWidth = 2;
    ctx.stroke();
    
    // –ü–∞–ª—å—Ü—ã
    for (let i = 0; i < 4; i++) {
      const angle = (i / 3) * Math.PI * 0.5 - Math.PI * 0.25;
      const fingerX = Math.cos(angle) * size * 0.25;
      const fingerY = Math.sin(angle) * size * 0.25;
      
      ctx.fillStyle = '#8b4513';
      ctx.beginPath();
      ctx.arc(fingerX, fingerY, size * 0.08, 0, Math.PI * 2);
      ctx.fill();
    }
    
    ctx.restore();
  }
  
  static renderBelt(ctx, x, y, rotation, radius) {
    const size = radius * 1.2;
    
    ctx.save();
    ctx.translate(x, y);
    ctx.rotate(rotation);
    
    // –ü–æ—è—Å - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞
    ctx.fillStyle = '#8b4513';
    ctx.fillRect(-size * 0.4, -size * 0.1, size * 0.8, size * 0.2);
    
    // –ü—Ä—è–∂–∫–∞
    ctx.fillStyle = '#ffd700';
    ctx.fillRect(-size * 0.05, -size * 0.08, size * 0.1, size * 0.16);
    
    // –î–µ—Ç–∞–ª–∏ –ø–æ—è—Å–∞
    ctx.strokeStyle = '#654321';
    ctx.lineWidth = 1;
    ctx.strokeRect(-size * 0.4, -size * 0.1, size * 0.8, size * 0.2);
    
    ctx.restore();
  }
  
  static renderBoots(ctx, x, y, rotation, radius) {
    const size = radius * 1.2;
    
    ctx.save();
    ctx.translate(x, y);
    ctx.rotate(rotation);
    
    // –ë–æ—Ç–∏–Ω–∫–∏ - —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ
    ctx.fillStyle = '#8b4513';
    ctx.beginPath();
    ctx.arc(0, 0, size * 0.35, 0, Math.PI * 2);
    ctx.fill();
    
    // –ü–æ–¥–æ—à–≤–∞
    ctx.fillStyle = '#654321';
    ctx.fillRect(-size * 0.3, size * 0.2, size * 0.6, size * 0.1);
    
    // –î–µ—Ç–∞–ª–∏ –±–æ—Ç–∏–Ω–æ–∫
    ctx.strokeStyle = '#654321';
    ctx.lineWidth = 2;
    ctx.stroke();
    
    // –®–Ω—É—Ä–∫–∏
    ctx.strokeStyle = '#ffffff';
    ctx.lineWidth = 1;
    for (let i = 0; i < 3; i++) {
      const y = -size * 0.1 + i * size * 0.1;
      ctx.beginPath();
      ctx.moveTo(-size * 0.1, y);
      ctx.lineTo(size * 0.1, y);
      ctx.stroke();
    }
    
    ctx.restore();
  }
  
  static renderWeapon(ctx, x, y, rotation, radius, itemData) {
    const size = radius * 1.2;
    
    ctx.save();
    ctx.translate(x, y);
    ctx.rotate(rotation);
    
    switch (itemData.base) {
      case 'sword':
        // –ú–µ—á - –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –±–ª–µ—Å–∫
        ctx.strokeStyle = '#ffffff';
        ctx.lineWidth = 4;
        ctx.beginPath();
        ctx.moveTo(-size * 0.3, -size * 0.4);
        ctx.lineTo(size * 0.3, size * 0.4);
        ctx.stroke();
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –¥–ª—è –æ–±—ä–µ–º–∞
        ctx.strokeStyle = '#95a5a6';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(-size * 0.25, -size * 0.35);
        ctx.lineTo(size * 0.25, size * 0.35);
        ctx.stroke();
        
        // –†—É–∫–æ—è—Ç—å
        ctx.fillStyle = '#8b4513';
        ctx.fillRect(-size * 0.12, -size * 0.12, size * 0.24, size * 0.24);
        
        // –î–µ—Ç–∞–ª–∏ —Ä—É–∫–æ—è—Ç–∏
        ctx.strokeStyle = '#654321';
        ctx.lineWidth = 1;
        ctx.strokeRect(-size * 0.12, -size * 0.12, size * 0.24, size * 0.24);
        break;
        
      case 'axe':
        // –¢–æ–ø–æ—Ä - –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –±–ª–µ—Å–∫
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(-size * 0.25, -size * 0.35, size * 0.5, size * 0.7);
        
        // –û–±–≤–æ–¥–∫–∞ —Ç–æ–ø–æ—Ä–∞
        ctx.strokeStyle = '#95a5a6';
        ctx.lineWidth = 2;
        ctx.strokeRect(-size * 0.25, -size * 0.35, size * 0.5, size * 0.7);
        
        // –†—É–∫–æ—è—Ç—å
        ctx.fillStyle = '#8b4513';
        ctx.fillRect(-size * 0.08, -size * 0.15, size * 0.16, size * 0.3);
        
        // –î–µ—Ç–∞–ª–∏ —Ä—É–∫–æ—è—Ç–∏
        ctx.strokeStyle = '#654321';
        ctx.lineWidth = 1;
        ctx.strokeRect(-size * 0.08, -size * 0.15, size * 0.16, size * 0.3);
        break;
        
      case 'staff':
        // –ü–æ—Å–æ—Ö
        ctx.strokeStyle = '#8b4513';
        ctx.lineWidth = 4;
        ctx.beginPath();
        ctx.moveTo(-size * 0.2, -size * 0.4);
        ctx.lineTo(size * 0.2, size * 0.4);
        ctx.stroke();
        
        // –ö—Ä–∏—Å—Ç–∞–ª–ª
        ctx.fillStyle = '#9b59b6';
        ctx.beginPath();
        ctx.arc(0, -size * 0.4, size * 0.1, 0, Math.PI * 2);
        ctx.fill();
        break;
        
      case 'wand':
        // –ñ–µ–∑–ª
        ctx.strokeStyle = '#8b4513';
        ctx.lineWidth = 3;
        ctx.beginPath();
        ctx.moveTo(-size * 0.15, -size * 0.3);
        ctx.lineTo(size * 0.15, size * 0.3);
        ctx.stroke();
        
        // –ó–≤–µ–∑–¥–∞
        ctx.fillStyle = '#9b59b6';
        ctx.beginPath();
        ctx.arc(0, -size * 0.3, size * 0.08, 0, Math.PI * 2);
        ctx.fill();
        break;
        
      case 'dagger':
        // –ö–∏–Ω–∂–∞–ª
        ctx.strokeStyle = '#95a5a6';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(-size * 0.2, -size * 0.3);
        ctx.lineTo(size * 0.2, size * 0.3);
        ctx.stroke();
        
        // –†—É–∫–æ—è—Ç—å
        ctx.fillStyle = '#8b4513';
        ctx.fillRect(-size * 0.05, -size * 0.05, size * 0.1, size * 0.1);
        break;
        
      case 'crossbow':
        // –ê—Ä–±–∞–ª–µ—Ç
        ctx.strokeStyle = '#8b4513';
        ctx.lineWidth = 3;
        ctx.beginPath();
        ctx.arc(0, 0, size * 0.3, 0, Math.PI * 2);
        ctx.stroke();
        
        // –°—Ç—Ä–µ–ª–∞
        ctx.strokeStyle = '#95a5a6';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(-size * 0.2, 0);
        ctx.lineTo(size * 0.2, 0);
        ctx.stroke();
        break;
        
      default:
        // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è
        ctx.fillStyle = '#95a5a6';
        ctx.fillRect(-size * 0.2, -size * 0.2, size * 0.4, size * 0.4);
        break;
    }
    
    ctx.restore();
  }
  
  static renderArmor(ctx, x, y, rotation, radius, itemData) {
    const size = radius * 1.2;
    
    ctx.save();
    ctx.translate(x, y);
    ctx.rotate(rotation);
    
    switch (itemData.base) {
      case 'shield':
        // –©–∏—Ç
        ctx.fillStyle = '#8b4513';
        ctx.fillRect(-size * 0.3, -size * 0.4, size * 0.6, size * 0.8);
        
        // –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è –æ–∫–∞–Ω—Ç–æ–≤–∫–∞
        ctx.strokeStyle = '#95a5a6';
        ctx.lineWidth = 2;
        ctx.strokeRect(-size * 0.3, -size * 0.4, size * 0.6, size * 0.8);
        break;
        
      case 'robe':
        // –ú–∞–Ω—Ç–∏—è
        ctx.fillStyle = '#6c3483';
        ctx.beginPath();
        ctx.arc(0, 0, size * 0.4, 0, Math.PI * 2);
        ctx.fill();
        
        // –ö–∞–ø—é—à–æ–Ω
        ctx.fillStyle = '#8e44ad';
        ctx.beginPath();
        ctx.arc(0, -size * 0.2, size * 0.25, 0, Math.PI * 2);
        ctx.fill();
        break;
        
      case 'leather':
        // –ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è
        ctx.fillStyle = '#d35400';
        ctx.beginPath();
        ctx.arc(0, 0, size * 0.4, 0, Math.PI * 2);
        ctx.fill();
        
        // –ó–∞—Å—Ç–µ–∂–∫–∏
        ctx.fillStyle = '#8b4513';
        ctx.fillRect(-size * 0.1, -size * 0.2, size * 0.2, size * 0.1);
        break;
        
      case 'plate':
        // –ü–ª–∞—Å—Ç–∏–Ω—á–∞—Ç–∞—è –±—Ä–æ–Ω—è
        ctx.fillStyle = '#95a5a6';
        ctx.beginPath();
        ctx.arc(0, 0, size * 0.4, 0, Math.PI * 2);
        ctx.fill();
        
        // –ü–ª–∞—Å—Ç–∏–Ω—ã
        ctx.strokeStyle = '#ffffff';
        ctx.lineWidth = 1;
        for (let i = 0; i < 3; i++) {
          const y = -size * 0.2 + i * size * 0.2;
          ctx.beginPath();
          ctx.arc(0, y, size * 0.15, 0, Math.PI * 2);
          ctx.stroke();
        }
        break;
        
      default:
        // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –±—Ä–æ–Ω–∏
        ctx.fillStyle = '#95a5a6';
        ctx.fillRect(-size * 0.2, -size * 0.2, size * 0.4, size * 0.4);
        break;
    }
    
    ctx.restore();
  }
  
  static renderAccessory(ctx, x, y, rotation, radius, itemData) {
    const size = radius * 1.0;
    
    ctx.save();
    ctx.translate(x, y);
    ctx.rotate(rotation);
    
    switch (itemData.base) {
      case 'amulet':
        // –ê–º—É–ª–µ—Ç - –ø–æ–¥–≤–µ—Å–∫–∞ —Å –∫–∞–º–Ω–µ–º
        ctx.strokeStyle = '#ffd700';
        ctx.lineWidth = 3;
        
        // –¶–µ–ø–æ—á–∫–∞
        ctx.beginPath();
        ctx.arc(0, -size * 0.2, size * 0.1, 0, Math.PI * 2);
        ctx.stroke();
        
        // –ü–æ–¥–≤–µ—Å–∫–∞
        ctx.fillStyle = '#ffd700';
        ctx.beginPath();
        ctx.arc(0, 0, size * 0.25, 0, Math.PI * 2);
        ctx.fill();
        
        // –û–±–≤–æ–¥–∫–∞ –ø–æ–¥–≤–µ—Å–∫–∏
        ctx.strokeStyle = '#daa520';
        ctx.lineWidth = 2;
        ctx.stroke();
        
        // –ö–∞–º–µ–Ω—å (—Ü–≤–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏)
        let amuletGemColor = '#f39c12'; // –æ—Ä–∞–Ω–∂–µ–≤—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (itemData.rarity === 'rare') amuletGemColor = '#3498db'; // —Å–∏–Ω–∏–π
        if (itemData.rarity === 'epic') amuletGemColor = '#9b59b6'; // —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        if (itemData.rarity === 'legendary') amuletGemColor = '#e74c3c'; // –∫—Ä–∞—Å–Ω—ã–π
        
        ctx.fillStyle = amuletGemColor;
        ctx.beginPath();
        ctx.arc(0, 0, size * 0.15, 0, Math.PI * 2);
        ctx.fill();
        
        // –ë–ª–µ—Å–∫ –∫–∞–º–Ω—è
        ctx.fillStyle = '#ffffff';
        ctx.beginPath();
        ctx.arc(-size * 0.06, -size * 0.06, size * 0.04, 0, Math.PI * 2);
        ctx.fill();
        break;
        
      case 'ring':
        // –ö–æ–ª—å—Ü–æ
        ctx.strokeStyle = '#ffd700';
        ctx.lineWidth = 4;
        ctx.beginPath();
        ctx.arc(0, 0, size * 0.2, 0, Math.PI * 2);
        ctx.stroke();
        
        // –ö–∞–º–µ–Ω—å –∫–æ–ª—å—Ü–∞
        ctx.fillStyle = '#e74c3c';
        ctx.beginPath();
        ctx.arc(0, 0, size * 0.08, 0, Math.PI * 2);
        ctx.fill();
        break;
        
      default:
        // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞
        ctx.fillStyle = '#ffd700';
        ctx.beginPath();
        ctx.arc(0, 0, size * 0.2, 0, Math.PI * 2);
        ctx.fill();
        break;
    }
    
    ctx.restore();
  }
  
  static renderConsumable(ctx, x, y, rotation, radius, itemData, sparkleTime) {
    const size = radius * 1.1;
    
    ctx.save();
    ctx.translate(x, y);
    ctx.rotate(rotation);
    
    switch (itemData.base) {
      case 'potion':
        // –ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è - —è—Ä–∫–æ–µ
        ctx.fillStyle = '#ff4444';
        ctx.fillRect(-size * 0.25, -size * 0.35, size * 0.5, size * 0.7);
        
        // –û–±–≤–æ–¥–∫–∞ –∑–µ–ª—å—è
        ctx.strokeStyle = '#cc3333';
        ctx.lineWidth = 2;
        ctx.strokeRect(-size * 0.25, -size * 0.35, size * 0.5, size * 0.7);
        
        // –ì–æ—Ä–ª—ã—à–∫–æ
        ctx.fillStyle = '#8b4513';
        ctx.fillRect(-size * 0.12, -size * 0.45, size * 0.24, size * 0.1);
        
        // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–∑—ã—Ä—å–∫–∏
        ctx.fillStyle = '#ffffff';
        for (let i = 0; i < 3; i++) {
          const bubbleX = -size * 0.15 + (i * size * 0.15);
          const bubbleY = -size * 0.2 + Math.sin(sparkleTime + i) * size * 0.1;
          const bubbleSize = size * 0.04 + Math.sin(sparkleTime * 2 + i) * size * 0.02;
          ctx.beginPath();
          ctx.arc(bubbleX, bubbleY, bubbleSize, 0, Math.PI * 2);
          ctx.fill();
        }
        break;
        
      case 'speed_potion':
        // –ó–µ–ª—å–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ - —è—Ä–∫–æ–µ
        ctx.fillStyle = '#44aaff';
        ctx.fillRect(-size * 0.25, -size * 0.35, size * 0.5, size * 0.7);
        
        // –û–±–≤–æ–¥–∫–∞ –∑–µ–ª—å—è
        ctx.strokeStyle = '#3388cc';
        ctx.lineWidth = 2;
        ctx.strokeRect(-size * 0.25, -size * 0.35, size * 0.5, size * 0.7);
        
        // –ì–æ—Ä–ª—ã—à–∫–æ
        ctx.fillStyle = '#8b4513';
        ctx.fillRect(-size * 0.12, -size * 0.45, size * 0.24, size * 0.1);
        
        // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å–∫—Ä—ã —Å–∫–æ—Ä–æ—Å—Ç–∏
        ctx.fillStyle = '#ffffff';
        for (let i = 0; i < 2; i++) {
          const sparkX = -size * 0.1 + (i * size * 0.2);
          const sparkY = Math.sin(sparkleTime * 3 + i) * size * 0.15;
          ctx.fillRect(sparkX, sparkY, 2, 2);
        }
        break;
        
      case 'strength_potion':
        // –ó–µ–ª—å–µ —Å–∏–ª—ã
        ctx.fillStyle = '#e67e22';
        ctx.fillRect(-size * 0.2, -size * 0.3, size * 0.4, size * 0.6);
        
        // –ì–æ—Ä–ª—ã—à–∫–æ
        ctx.fillStyle = '#8b4513';
        ctx.fillRect(-size * 0.1, -size * 0.4, size * 0.2, size * 0.1);
        break;
        
      case 'defense_potion':
        // –ó–µ–ª—å–µ –∑–∞—â–∏—Ç—ã
        ctx.fillStyle = '#95a5a6';
        ctx.fillRect(-size * 0.2, -size * 0.3, size * 0.4, size * 0.6);
        
        // –ì–æ—Ä–ª—ã—à–∫–æ
        ctx.fillStyle = '#8b4513';
        ctx.fillRect(-size * 0.1, -size * 0.4, size * 0.2, size * 0.1);
        break;
        
      case 'regen_potion':
        // –ó–µ–ª—å–µ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        ctx.fillStyle = '#27ae60';
        ctx.fillRect(-size * 0.2, -size * 0.3, size * 0.4, size * 0.6);
        
        // –ì–æ—Ä–ª—ã—à–∫–æ
        ctx.fillStyle = '#8b4513';
        ctx.fillRect(-size * 0.1, -size * 0.4, size * 0.2, size * 0.1);
        break;
        
      case 'combo_potion':
        // –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∑–µ–ª—å–µ - –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        const gradient = ctx.createLinearGradient(-size * 0.25, -size * 0.35, size * 0.25, size * 0.35);
        gradient.addColorStop(0, '#9b59b6');
        gradient.addColorStop(0.3, '#e74c3c');
        gradient.addColorStop(0.7, '#3498db');
        gradient.addColorStop(1, '#27ae60');
        ctx.fillStyle = gradient;
        ctx.fillRect(-size * 0.25, -size * 0.35, size * 0.5, size * 0.7);
        
        // –û–±–≤–æ–¥–∫–∞ –∑–µ–ª—å—è
        ctx.strokeStyle = '#ffffff';
        ctx.lineWidth = 2;
        ctx.strokeRect(-size * 0.25, -size * 0.35, size * 0.5, size * 0.7);
        
        // –ì–æ—Ä–ª—ã—à–∫–æ
        ctx.fillStyle = '#8b4513';
        ctx.fillRect(-size * 0.12, -size * 0.45, size * 0.24, size * 0.1);
        
        // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã
        ctx.fillStyle = '#ffffff';
        for (let i = 0; i < 4; i++) {
          const particleX = Math.cos(sparkleTime + i) * size * 0.15;
          const particleY = Math.sin(sparkleTime * 2 + i) * size * 0.15;
          const particleSize = Math.sin(sparkleTime * 3 + i) * 0.5 + 1;
          ctx.save();
          ctx.translate(particleX, particleY);
          ctx.scale(particleSize, particleSize);
          ctx.fillRect(-1, -1, 2, 2);
          ctx.restore();
        }
        break;
        
      case 'purification_potion':
        // –ó–µ–ª—å–µ –æ—á–∏—â–µ–Ω–∏—è - –∑–æ–ª–æ—Ç–æ–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –æ—á–∏—â–µ–Ω–∏—è
        // –û—Å–Ω–æ–≤–Ω–∞—è –±—É—Ç—ã–ª–∫–∞
        ctx.fillStyle = '#f39c12';
        ctx.fillRect(-size * 0.25, -size * 0.35, size * 0.5, size * 0.7);
        
        // –û–±–≤–æ–¥–∫–∞ –∑–µ–ª—å—è
        ctx.strokeStyle = '#e67e22';
        ctx.lineWidth = 3;
        ctx.strokeRect(-size * 0.25, -size * 0.35, size * 0.5, size * 0.7);
        
        // –ì–æ—Ä–ª—ã—à–∫–æ
        ctx.fillStyle = '#8b4513';
        ctx.fillRect(-size * 0.12, -size * 0.45, size * 0.24, size * 0.1);
        
        // –≠—Ñ—Ñ–µ–∫—Ç –æ—á–∏—â–µ–Ω–∏—è - –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏
        ctx.fillStyle = '#ffffff';
        for (let i = 0; i < 5; i++) {
          const starX = -size * 0.2 + (i * size * 0.1);
          const starY = -size * 0.2 + (i * size * 0.05) + Math.sin(sparkleTime + i) * size * 0.05;
          const starSize = size * 0.03 + Math.sin(sparkleTime * 2 + i) * size * 0.01;
          
          // –†–∏—Å—É–µ–º –∑–≤–µ–∑–¥–æ—á–∫—É
          ctx.beginPath();
          ctx.moveTo(starX, starY - starSize);
          ctx.lineTo(starX + starSize * 0.3, starY - starSize * 0.3);
          ctx.lineTo(starX + starSize, starY);
          ctx.lineTo(starX + starSize * 0.3, starY + starSize * 0.3);
          ctx.lineTo(starX, starY + starSize);
          ctx.lineTo(starX - starSize * 0.3, starY + starSize * 0.3);
          ctx.lineTo(starX - starSize, starY);
          ctx.lineTo(starX - starSize * 0.3, starY - starSize * 0.3);
          ctx.closePath();
          ctx.fill();
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç - –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∏—è–Ω–∏–µ
        ctx.strokeStyle = '#ffffff';
        ctx.lineWidth = 1;
        ctx.globalAlpha = 0.6 + Math.sin(sparkleTime * 2) * 0.3;
        for (let i = 0; i < 3; i++) {
          ctx.beginPath();
          ctx.arc(0, 0, size * (0.3 + i * 0.1 + Math.sin(sparkleTime + i) * 0.05), 0, Math.PI * 2);
          ctx.stroke();
        }
        ctx.globalAlpha = 1.0;
        break;
        
      case 'mystery_potion':
        // –¢–∞–π–Ω–∞—è –±–∞–Ω–∫–∞ - –∑–∞–≥–∞–¥–æ—á–Ω–∞—è —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
        // –û—Å–Ω–æ–≤–Ω–∞—è –±—É—Ç—ã–ª–∫–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        const mysteryGradient = ctx.createLinearGradient(-size * 0.25, -size * 0.35, size * 0.25, size * 0.35);
        mysteryGradient.addColorStop(0, '#8e44ad');
        mysteryGradient.addColorStop(0.3, '#9b59b6');
        mysteryGradient.addColorStop(0.7, '#6c3483');
        mysteryGradient.addColorStop(1, '#4a235a');
        ctx.fillStyle = mysteryGradient;
        ctx.fillRect(-size * 0.25, -size * 0.35, size * 0.5, size * 0.7);
        
        // –û–±–≤–æ–¥–∫–∞ –∑–µ–ª—å—è
        ctx.strokeStyle = '#ffffff';
        ctx.lineWidth = 3;
        ctx.strokeRect(-size * 0.25, -size * 0.35, size * 0.5, size * 0.7);
        
        // –ì–æ—Ä–ª—ã—à–∫–æ
        ctx.fillStyle = '#8b4513';
        ctx.fillRect(-size * 0.12, -size * 0.45, size * 0.24, size * 0.1);
        
        // –ó–∞–≥–∞–¥–æ—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤–Ω—É—Ç—Ä–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        break;
        
      // –°–≤–∏—Ç–∫–∏
      case 'scroll_werewolf':
      case 'scroll_stone':
      case 'scroll_ghost':
      case 'scroll_fire_explosion':
      case 'scroll_ice_storm':
      case 'scroll_lightning':
      case 'scroll_earthquake':
      case 'scroll_clone':
      case 'scroll_teleport':
      case 'scroll_invisibility':
      case 'scroll_time':
      case 'scroll_curse':
      case 'scroll_chaos':
      case 'scroll_fear':
      case 'scroll_smoke':
      case 'scroll_meteor':
      case 'scroll_barrier':
      case 'scroll_rage':
      case 'scroll_invulnerability':
      case 'scroll_vampirism':
      case 'mystery_scroll':
        // –°–≤–∏—Ç–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ renderScroll
        // Logger.debug('üéØ –†–µ–Ω–¥–µ—Ä–∏–º —Å–≤–∏—Ç–æ–∫:', itemData.base, '–≤ –ø–æ–∑–∏—Ü–∏–∏:', x, y);
        DroppedItem.renderScroll(ctx, x, y, rotation, radius, itemData, sparkleTime);
        break;
        

        
      default:
        // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∑–µ–ª—å—è
        ctx.fillStyle = '#e74c3c';
        ctx.fillRect(-size * 0.25, -size * 0.35, size * 0.5, size * 0.7);
        
        // –ì–æ—Ä–ª—ã—à–∫–æ
        ctx.fillStyle = '#8b4513';
        ctx.fillRect(-size * 0.12, -size * 0.45, size * 0.24, size * 0.1);
        break;
    }
    
    ctx.restore();
  }
  
  static renderScroll(ctx, x, y, rotation, radius, itemData, sparkleTime) {
    const size = radius * 1.1; // –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –¥–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ
    
    // Logger.debug('üìú renderScroll –≤—ã–∑–≤–∞–Ω –¥–ª—è:', itemData.base, '—Ä–∞–∑–º–µ—Ä:', size, '—Ä–∞–¥–∏—É—Å:', radius, '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', x, y);
    
    ctx.save();
    ctx.translate(x, y);
    ctx.rotate(rotation);
    
    // –û—Å–Ω–æ–≤–Ω–æ–π —Å–≤–∏—Ç–æ–∫ - –ø–µ—Ä–≥–∞–º–µ–Ω—Ç
    ctx.fillStyle = '#f5f5dc'; // –ë–µ–∂–µ–≤—ã–π —Ü–≤–µ—Ç
    ctx.fillRect(-size * 0.4, -size * 0.25, size * 0.8, size * 0.5);
    
    // –û–±–≤–æ–¥–∫–∞ —Å–≤–∏—Ç–∫–∞
    ctx.strokeStyle = '#8b4513'; // –ö–æ—Ä–∏—á–Ω–µ–≤–∞—è –æ–±–≤–æ–¥–∫–∞
    ctx.lineWidth = 2;
    ctx.strokeRect(-size * 0.4, -size * 0.25, size * 0.8, size * 0.5);
    
    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ª–∏–Ω–∏–∏ –ø–µ—Ä–≥–∞–º–µ–Ω—Ç–∞
    ctx.strokeStyle = '#d2b48c';
    ctx.lineWidth = 2;
    for (let i = 0; i < 3; i++) {
      const lineY = -size * 0.15 + (i * size * 0.1);
      ctx.beginPath();
      ctx.moveTo(-size * 0.3, lineY);
      ctx.lineTo(size * 0.3, lineY);
      ctx.stroke();
    }
    
    // –ú–∞–≥–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–≤–∏—Ç–∫–∞
    ctx.fillStyle = itemData.color || '#8e44ad';
    ctx.font = `${size * 0.15}px Arial`; // –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    
    let symbol = 'üìú';
    switch (itemData.base) {
      case 'scroll_werewolf': symbol = 'üê∫'; break;
      case 'scroll_stone': symbol = 'üóø'; break;
      case 'scroll_ghost': symbol = 'üëª'; break;
      case 'scroll_fire_explosion': symbol = 'üî•'; break;
      case 'scroll_ice_storm': symbol = '‚ùÑÔ∏è'; break;
      case 'scroll_lightning': symbol = '‚ö°'; break;
      case 'scroll_earthquake': symbol = 'üåã'; break;
      case 'scroll_clone': symbol = 'üë•'; break;
      case 'scroll_teleport': symbol = 'üåÄ'; break;
      case 'scroll_invisibility': symbol = 'üëÅÔ∏è'; break;
      case 'scroll_time': symbol = '‚è∞'; break;
      case 'scroll_curse': symbol = 'üíÄ'; break;
      case 'scroll_chaos': symbol = 'üé≠'; break;
      case 'scroll_fear': symbol = 'üò±'; break;
      case 'scroll_smoke': symbol = 'üí®'; break;
      case 'scroll_meteor': symbol = '‚òÑÔ∏è'; break;
      case 'scroll_barrier': symbol = 'üõ°Ô∏è'; break;
      case 'scroll_rage': symbol = 'üò°'; break;
      case 'scroll_invulnerability': symbol = 'üíé'; break;
      case 'scroll_vampirism': symbol = 'ü¶á'; break;
      case 'mystery_scroll': symbol = '‚ùì'; break;
    }
    
    // –°–∏–º–≤–æ–ª –≤ —Ü–µ–Ω—Ç—Ä–µ
    ctx.fillText(symbol, 0, 0);
    
    // –ú–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏—Ü—ã –≤–æ–∫—Ä—É–≥ —Å–≤–∏—Ç–∫–∞
    ctx.fillStyle = itemData.color || '#8e44ad';
    ctx.globalAlpha = 0.6 + Math.sin(sparkleTime * 3) * 0.4;
    for (let i = 0; i < 4; i++) { // –£–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü
      const angle = (i / 4) * Math.PI * 2 + sparkleTime;
      const particleX = Math.cos(angle) * size * 0.4;
      const particleY = Math.sin(angle) * size * 0.4;
      const particleSize = Math.sin(sparkleTime * 4 + i) * 0.5 + 1; // –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏—Ü
      
      ctx.fillRect(particleX - particleSize, particleY - particleSize, particleSize * 2, particleSize * 2);
    }
    ctx.globalAlpha = 1.0;
    
    ctx.restore();
  }
}