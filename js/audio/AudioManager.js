/* Darkfall Depths - –ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞ */

import { gameState } from '../core/GameState.js';

export class AudioManager {
  constructor() {
    this.audioContext = null;
    this.sounds = {};
    this.currentMusic = null;
    this.musicTracks = {};
    this.sfxTracks = {};
    this.isMusicLoaded = false;
    this.isSfxLoaded = false;
    this.inventorySoundPlaying = false;
  }

  async init() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Web Audio API
      if (!window.AudioContext && !window.webkitAudioContext) {
        console.warn('üéµ Web Audio API not supported in this browser');
        return;
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫–∏ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      await this.loadMusicTracks();
      await this.loadSfxTracks();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ
      this.setupAudioResumeHandlers();
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º—É–∑—ã–∫—É
      setTimeout(() => {
        this.createAudioContextAndPlay();
      }, 1000);
    } catch (e) {
      console.warn('‚ùå Audio system initialization failed:', e);
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–ª–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∞—É–¥–∏–æ
    }
  }

  setupAudioResumeHandlers() {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const resumeAudio = () => {
      if (this.audioContext && this.audioContext.state === 'suspended') {
        this.audioContext.resume();
      }
      if (this.currentMusic && this.currentMusic.paused && gameState.audio.enabled) {
        this.currentMusic.play().catch(e => console.warn('Failed to resume music:', e));
      }
      
      // –ï—Å–ª–∏ –º—É–∑—ã–∫–∞ –Ω–µ –∏–≥—Ä–∞–µ—Ç –∏ –º—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ, –∑–∞–ø—É—Å–∫–∞–µ–º –µ—ë
      if (!this.currentMusic && gameState.screen === 'menu' && gameState.audio.enabled) {
        this.playMusic('main');
      }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    ['click', 'touchstart', 'keydown', 'mousedown'].forEach(event => {
      document.addEventListener(event, resumeAudio, { once: false });
    });
  }

  createAudioContextAndPlay() {
    try {
      // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º—É–∑—ã–∫—É
      if (gameState.audio.enabled && this.isMusicLoaded) {
        this.playMusic('main');
      }
    } catch (e) {
      console.warn('‚ùå Failed to create audio context:', e);
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º—É–∑—ã–∫–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ main.js)
  forceStartMusic() {
    if (!this.audioContext) {
      console.log('üéµ Creating audio context and playing...');
      this.createAudioContextAndPlay();
    } else if (gameState.audio.enabled && this.isMusicLoaded && !this.currentMusic) {
      console.log('üéµ Force starting main music...');
      this.playMusic('main');
    } else {
      console.log('üéµ Force start conditions not met');
    }
  }

  async loadMusicTracks() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫–∏
      this.musicTracks.main = await this.loadAudioFile('Audio/Main.mp3');
      this.musicTracks.stage1 = await this.loadAudioFile('Audio/stage1.mp3');
      this.musicTracks.gameOver = await this.loadAudioFile('Audio/GameOver.mp3');
      this.musicTracks.levelComplete = await this.loadAudioFile('Audio/Level_Complite.mp3');
      
      this.isMusicLoaded = true;
    } catch (error) {
      console.warn('‚ö†Ô∏è Failed to load music tracks:', error);
      this.isMusicLoaded = false;
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–ª–∞ —Ä–∞–±–æ—Ç–∞—Ç—å
    }
  }

  async loadSfxTracks() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É, —á—Ç–æ–±—ã –æ–¥–∏–Ω –Ω–µ—É–¥–∞—á–Ω—ã–π –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–ª –æ—Å—Ç–∞–ª—å–Ω—ã–µ
      const sfxToLoad = [
        { key: 'inventoryOpen', path: 'Audio/Fx/Inventory_open.mp3' },
        { key: 'healthPotion', path: 'Audio/Fx/health_potion.mp3' },
        { key: 'itemPickup', path: 'Audio/Fx/item_pickup.mp3' },
        { key: 'enemyDie', path: 'Audio/Fx/enemy_die.mp3' },
        { key: 'enemyHit', path: 'Audio/Fx/enemy_hit.mp3' },
        { key: 'heroesHit', path: 'Audio/Fx/heroes_hit.mp3' },
        { key: 'heroesDie', path: 'Audio/Fx/Heroes_die.mp3' },
        { key: 'dagger', path: 'Audio/Fx/Dagger.mp3' },
        { key: 'fireball', path: 'Audio/Fx/Fireball.mp3' },
        { key: 'sword', path: 'Audio/Fx/sword.mp3' },
        { key: 'explosion', path: 'Audio/Fx/explosion.mp3' },
        { key: 'armor', path: 'Audio/Fx/Armor.mp3' },
        { key: 'dash', path: 'Audio/Fx/Dash.mp3' }
      ];
      
      let loadedCount = 0;
      
      for (const sfx of sfxToLoad) {
        try {
          this.sfxTracks[sfx.key] = await this.loadAudioFile(sfx.path);
          loadedCount++;
        } catch (error) {
          console.warn(`‚ùå Failed to load ${sfx.key} sound:`, error);
        }
      }
      
      if (loadedCount > 0) {
        this.isSfxLoaded = true;
      } else {
        this.isSfxLoaded = false;
        console.warn('‚ùå No sound effects loaded');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Failed to load sound effects:', error);
      this.isSfxLoaded = false;
    }
  }

  async loadAudioFile(url) {
    return new Promise((resolve, reject) => {
      const audio = new Audio();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞ —á–µ—Ä–µ–∑ file:// –ø—Ä–æ—Ç–æ–∫–æ–ª
      const isLocalFile = window.location.protocol === 'file:';
      if (isLocalFile) {
        console.warn(`‚ö†Ô∏è Audio loading may fail with file:// protocol: ${url}`);
        // –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è file:// –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        const timeout = setTimeout(() => {
          console.warn(`Audio load timeout for: ${url}`);
          reject(new Error(`Audio load timeout: ${url}`));
        }, 5000); // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è file://
        
        audio.addEventListener('canplaythrough', () => {
          clearTimeout(timeout);
          resolve(audio);
        }, false);
        
        audio.addEventListener('error', (e) => {
          clearTimeout(timeout);
          console.warn(`‚ùå Audio load error for ${url}:`, e);
          reject(e);
        }, false);
        
        audio.src = url;
        audio.load();
      } else {
        // –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
        const timeout = setTimeout(() => {
          console.warn(`Audio load timeout for: ${url}`);
          reject(new Error(`Audio load timeout: ${url}`));
        }, 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        
        audio.addEventListener('canplaythrough', () => {
          clearTimeout(timeout);
          console.log(`‚úÖ Audio file loaded successfully: ${url}`);
          resolve(audio);
        }, false);
        
        audio.addEventListener('error', (e) => {
          clearTimeout(timeout);
          console.warn(`‚ùå Audio load error for ${url}:`, e);
          reject(e);
        }, false);
        
        audio.src = url;
        audio.load();
      }
    });
  }

  playMusic(trackName, loop = true) {
    if (!this.isMusicLoaded || !gameState.audio.enabled) {
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ –∞—É–¥–∏–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    if (!window.AudioContext && !window.webkitAudioContext) {
      console.warn('üéµ Web Audio API not supported');
      return;
    }
    
    const track = this.musicTracks[trackName];
    if (!track) {
      console.warn(`‚ùå Track ${trackName} not found in musicTracks:`, Object.keys(this.musicTracks));
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–≥—Ä–∞–µ—Ç –ª–∏ —É–∂–µ –Ω—É–∂–Ω—ã–π —Ç—Ä–µ–∫
    if (this.currentMusic === track && !this.currentMusic.paused) {
      return; // –£–∂–µ –∏–≥—Ä–∞–µ—Ç –Ω—É–∂–Ω—ã–π —Ç—Ä–µ–∫
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –º—É–∑—ã–∫—É
    if (this.currentMusic && this.currentMusic !== track) {
      this.currentMusic.pause();
      this.currentMusic.currentTime = 0;
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫
    this.currentMusic = track;
    this.currentMusic.loop = loop;
    this.currentMusic.volume = gameState.audio.musicVolume * gameState.audio.masterVolume;
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω
    if (this.audioContext && this.audioContext.state === 'suspended') {
      this.audioContext.resume();
    }
    
    this.currentMusic.play().catch(e => {
      console.warn('‚ùå Failed to play music:', e);
    });
  }

  stopMusic() {
    if (this.currentMusic) {
      this.currentMusic.pause();
      this.currentMusic.currentTime = 0;
      this.currentMusic = null;
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏ –º—É–∑—ã–∫–∏
    Object.values(this.musicTracks).forEach(track => {
      if (track && !track.paused) {
        track.pause();
        track.currentTime = 0;
      }
    });
  }

  updateMusicVolume() {
    if (this.currentMusic) {
      this.currentMusic.volume = gameState.audio.musicVolume * gameState.audio.masterVolume;
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  playSfx(sfxName) {
    if (!this.isSfxLoaded || !gameState.audio.enabled) {
      return;
    }
    
    const sfx = this.sfxTracks[sfxName];
    if (!sfx) {
      console.warn(`‚ùå Sound effect ${sfxName} not found in sfxTracks:`, Object.keys(this.sfxTracks));
      return;
    }
    
    try {
      // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      const sfxClone = sfx.cloneNode();
      sfxClone.volume = gameState.audio.sfxVolume * gameState.audio.masterVolume;
      sfxClone.loop = false;
      
      sfxClone.play().catch(e => {
        console.warn(`‚ùå Failed to play sound effect ${sfxName}:`, e);
      });
    } catch (e) {
      console.warn(`‚ùå Error creating sound effect ${sfxName}:`, e);
    }
  }

  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  playInventoryOpen() {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    if (this.inventorySoundPlaying) return;
    this.inventorySoundPlaying = true;
    
    this.playSfx('inventoryOpen');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ 500–º—Å
    setTimeout(() => {
      this.inventorySoundPlaying = false;
    }, 500);
  }

  playInventoryClose() {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    if (this.inventorySoundPlaying) return;
    this.inventorySoundPlaying = true;
    
    this.playSfx('inventoryOpen'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∑–≤—É–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è, –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ 500–º—Å
    setTimeout(() => {
      this.inventorySoundPlaying = false;
    }, 500);
  }

  playHealthPotion() {
    this.playSfx('healthPotion');
  }

  playItemPickup() {
    this.playSfx('itemPickup');
  }

  playEnemyDie() {
    this.playSfx('enemyDie');
  }

  playEnemyHit() {
    this.playSfx('enemyHit');
  }

  playHeroesHit() {
    this.playSfx('heroesHit');
  }

  playHeroesDie() {
    this.playSfx('heroesDie');
  }

  playDaggerAttack() {
    this.playSfx('dagger');
  }

  playFireballAttack() {
    this.playSfx('fireball');
  }

  playSwordAttack() {
    this.playSfx('sword');
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
  playExplosion() {
    this.playSfx('explosion');
  }

  playArmor() {
    this.playSfx('armor');
  }

  playDashSound() {
    this.playSfx('dash');
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
  playGameOver() {
    this.stopMusic();
    this.playMusic('gameOver', false);
  }

  playLevelComplete() {
    this.stopMusic();
    this.playMusic('levelComplete', false);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º loop = false –¥–ª—è levelComplete
    if (this.currentMusic) {
      this.currentMusic.loop = false;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      this.currentMusic.addEventListener('ended', () => {
        this.currentMusic.pause();
        this.currentMusic.currentTime = 0;
        this.currentMusic = null;
      }, { once: true });
    }
  }

  stopLevelComplete() {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É–∑—ã–∫—É levelComplete
    if (this.currentMusic && this.currentMusic.src && this.currentMusic.src.includes('Level_Complite')) {
      this.currentMusic.pause();
      this.currentMusic.currentTime = 0;
      this.currentMusic = null;
    }
  }

  createBeep(frequency, duration, volume = 0.1) {
    if (!this.audioContext || !gameState.audio.enabled) return;
    
    try {
      const oscillator = this.audioContext.createOscillator();
      const gainNode = this.audioContext.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(this.audioContext.destination);
      
      oscillator.frequency.value = frequency;
      oscillator.type = 'square';
      
      const finalVolume = volume * gameState.audio.sfxVolume * gameState.audio.masterVolume;
      gainNode.gain.setValueAtTime(finalVolume, this.audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(0.001, this.audioContext.currentTime + duration);
      
      oscillator.start(this.audioContext.currentTime);
      oscillator.stop(this.audioContext.currentTime + duration);
    } catch (e) {
      console.warn('Audio error:', e);
    }
  }

  // –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –º–µ—Ç–æ–¥—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  playSwordHit() {
    this.playSwordAttack();
  }

  playMagicShot() {
    this.playFireballAttack();
  }

  playDash() {
    this.createBeep(800, 0.3, 0.1);
  }

  playShield() {
    this.createBeep(400, 0.4, 0.2);
  }

  playBlast() {
    this.createBeep(200, 0.5, 0.3);
  }

  playChestOpen() {
    this.createBeep(600, 0.3, 0.12);
  }

  playHurt() {
    this.playHeroesHit();
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  testAllSounds() {
    console.log('üß™ Testing all sound effects...');
    console.log('üìã Available SFX tracks:', Object.keys(this.sfxTracks));
    console.log('üîä SFX loaded:', this.isSfxLoaded);
    console.log('üéµ Audio enabled:', gameState.audio.enabled);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∑–≤—É–∫
    setTimeout(() => this.playInventoryOpen(), 100);
    setTimeout(() => this.playHealthPotion(), 200);
    setTimeout(() => this.playEnemyHit(), 300);
    setTimeout(() => this.playEnemyDie(), 400);
    setTimeout(() => this.playHeroesHit(), 500);
    setTimeout(() => this.playHeroesDie(), 600);
    setTimeout(() => this.playSwordAttack(), 700);
    setTimeout(() => this.playDaggerAttack(), 800);
    setTimeout(() => this.playFireballAttack(), 900);
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const audioManager = new AudioManager(); 