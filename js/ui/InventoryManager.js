/* Darkfall Depths - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º */

import { gameState } from '../core/GameState.js';
import { ContextMenuManager } from './ContextMenuManager.js';
import { InventorySpriteRenderer } from './InventorySpriteRenderer.js';
import { BASE_ITEMS } from '../config/constants.js';

let tooltipElement = null;
let draggedItem = null;
let draggedSlot = null;

export class InventoryManager {
  static toggleInventory() {
    const overlay = document.getElementById('inventoryOverlay');
    if (!overlay) return;
    
    if (overlay.classList.contains('hidden')) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –Ω–µ –≤ –ø–∞—É–∑–µ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      if (gameState.isPaused) {
        console.log('Inventory toggle attempted during pause - ignoring');
        return;
      }
      
      this.renderInventory();
      overlay.classList.remove('hidden');
      
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
      (async () => {
        const { audioManager } = await import('../audio/AudioManager.js');
        audioManager.playInventoryOpen();
      })();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—É–∑—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      if (gameState.screen === 'game' && !gameState.isPaused) {
        gameState.isPaused = true;
        const pauseOverlay = document.getElementById('pauseOverlay');
        if (pauseOverlay) pauseOverlay.classList.add('hidden');
      }
    } else {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ (–¥–∞–∂–µ –≤ –ø–∞—É–∑–µ)
      console.log('–ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å...');
      overlay.classList.add('hidden');
      // –°–∫—Ä—ã–≤–∞–µ–º —Ç—É–ª—Ç–∏–ø—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      this.hideTooltip();
      
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
      (async () => {
        const { audioManager } = await import('../audio/AudioManager.js');
        audioManager.playInventoryClose();
      })();
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—É–∑—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –µ—Å–ª–∏ –∏–≥—Ä–∞ –±—ã–ª–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É –∏–∑-–∑–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      if (gameState.screen === 'game' && gameState.isPaused) {
        gameState.isPaused = false;
        const pauseOverlay = document.getElementById('pauseOverlay');
        if (pauseOverlay) pauseOverlay.classList.add('hidden');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        const inventoryToggleBtn = document.getElementById('inventoryToggle');
        const pauseBtn = document.getElementById('pauseBtn');
        const desktopAbilityBtn = document.getElementById('desktopAbilityBtn');
        const healthPotionSlot = document.getElementById('healthPotionSlot');
        
        if (inventoryToggleBtn) inventoryToggleBtn.style.display = '';
        if (pauseBtn) pauseBtn.style.display = '';
        if (desktopAbilityBtn) desktopAbilityBtn.style.display = '';
        if (healthPotionSlot) healthPotionSlot.style.display = '';
      }
      
      // –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞–∂–∞—Ç—ã–µ –∫–ª–∞–≤–∏—à–∏ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      Object.keys(gameState.input.keys).forEach(k => gameState.input.keys[k] = false);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ —Å–ª–æ—Ç—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      if (gameState.screen === 'game') {
        (async () => {
          const { GameEngine } = await import('../game/GameEngine.js');
          GameEngine.updateQuickPotions();
        })();
      }
    }
  }

  static renderInventory() {
    const equipmentSlots = document.getElementById('equipmentSlots');
    const backpackSlots = document.getElementById('backpackSlots');
    const quickSlotsContainer = document.getElementById('quickSlotsContainer');
    const currencyDisplay = document.getElementById('playerGold');
    
    if (!equipmentSlots || !backpackSlots || !quickSlotsContainer) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    if (!gameState.inventory.equipment || gameState.inventory.equipment.length !== 9) {
      const oldEquipment = gameState.inventory.equipment || [];
      gameState.inventory.equipment = new Array(9).fill(null);
      // –ö–æ–ø–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
      for (let i = 0; i < Math.min(oldEquipment.length, 9); i++) {
        gameState.inventory.equipment[i] = oldEquipment[i];
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ä—é–∫–∑–∞–∫–∞
    if (!gameState.inventory.backpack || gameState.inventory.backpack.length !== 42) {
      const oldBackpack = gameState.inventory.backpack || [];
      gameState.inventory.backpack = new Array(42).fill(null);
      // –ö–æ–ø–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
      for (let i = 0; i < Math.min(oldBackpack.length, 42); i++) {
        gameState.inventory.backpack[i] = oldBackpack[i];
      }
    }
    
    equipmentSlots.innerHTML = '';
    backpackSlots.innerHTML = '';
    quickSlotsContainer.innerHTML = '';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É
    if (currencyDisplay) {
      currencyDisplay.textContent = gameState.player?.gold || gameState.gold || 0;
    }
    
    // --- –ù–æ–≤—ã–π –±–ª–æ–∫: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ---
    let statsBlock = document.getElementById('inventoryStats');
    if (!statsBlock) {
      statsBlock = document.createElement('div');
      statsBlock.id = 'inventoryStats';
      statsBlock.style.marginBottom = '16px';
      statsBlock.style.background = 'rgba(0,0,0,0.08)';
      statsBlock.style.borderRadius = '8px';
      statsBlock.style.padding = '10px 12px';
      statsBlock.style.fontSize = '15px';
      statsBlock.style.lineHeight = '1.6';
      const parent = document.getElementById('inventoryOverlay').querySelector('.inventory-body');
      if (parent) {
        parent.insertBefore(statsBlock, parent.firstChild);
      }
    }
    
    if (gameState.player) {
      statsBlock.innerHTML = `
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; font-size: 14px;">
          <div style="color: #e74c3c; font-weight: bold;">‚ù§Ô∏è HP: ${gameState.player.hp}/${gameState.player.maxHp}</div>
          <div style="color: #e67e22; font-weight: bold;">‚öîÔ∏è –£—Ä–æ–Ω: ${gameState.player.damage}</div>
          <div style="color: #7f8c8d; font-weight: bold;">üõ°Ô∏è –ó–∞—â–∏—Ç–∞: ${gameState.player.defense||0}</div>
          <div style="color: #3498db; font-weight: bold;">üí• –ö—Ä–∏—Ç: ${gameState.player.crit||0}%</div>
          <div style="color: #27ae60; font-weight: bold;">üí® –°–∫–æ—Ä–æ—Å—Ç—å: ${gameState.player.moveSpeed}</div>
          <div style="color: #3498db; font-weight: bold;">‚ö° –ê—Ç–∞–∫–∞: ${gameState.player.attackSpeed}—Å</div>
          <div style="color: #9b59b6; font-weight: bold; grid-column: 1 / -1;">üéØ –î–∞–ª—å–Ω–æ—Å—Ç—å: ${gameState.player.attackRadius}px</div>
        </div>
      `;
    } else {
      statsBlock.innerHTML = '';
    }
    
    // –°–ª–æ—Ç—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞
    const equipmentStructure = [
      { type: 'head', label: '–ì–æ–ª–æ–≤–∞', icon: 'üëë', allowedTypes: ['head'], row: 1, col: 2 },
      { type: 'weapon1', label: '–û—Ä—É–∂–∏–µ 1', icon: '‚öîÔ∏è', allowedTypes: ['weapon'], row: 2, col: 1 },
      { type: 'chest', label: '–ë—Ä–æ–Ω—è', icon: 'ü•ã', allowedTypes: ['armor'], row: 2, col: 2 },
      { type: 'weapon2', label: '–û—Ä—É–∂–∏–µ 2', icon: 'üõ°Ô∏è', allowedTypes: ['weapon', 'shield'], row: 2, col: 3 },
      { type: 'accessory1', label: '–£–∫—Ä–∞—à–µ–Ω–∏–µ 1', icon: 'üíç', allowedTypes: ['accessory'], row: 3, col: 1 },
      { type: 'gloves', label: '–ü–µ—Ä—á–∞—Ç–∫–∏', icon: 'üß§', allowedTypes: ['gloves'], row: 3, col: 2 },
      { type: 'accessory2', label: '–£–∫—Ä–∞—à–µ–Ω–∏–µ 2', icon: 'üìø', allowedTypes: ['accessory'], row: 3, col: 3 },
      { type: 'belt', label: '–†–µ–º–µ–Ω—å', icon: 'üéóÔ∏è', allowedTypes: ['belt'], row: 4, col: 2 },
      { type: 'boots', label: '–ë–æ—Ç–∏–Ω–∫–∏', icon: 'üë¢', allowedTypes: ['boots'], row: 5, col: 2 }
    ];
    
    equipmentStructure.forEach((slotConfig, index) => {
      const slot = document.createElement('div');
      slot.className = 'inventory-slot equipment-slot';
      slot.title = slotConfig.label;
      slot.setAttribute('data-type', 'equipment');
      slot.setAttribute('data-index', index);
      slot.setAttribute('data-slot-type', slotConfig.type);
      slot.setAttribute('data-allowed-types', slotConfig.allowedTypes.join(','));
      
      // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å–ª–æ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —è—á–µ–π–∫–µ —Å–µ—Ç–∫–∏
      slot.style.gridRow = slotConfig.row;
      slot.style.gridColumn = slotConfig.col;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ –ø–æ–¥–ø–∏—Å—å —Å–ª–æ—Ç–∞
      slot.innerHTML = `
        <div class="slot-icon">${slotConfig.icon}</div>
        <div class="slot-label">${slotConfig.label}</div>
      `;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ
      const item = gameState.inventory.equipment[index];
      if (item) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å–æ —Å–ª–æ—Ç–æ–º
        if (this.isItemCompatibleWithSlot(item, slotConfig.allowedTypes)) {
          slot.classList.add('filled', item.rarity);
          
          // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
          const spriteElement = InventorySpriteRenderer.createSpriteElement(item, 48);
          if (spriteElement) {
            slot.innerHTML = '';
            slot.appendChild(spriteElement);
          } else {
            // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± —Å —ç–º–æ–¥–∑–∏
            slot.innerHTML = `<div class="item-sprite" style="background:${item.color};font-size:2rem;display:flex;align-items:center;justify-content:center;">${item.icon||''}</div>`;
          }
          
          const tooltipText = `${item.name}\n${item.description}`;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç—É–ª—Ç–∏–ø–æ–≤
          slot.addEventListener('mouseenter', (e) => this.showTooltip(e, tooltipText));
          slot.addEventListener('mouseleave', () => this.hideTooltip());
          slot.addEventListener('mousemove', (e) => this.updateTooltipPosition(e));
          
          // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è —Å–Ω—è—Ç–∏—è
          slot.addEventListener('dblclick', () => this.unequipItem(index));
          
          // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
          ContextMenuManager.setupSlotContextMenu(slot, item, 'equipment', index);
          
          slot.addEventListener('click', () => this.unequipItem(index));
          this.setupDragDropForSlot(slot, 'equipment', index);
        } else {
          // –ü—Ä–µ–¥–º–µ—Ç –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å–æ —Å–ª–æ—Ç–æ–º - –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ —Ä—é–∫–∑–∞–∫
          
          // –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –≤ —Ä—é–∫–∑–∞–∫–µ
          const backpackIndex = gameState.inventory.backpack.findIndex(slot => !slot);
          if (backpackIndex !== -1) {
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ —Ä—é–∫–∑–∞–∫
            gameState.inventory.backpack[backpackIndex] = item;
            gameState.inventory.equipment[index] = null;
          } else {
            // –†—é–∫–∑–∞–∫ –ø–æ–ª–æ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            slot.classList.add('incompatible');
            slot.title = `–ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø—Ä–µ–¥–º–µ—Ç: ${item.name} (—Ä—é–∫–∑–∞–∫ –ø–æ–ª–æ–Ω)`;
          }
        }
      }
      
      equipmentSlots.appendChild(slot);
    });
    
    // –ë—ã—Å—Ç—Ä—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∑–µ–ª–∏–π - 3 —Å–ª–æ—Ç–∞
    quickSlotsContainer.innerHTML = '';
    
    gameState.inventory.quickSlots.forEach((potionType, index) => {
      const slot = document.createElement('div');
      slot.className = 'inventory-slot';
      slot.title = `–ë—ã—Å—Ç—Ä—ã–π —Å–ª–æ—Ç ${index + 1}`;
      slot.setAttribute('data-type', 'quickslot');
      slot.setAttribute('data-index', index);
      slot.style.display = 'inline-block';
      slot.style.margin = '4px';
      
      if (potionType) {
        // –°–ª–æ—Ç —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º —Ç–∏–ø–æ–º –∑–µ–ª—å—è
        let icon = 'üß™';
        let color = '#ff6666';
        let name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–µ–ª—å–µ';
        
        switch (potionType) {
          case 'potion':
            icon = '‚ù§Ô∏è';
            color = '#ff6666';
            name = '–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è';
            break;
          case 'speed_potion':
            icon = 'üí®';
            color = '#66ff66';
            name = '–ó–µ–ª—å–µ —Å–∫–æ—Ä–æ—Å—Ç–∏';
            break;
          case 'strength_potion':
            icon = '‚öîÔ∏è';
            color = '#ffaa66';
            name = '–ó–µ–ª—å–µ —Å–∏–ª—ã';
            break;
          case 'defense_potion':
            icon = 'üõ°Ô∏è';
            color = '#6666ff';
            name = '–ó–µ–ª—å–µ –∑–∞—â–∏—Ç—ã';
            break;
          case 'regen_potion':
            icon = 'üíö';
            color = '#ff66ff';
            name = '–ó–µ–ª—å–µ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏';
            break;
          case 'combo_potion':
            icon = '‚ú®';
            color = '#ffff66';
            name = '–ö–æ–º–±–æ –∑–µ–ª—å–µ';
            break;
        }
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–µ–ª–∏–π —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –≤ —Ä—é–∫–∑–∞–∫–µ
        const count = gameState.inventory.backpack.filter(item => 
          item && item.type === 'consumable' && item.base === potionType
        ).length;
        
        slot.classList.add('filled');
        
        // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç –∑–µ–ª—å—è
        const potionItem = { base: potionType, type: 'consumable', rarity: 'common' };
        const spriteElement = InventorySpriteRenderer.createSpriteElement(potionItem, 40);
        
        if (spriteElement) {
          slot.innerHTML = '';
          slot.appendChild(spriteElement);
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–≤–µ—Ä—Ö —Å–ø—Ä–∞–π—Ç–∞
          const countElement = document.createElement('div');
          countElement.className = 'item-count';
          countElement.style.cssText = `
            position: absolute;
            bottom: -3px;
            right: -3px;
            background: ${color};
            color: white;
            font-size: 11px;
            font-weight: bold;
            padding: 2px 4px;
            border-radius: 6px;
            min-width: 14px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
            border: 1px solid rgba(255, 255, 255, 0.3);
          `;
          countElement.textContent = count;
          slot.appendChild(countElement);
        } else {
          // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± —Å —ç–º–æ–¥–∑–∏
          slot.innerHTML = `
            <div class="item-sprite" style="background:${color};font-size:1.5rem;display:flex;align-items:center;justify-content:center;width:100%;height:100%;">${icon}</div>
            <div class="item-count" style="position:absolute;bottom:-2px;right:-2px;background:${color};color:white;font-size:10px;padding:1px 3px;border-radius:3px;min-width:12px;text-align:center;">${count}</div>
          `;
        }
        const tooltipText = `${name}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count}\n–ö–ª–∞–≤–∏—à–∞: ${index + 1}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç—É–ª—Ç–∏–ø–æ–≤
        slot.addEventListener('mouseenter', (e) => this.showTooltip(e, tooltipText));
        slot.addEventListener('mouseleave', () => this.hideTooltip());
        slot.addEventListener('mousemove', (e) => this.updateTooltipPosition(e));
        
        // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        slot.addEventListener('dblclick', () => {
          (async () => {
            const { GameEngine } = await import('../game/GameEngine.js');
            GameEngine.useQuickPotion(index);
          })();
        });
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        ContextMenuManager.setupSlotContextMenu(slot, { name, type: 'consumable', base: potionType }, 'quickslot', index);
      } else {
        // –ü—É—Å—Ç–æ–π —Å–ª–æ—Ç
        slot.classList.add('empty');
        slot.innerHTML = `<div style="font-size:1.2rem;color:#888;display:flex;align-items:center;justify-content:center;width:100%;height:100%;font-weight:bold;">${index + 1}</div>`;
        slot.title = `–ë—ã—Å—Ç—Ä—ã–π —Å–ª–æ—Ç ${index + 1} (–ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ –∑–µ–ª—å–µ)`;
      }
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop –¥–ª—è –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤
      this.setupDragDropForSlot(slot, 'quickslot', index);
      
      quickSlotsContainer.appendChild(slot);
    });
    
    // –°–ª–æ—Ç—ã —Ä—é–∫–∑–∞–∫–∞ - 42 —Å–ª–æ—Ç–∞ (6x7 —Å–µ—Ç–∫–∞)
    const backpackSize = 42; // 6 –∫–æ–ª–æ–Ω–æ–∫ x 7 —Å—Ç—Ä–æ–∫
    
    // –†–∞—Å—à–∏—Ä—è–µ–º –º–∞—Å—Å–∏–≤ —Ä—é–∫–∑–∞–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    while (gameState.inventory.backpack.length < backpackSize) {
      gameState.inventory.backpack.push(null);
    }
    
    for (let index = 0; index < backpackSize; index++) {
      const item = gameState.inventory.backpack[index];
      const slot = document.createElement('div');
      slot.className = 'inventory-slot backpack-slot';
      slot.setAttribute('data-type', 'backpack');
      slot.setAttribute('data-index', index);
      
      if (item) {
        slot.classList.add('filled', item.rarity);
        
        // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
        const spriteElement = InventorySpriteRenderer.createSpriteElement(item, 48);
        if (spriteElement) {
          slot.innerHTML = '';
          slot.appendChild(spriteElement);
        } else {
          // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± —Å —ç–º–æ–¥–∑–∏
          slot.innerHTML = `<div class="item-sprite" style="background:${item.color};font-size:2rem;display:flex;align-items:center;justify-content:center;">${item.icon||''}</div>`;
        }
        
        const tooltipText = `${item.name}\n${item.description}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç—É–ª—Ç–∏–ø–æ–≤
        slot.addEventListener('mouseenter', (e) => this.showTooltip(e, tooltipText));
        slot.addEventListener('mouseleave', () => this.hideTooltip());
        slot.addEventListener('mousemove', (e) => this.updateTooltipPosition(e));
        
        // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        slot.addEventListener('dblclick', () => this.useItem('backpack', index));
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        ContextMenuManager.setupSlotContextMenu(slot, item, 'backpack', index);
        
        // –û–¥–∏–Ω–∞—Ä–Ω—ã–π –∫–ª–∏–∫ –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
        slot.addEventListener('click', () => this.equipItem(index));
        this.setupDragDropForSlot(slot, 'backpack', index);
      }
      
      backpackSlots.appendChild(slot);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å–æ —Å–ª–æ—Ç–æ–º
  static isItemCompatibleWithSlot(item, allowedTypes) {
    if (!item || !allowedTypes) return false;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤
    let itemType = 'unknown';
    
    if (item.slot) {
      itemType = item.slot;
    } else if (item.type) {
      itemType = item.type;
    } else if (item.base) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –±–∞–∑–æ–≤–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
      const baseItem = BASE_ITEMS.find(bi => bi.base === item.base);
      if (baseItem) {
        itemType = baseItem.slot || baseItem.type;
      }
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–∞–Ω—Ç–∏–∏ (robe) - –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –∏–¥—Ç–∏ –≤ —Å–ª–æ—Ç armor
    if (item.base === 'robe') {
      itemType = 'armor';
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–µ—Ä—á–∞—Ç–æ–∫ (gloves) - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –≤ —Å–ª–æ—Ç gloves
    if (item.base === 'gloves') {
      itemType = 'gloves';
    }
    
    const isCompatible = allowedTypes.includes(itemType);
    

    
    return isCompatible;
  }

  static useItem(type, index) {
    let item;
    if (type === 'equipment') {
      item = gameState.inventory.equipment[index];
    } else if (type === 'backpack') {
      item = gameState.inventory.backpack[index];
    } else if (type === 'quickslot') {
      item = gameState.inventory.quickSlots[index];
    }
    
    if (!item) return;
    
    if (item.type === 'consumable') {
  
      this.applyItemBonuses(item);
      if (type === 'equipment') {
        gameState.inventory.equipment[index] = null;
      } else if (type === 'backpack') {
        gameState.inventory.backpack[index] = null;
      } else if (type === 'quickslot') {
        gameState.inventory.quickSlots[index] = null;
      }
      this.renderInventory();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ —Å–ª–æ—Ç—ã –≤ UI
      (async () => {
        const { GameEngine } = await import('../game/GameEngine.js');
        GameEngine.updateQuickPotions();
      })();
    } else {
      // –î–ª—è –Ω–µ-—Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ - —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞
      if (type === 'backpack') {
        this.equipItem(index);
      }
    }
  }

  static equipItem(backpackIndex) {
    const item = gameState.inventory.backpack[backpackIndex];
    
    if (!item) return;
    

    
    // –ï—Å–ª–∏ —ç—Ç–æ –±–∞–Ω–∫–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ—ë —ç—Ñ—Ñ–µ–∫—Ç—ã
    if (item.type === 'consumable') {
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –±–∞–Ω–∫–∏
      (async () => {
        const { BuffManager } = await import('../core/BuffManager.js');
        BuffManager.applyConsumableEffects(item);
      })();
      
      // –£–¥–∞–ª—è–µ–º –±–∞–Ω–∫—É –∏–∑ —Ä—é–∫–∑–∞–∫–∞
      gameState.inventory.backpack[backpackIndex] = null;
      this.renderInventory();
      
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–µ–ª—å—è
      (async () => {
        const { audioManager } = await import('../audio/AudioManager.js');
        audioManager.playHealthPotion();
      })();
      
      return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
    const equipmentStructure = [
      { type: 'head', allowedTypes: ['head'] },
      { type: 'weapon1', allowedTypes: ['weapon'] },
      { type: 'chest', allowedTypes: ['armor'] },
      { type: 'weapon2', allowedTypes: ['weapon', 'shield'] },
      { type: 'accessory1', allowedTypes: ['accessory'] },
      { type: 'gloves', allowedTypes: ['gloves'] },
      { type: 'accessory2', allowedTypes: ['accessory'] },
      { type: 'belt', allowedTypes: ['belt'] },
      { type: 'boots', allowedTypes: ['boots'] }
    ];
    
    // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ—Ç
    let targetSlot = -1;
    let emptySlot = -1;
    
    for (let i = 0; i < equipmentStructure.length; i++) {
      const slotConfig = equipmentStructure[i];
      const isCompatible = this.isItemCompatibleWithSlot(item, slotConfig.allowedTypes);
      const isOccupied = !!gameState.inventory.equipment[i];
      
      if (isCompatible) {
        // –ï—Å–ª–∏ —Å–ª–æ—Ç –ø—É—Å—Ç–æ–π, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ
        if (!isOccupied) {
          if (emptySlot === -1) {
            emptySlot = i;
          }
        } else {
          // –ï—Å–ª–∏ —Å–ª–æ—Ç –∑–∞–Ω—è—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –∑–∞–º–µ–Ω—ã
          targetSlot = i;
          break;
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–Ω—è—Ç—ã–π —Å–ª–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π
    if (targetSlot === -1) {
      targetSlot = emptySlot;
    }
    
    if (targetSlot === -1) {
      alert('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–ª–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!');
      return;
    }
    

    
    const oldItem = gameState.inventory.equipment[targetSlot];
    
    // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç—ã
    gameState.inventory.equipment[targetSlot] = item;
    gameState.inventory.backpack[backpackIndex] = oldItem;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º/—É–±–∏—Ä–∞–µ–º –±–æ–Ω—É—Å—ã
    if (oldItem) this.removeItemBonuses(oldItem);
    this.applyItemBonuses(item);
    
    this.renderInventory();
  }

  static unequipItem(equipIndex) {
    const item = gameState.inventory.equipment[equipIndex];
    if (!item) return;
    
    // –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –≤ —Ä—é–∫–∑–∞–∫–µ
    const backpackIndex = gameState.inventory.backpack.findIndex(slot => !slot);
    if (backpackIndex === -1) {
      alert('–†—é–∫–∑–∞–∫ –ø–æ–ª–æ–Ω!');
      return;
    }
    
    gameState.inventory.equipment[equipIndex] = null;
    gameState.inventory.backpack[backpackIndex] = item;
    
    this.removeItemBonuses(item);
    this.renderInventory();
  }

  static deleteBackpackItem(index) {
    const item = gameState.inventory.backpack[index];
    
    if (item) {
      gameState.inventory.backpack[index] = null;
      this.renderInventory();
    }
  }

  static deleteEquipItem(index) {
    const item = gameState.inventory.equipment[index];
    
    if (item) {
      this.removeItemBonuses(item);
      gameState.inventory.equipment[index] = null;
      this.renderInventory();
    }
  }

  static applyItemBonuses(item) {
    // console.log('applyItemBonuses:', item);
    if (!gameState.player || !item.bonus) return;
    
    // –î–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
    if (item.type !== 'consumable') {
      Object.entries(item.bonus).forEach(([stat, value]) => {
        switch (stat) {
          case 'damage':
            gameState.player.damage += value;
            break;
          case 'maxHp':
            gameState.player.maxHp += value;
            break;
          case 'moveSpeed':
            gameState.player.moveSpeed += value;
            break;
          case 'crit':
            gameState.player.crit += value;
            break;
          case 'defense':
            gameState.player.defense += value;
            break;
          case 'attackSpeed':
            gameState.player.attackSpeed = Math.max(0.1, gameState.player.attackSpeed - value / 100);
            break;
          case 'attackRadius':
            gameState.player.attackRadius += value;
            break;
          case 'fire':
          case 'ice':
            gameState.player.damage += value;
            break;
        }
      });
    } else {
      // –î–ª—è –±–∞–Ω–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–∞—Ñ—Ñ–æ–≤
      (async () => {
        const { BuffManager } = await import('../core/BuffManager.js');
        BuffManager.applyConsumableEffects(item);
      })();
    }
    
    // console.log('Player after applyItemBonuses:', {
    //   hp: gameState.player.hp,
    //   maxHp: gameState.player.maxHp,
    //   damage: gameState.player.damage,
    //   moveSpeed: gameState.player.moveSpeed,
    //   crit: gameState.player.crit,
    //   defense: gameState.player.defense,
    //   attackSpeed: gameState.player.attackSpeed,
    //   attackRadius: gameState.player.attackRadius
    // });
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ maxHp –æ—Ç–¥–µ–ª—å–Ω–æ
    if (item.bonus.maxHp) {
      // console.log(`üíö Max HP increased by ${item.bonus.maxHp} (current HP: ${gameState.player.hp}/${gameState.player.maxHp})`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ —Å–ª–æ—Ç—ã –≤ UI
    if (gameState.screen === 'game') {
      (async () => {
        const { GameEngine } = await import('../game/GameEngine.js');
        GameEngine.updateQuickPotions();
      })();
    }
  }

  static removeItemBonuses(item) {
    // console.log('removeItemBonuses:', item);
    if (!gameState.player || !item.bonus) return;
    
    // –£–¥–∞–ª—è–µ–º –±–æ–Ω—É—Å—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏, –Ω–µ –¥–ª—è –±–∞–Ω–æ–∫
    if (item.type === 'consumable') {
      // console.log('Skipping removeItemBonuses for consumable item');
      return;
    }
    
    Object.entries(item.bonus).forEach(([stat, value]) => {
      switch (stat) {
        case 'damage':
          gameState.player.damage -= value;
          break;
        case 'maxHp':
          gameState.player.maxHp -= value;
          gameState.player.hp = Math.min(gameState.player.hp, gameState.player.maxHp);
          // console.log(`üíö Max HP decreased by ${value} (current HP: ${gameState.player.hp}/${gameState.player.maxHp})`);
          break;
        case 'moveSpeed':
          gameState.player.moveSpeed -= value;
          break;
        case 'crit':
          gameState.player.crit -= value;
          break;
        case 'defense':
          gameState.player.defense -= value;
          break;
        case 'attackSpeed':
          gameState.player.attackSpeed = Math.max(0.1, gameState.player.attackSpeed + value / 100);
          break;
        case 'attackRadius':
          gameState.player.attackRadius -= value;
          break;
        case 'fire':
        case 'ice':
          // –≠–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –≤—ã—á–∏—Ç–∞—é—Ç—Å—è –∏–∑ —É—Ä–æ–Ω–∞
          gameState.player.damage -= value;
          break;
      }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ —Å–ª–æ—Ç—ã –≤ UI
    if (gameState.screen === 'game') {
      (async () => {
        const { GameEngine } = await import('../game/GameEngine.js');
        GameEngine.updateQuickPotions();
      })();
    }
  }

  static setupDragDropForSlot(slot, type, index) {
    slot.draggable = true;
    
    slot.addEventListener('dragstart', (e) => {
      let item;
      if (type === 'equipment') {
        item = gameState.inventory.equipment[index];
      } else if (type === 'backpack') {
        item = gameState.inventory.backpack[index];
      } else if (type === 'quickslot') {
        item = gameState.inventory.quickSlots[index];
      }
      
      draggedItem = item;
      draggedSlot = { type, index };
      e.dataTransfer.effectAllowed = 'move';
      slot.classList.add('dragging');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      this.setupDragOutsideHandler();
    });
    
    slot.addEventListener('dragend', (e) => {
      slot.classList.remove('dragging');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤—ã–±—Ä–æ—à–µ–Ω –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      this.handleDragEnd(e);
      
      draggedItem = null;
      draggedSlot = null;
    });
    
    slot.addEventListener('dragover', (e) => {
      e.preventDefault();
      e.dataTransfer.dropEffect = 'move';
      slot.classList.add('drag-over');
    });
    
    slot.addEventListener('dragleave', () => {
      slot.classList.remove('drag-over');
    });
    
    slot.addEventListener('drop', (e) => {
      e.preventDefault();
      slot.classList.remove('drag-over');
      
      if (draggedItem && draggedSlot) {
        this.handleDrop(draggedSlot, { type, index });
      }
    });
  }

  static handleDrop(from, to) {
    if (from.type === to.type && from.index === to.index) {
      return;
    }
    

    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    let fromItem, toItem;
    
    if (from.type === 'equipment') {
      fromItem = gameState.inventory.equipment[from.index];
    } else if (from.type === 'backpack') {
      fromItem = gameState.inventory.backpack[from.index];
    } else if (from.type === 'quickslot') {
      fromItem = gameState.inventory.quickSlots[from.index];
    }
    
    if (to.type === 'equipment') {
      toItem = gameState.inventory.equipment[to.index];
    } else if (to.type === 'backpack') {
      toItem = gameState.inventory.backpack[to.index];
    } else if (to.type === 'quickslot') {
      toItem = gameState.inventory.quickSlots[to.index];
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–º–µ—Å—Ç–∏—Ç—å –±–∞–Ω–∫—É –≤ –±—ã—Å—Ç—Ä—ã–π —Å–ª–æ—Ç
    if (to.type === 'quickslot' && fromItem && fromItem.type !== 'consumable') {
      return;
    }
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–ª–æ—Ç–∞ –≤ —Ä—é–∫–∑–∞–∫ –∏–ª–∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É, –æ—á–∏—â–∞–µ–º –±—ã—Å—Ç—Ä—ã–π —Å–ª–æ—Ç
    if (from.type === 'quickslot' && (to.type === 'backpack' || to.type === 'equipment')) {
      gameState.inventory.quickSlots[from.index] = null;
      this.renderInventory();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ —Å–ª–æ—Ç—ã –≤ UI
      (async () => {
        const { GameEngine } = await import('../game/GameEngine.js');
        GameEngine.updateQuickPotions();
      })();
      
      return;
    }
    
    if (to.type === 'quickslot' && fromItem && fromItem.type === 'consumable') {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∑–µ–ª—å—è, –∞ –Ω–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
      gameState.inventory.quickSlots[to.index] = fromItem.base;
      
      this.renderInventory();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ —Å–ª–æ—Ç—ã –≤ UI
      (async () => {
        const { GameEngine } = await import('../game/GameEngine.js');
        GameEngine.updateQuickPotions();
      })();
      
      return; // –ù–µ –æ–±–º–µ–Ω–∏–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, —Ç–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ç–∏–ø
    }
    
    // –û–±–º–µ–Ω –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ (–Ω–æ –Ω–µ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Å–ª–æ—Ç–æ–≤)
    if (from.type === 'equipment') {
      gameState.inventory.equipment[from.index] = toItem;
    } else if (from.type === 'backpack') {
      gameState.inventory.backpack[from.index] = toItem;
    }
    // –ë—ã—Å—Ç—Ä—ã–µ —Å–ª–æ—Ç—ã –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –æ–±–º–µ–Ω–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
    
    if (to.type === 'equipment') {
      gameState.inventory.equipment[to.index] = fromItem;
    } else if (to.type === 'backpack') {
      gameState.inventory.backpack[to.index] = fromItem;
    }
    // –ë—ã—Å—Ç—Ä—ã–µ —Å–ª–æ—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤—ã—à–µ
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    if (fromItem && from.type === 'equipment') this.removeItemBonuses(fromItem);
    if (toItem && to.type === 'equipment') this.removeItemBonuses(toItem);
    if (fromItem && to.type === 'equipment') this.applyItemBonuses(fromItem);
    if (toItem && from.type === 'equipment') this.applyItemBonuses(toItem);
    
    this.renderInventory();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ —Å–ª–æ—Ç—ã
    (async () => {
      const { GameEngine } = await import('../game/GameEngine.js');
      GameEngine.updateQuickPotions();
    })();
  }



  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è drag & drop –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
  static setupDragOutsideHandler() {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (this.dragOutsideHandler) {
      document.removeEventListener('dragover', this.dragOutsideHandler);
    }
    
    this.dragOutsideHandler = (e) => {
      if (!draggedItem || !draggedSlot) return;
      
      const inventoryOverlay = document.getElementById('inventoryOverlay');
      if (!inventoryOverlay) return;
      
      const overlayRect = inventoryOverlay.getBoundingClientRect();
      const mouseX = e.clientX;
      const mouseY = e.clientY;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫—É—Ä—Å–æ—Ä –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      const isOutside = mouseX < overlayRect.left || 
                       mouseX > overlayRect.right || 
                       mouseY < overlayRect.top || 
                       mouseY > overlayRect.bottom;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      if (isOutside) {
        this.showDeleteZone();
      } else {
        this.hideDeleteZone();
      }
    };
    
    document.addEventListener('dragover', this.dragOutsideHandler);
  }

  static showDeleteZone() {
    if (this.deleteZone) return;
    
    this.deleteZone = document.createElement('div');
    this.deleteZone.id = 'deleteZone';
    this.deleteZone.style.cssText = `
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 200px;
      height: 200px;
      background: rgba(231, 76, 60, 0.2);
      border: 3px dashed #e74c3c;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 10001;
      pointer-events: none;
      animation: pulse 1s infinite;
    `;
    
    this.deleteZone.innerHTML = `
      <div style="text-align: center; color: #e74c3c; font-size: 2rem;">
        üóëÔ∏è<br>
        <span style="font-size: 1rem;">–í—ã–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç</span>
      </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é
    if (!document.getElementById('deleteZoneStyles')) {
      const style = document.createElement('style');
      style.id = 'deleteZoneStyles';
      style.textContent = `
        @keyframes pulse {
          0% { transform: translate(-50%, -50%) scale(1); opacity: 0.8; }
          50% { transform: translate(-50%, -50%) scale(1.1); opacity: 1; }
          100% { transform: translate(-50%, -50%) scale(1); opacity: 0.8; }
        }
      `;
      document.head.appendChild(style);
    }
    
    document.body.appendChild(this.deleteZone);
  }

  static hideDeleteZone() {
    if (this.deleteZone) {
      this.deleteZone.remove();
      this.deleteZone = null;
    }
  }

  static handleDragEnd(e) {
    if (!draggedItem || !draggedSlot) return;
    
    const inventoryOverlay = document.getElementById('inventoryOverlay');
    if (!inventoryOverlay) return;
    
    const overlayRect = inventoryOverlay.getBoundingClientRect();
    const mouseX = e.clientX;
    const mouseY = e.clientY;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤—ã–±—Ä–æ—à–µ–Ω –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    const isOutside = mouseX < overlayRect.left || 
                     mouseX > overlayRect.right || 
                     mouseY < overlayRect.top || 
                     mouseY > overlayRect.bottom;
    
    if (isOutside) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
      this.showDeleteConfirmation(draggedItem, draggedSlot);
    }
    
    // –£–±–∏—Ä–∞–µ–º –∑–æ–Ω—É —É–¥–∞–ª–µ–Ω–∏—è
    this.hideDeleteZone();
    
    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if (this.dragOutsideHandler) {
      document.removeEventListener('dragover', this.dragOutsideHandler);
      this.dragOutsideHandler = null;
    }
  }

  static showDeleteConfirmation(item, slot) {
    const popup = document.getElementById('deletePopup');
    if (!popup) return;

    const confirmBtn = document.getElementById('confirmDeleteBtn');
    const cancelBtn = document.getElementById('cancelDeleteBtn');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    const itemName = item ? item.name : '–ø—Ä–µ–¥–º–µ—Ç';
    popup.querySelector('div:nth-child(2)').textContent = `–£–¥–∞–ª–∏—Ç—å "${itemName}"?`;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    const handleConfirm = () => {
      this.deleteItemBySlot(slot);
      popup.classList.add('hidden');
      confirmBtn.removeEventListener('click', handleConfirm);
      cancelBtn.removeEventListener('click', handleCancel);
    };

    const handleCancel = () => {
      popup.classList.add('hidden');
      confirmBtn.removeEventListener('click', handleConfirm);
      cancelBtn.removeEventListener('click', handleCancel);
    };

    confirmBtn.addEventListener('click', handleConfirm);
    cancelBtn.addEventListener('click', handleCancel);

    popup.classList.remove('hidden');
  }

  static deleteItemBySlot(slot) {
    if (!slot) return;
    
    if (slot.type === 'equipment') {
      this.deleteEquipItem(slot.index);
    } else {
      this.deleteBackpackItem(slot.index);
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—É–ª—Ç–∏–ø–∞–º–∏
  static showTooltip(event, text) {
    if (!tooltipElement) {
      tooltipElement = document.createElement('div');
      tooltipElement.className = 'custom-tooltip';
      tooltipElement.style.cssText = `
        position: fixed;
        z-index: 9999;
        background: linear-gradient(145deg, #1a1a1a, #2a2a2a);
        color: #fff;
        padding: 12px 16px;
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.8), 0 0 20px rgba(231, 76, 60, 0.3);
        white-space: pre-line;
        font-size: 14px;
        font-weight: 500;
        pointer-events: none;
        max-width: 250px;
        opacity: 0.98;
        transition: all 0.2s ease;
        display: none;
        border: 2px solid rgba(231, 76, 60, 0.4);
        backdrop-filter: blur(10px);
        line-height: 1.4;
      `;
      document.body.appendChild(tooltipElement);
    }
    
    tooltipElement.textContent = text;
    tooltipElement.style.display = 'block';
    this.updateTooltipPosition(event);
  }

  static hideTooltip() {
    if (tooltipElement) {
      tooltipElement.style.display = 'none';
    }
  }

  static updateTooltipPosition(event) {
    if (!tooltipElement) return;
    
    const x = event.clientX + 10;
    const y = event.clientY + 10;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ —Ç—É–ª—Ç–∏–ø –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
    const tooltipRect = tooltipElement.getBoundingClientRect();
    const windowWidth = window.innerWidth;
    const windowHeight = window.innerHeight;
    
    let finalX = x;
    let finalY = y;
    
    if (x + tooltipRect.width > windowWidth) {
      finalX = event.clientX - tooltipRect.width - 10;
    }
    
    if (y + tooltipRect.height > windowHeight) {
      finalY = event.clientY - tooltipRect.height - 10;
    }
    
    tooltipElement.style.left = finalX + 'px';
    tooltipElement.style.top = finalY + 'px';
  }
} 