/* Darkfall Depths - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞–º–∏ */

import { gameState } from '../core/GameState.js';
import { audioManager } from '../audio/AudioManager.js';
import { CHARACTERS } from '../config/constants.js';
import { MenuNavigationManager } from './MenuNavigationManager.js';

export class ScreenManager {
  static lastSwitchTime = 0;
  static switchDebounceMs = 300; // –ó–∞—â–∏—Ç–∞ –æ—Ç –±—ã—Å—Ç—Ä—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π

  static init() {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    this.forceClearAllScreens();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
    const loadingScreen = document.getElementById('loadingScreen');
    if (loadingScreen) {
      loadingScreen.classList.remove('hidden');
      loadingScreen.classList.add('active');
      loadingScreen.style.display = 'flex';
    }
  }

  static forceClearAllScreens() {
    document.querySelectorAll('.screen').forEach(screen => {
      screen.classList.add('hidden');
      screen.classList.remove('active');
      screen.style.display = 'none';
    });
  }

  static switchScreen(screenName) {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –±—ã—Å—Ç—Ä—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π
    const now = Date.now();
    if (now - this.lastSwitchTime < this.switchDebounceMs) {
      return;
    }
    this.lastSwitchTime = now;
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ç–æ—Ç –∂–µ —ç–∫—Ä–∞–Ω
    if (gameState.screen === screenName) {
      return;
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –í–°–ï —ç–∫—Ä–∞–Ω—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    document.querySelectorAll('.screen').forEach(screen => {
      screen.classList.add('hidden');
      screen.classList.remove('active');
      screen.style.display = 'none';
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª–µ–≤–æ–π —ç–∫—Ä–∞–Ω
    const targetScreen = document.getElementById(screenName + 'Screen');
    if (targetScreen) {
      targetScreen.classList.remove('hidden');
      targetScreen.classList.add('active');
      targetScreen.style.display = 'flex';
      gameState.screen = screenName;
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫—Ä–∞–Ω –∞–∫—Ç–∏–≤–µ–Ω
      setTimeout(() => {
        document.querySelectorAll('.screen').forEach(screen => {
          if (screen !== targetScreen) {
            screen.classList.add('hidden');
            screen.classList.remove('active');
            screen.style.display = 'none';
          }
        });
      }, 50);
      
      // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–æ–π –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–æ–≤
      if (screenName === 'game') {
        audioManager.playMusic('stage1');
      } else if (screenName === 'menu' || screenName === 'select') {
        if (!audioManager.currentMusic || audioManager.currentMusic.src !== audioManager.musicTracks.main.src) {
          audioManager.playMusic('main');
        }
      } else {
        if (!audioManager.currentMusic || audioManager.currentMusic.src !== audioManager.musicTracks.main.src) {
          audioManager.playMusic('main');
        }
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫
      if (screenName === 'settings') {
        (async () => {
          const { SettingsManager } = await import('./SettingsManager.js');
          SettingsManager.initializeMainMenuAudioSettings();
        })();
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      if (screenName === 'menu') {
        (async () => {
          const { SettingsManager } = await import('./SettingsManager.js');
          SettingsManager.setupEventListeners();
        })();
      }
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω —Ä–µ–∫–æ—Ä–¥–æ–≤
      if (screenName === 'records') {
        setTimeout(() => {
          (async () => {
            const { SettingsManager } = await import('./SettingsManager.js');
            SettingsManager.setupRecordsEventListeners();
          })();
        }, 100);
      }
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫
      if (screenName === 'settings') {
        setTimeout(() => {
          (async () => {
            const { SettingsManager } = await import('./SettingsManager.js');
            SettingsManager.setupSettingsEventListeners();
          })();
        }, 100);
      }
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
      if (screenName === 'select') {
        setTimeout(() => {
          (async () => {
            const { SettingsManager } = await import('./SettingsManager.js');
            SettingsManager.setupSelectEventListeners();
          })();
        }, 100);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ —Å–ª–æ—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
      if (screenName === 'game') {
        setTimeout(() => {
          (async () => {
            const { GameEngine } = await import('../game/GameEngine.js');
            GameEngine.updateQuickPotions();
            
            const { SettingsManager } = await import('./SettingsManager.js');
            SettingsManager.setupGameButtonEventListeners();
          })();
        }, 100);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–æ–≤
      setTimeout(() => {
        MenuNavigationManager.refreshNavigation();
      }, 200);
    } else {
      console.error('Screen not found:', screenName + 'Screen');
    }
  }

  static buildCharacterSelect() {
    const charList = document.getElementById('charList');
    if (!charList) return;
    
    charList.innerHTML = '';
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ä—Ç" –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–∫—Ä–∞–Ω–∞
    const startGameBtn = document.getElementById('startGameBtn');
    if (startGameBtn) {
      startGameBtn.style.display = 'none';
    }
    
    // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–æ–∫—É—Å –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    setTimeout(() => {
      const characterCards = document.querySelectorAll('.character-card');
      characterCards.forEach(card => {
        card.classList.remove('keyboard-focus');
        card.blur();
      });
    }, 50);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞
    CHARACTERS.forEach(char => {
      const card = document.createElement('div');
      card.className = 'character-card';
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
      let abilityIcon = '';
      let abilityName = '';
      if (char.hasDash) {
        abilityIcon = 'üí®';
        abilityName = 'Dash';
      } else if (char.hasShield) {
        abilityIcon = 'üõ°Ô∏è';
        abilityName = '–©–∏—Ç';
      } else if (char.hasBlast) {
        abilityIcon = 'üí•';
        abilityName = '–í–∑—Ä—ã–≤';
      }
      
      card.innerHTML = `
        <div class="character-avatar">
          <div class="character-sprite">${char.sprite}</div>
          <div class="character-ability-icon">${abilityIcon}</div>
        </div>
        <div class="character-name">${char.name}</div>
        <div class="character-class">${char.class}</div>
        <div class="character-description">${char.description}</div>
        <div class="character-stats">
          <div class="stat-item">
            <span>HP:</span>
            <span class="stat-value">${char.hp}</span>
          </div>
          <div class="stat-item">
            <span>–£—Ä–æ–Ω:</span>
            <span class="stat-value">${char.damage}</span>
          </div>
          <div class="stat-item">
            <span>–°–∫–æ—Ä–æ—Å—Ç—å:</span>
            <span class="stat-value">${char.moveSpeed}</span>
          </div>
          <div class="stat-item">
            <span>–î–∞–ª—å–Ω–æ—Å—Ç—å:</span>
            <span class="stat-value">${char.attackRadius}px</span>
          </div>
          <div class="stat-item">
            <span>–°–∫–æ—Ä. –∞—Ç–∞–∫–∏:</span>
            <span class="stat-value">${char.attackSpeed}—Å</span>
          </div>
          <div class="stat-item">
            <span>–¢–∏–ø:</span>
            <span class="stat-value">${char.type === 'melee' ? '–ë–ª–∏–∂–Ω–∏–π' : '–î–∞–ª—å–Ω–∏–π'}</span>
          </div>
          <div class="stat-item">
            <span>–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:</span>
            <span class="stat-value">${abilityName}</span>
          </div>
        </div>
      `;
      
      card.addEventListener('click', () => {
        document.querySelectorAll('.character-card').forEach(c => c.classList.remove('selected'));
        card.classList.add('selected');
        gameState.selectedCharacter = char;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ä—Ç" –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        const startGameBtn = document.getElementById('startGameBtn');
        if (startGameBtn) {
          startGameBtn.style.display = 'block';
        }
      });
      
      charList.appendChild(card);
    });
  }

  static async toggleInventory() {
    const overlay = document.getElementById('inventoryOverlay');
    if (!overlay) return;
    
    if (overlay.classList.contains('hidden')) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –Ω–µ –≤ –ø–∞—É–∑–µ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      if (gameState.isPaused) {
        return;
      }
      
      const { InventoryManager } = await import('./InventoryManager.js');
      InventoryManager.renderInventory();
      overlay.classList.remove('hidden');
      if (gameState.screen === 'game' && !gameState.isPaused) {
        gameState.isPaused = true;
        const pauseOverlay = document.getElementById('pauseOverlay');
        if (pauseOverlay) pauseOverlay.classList.add('hidden');
      }
    } else {
      overlay.classList.add('hidden');
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—É–∑—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –µ—Å–ª–∏ –∏–≥—Ä–∞ –±—ã–ª–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É –∏–∑-–∑–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      if (gameState.screen === 'game' && gameState.isPaused) {
        gameState.isPaused = false;
        const pauseOverlay = document.getElementById('pauseOverlay');
        if (pauseOverlay) pauseOverlay.classList.add('hidden');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        const inventoryToggleBtn = document.getElementById('inventoryToggle');
        const pauseBtn = document.getElementById('pauseBtn');
        const desktopAbilityBtn = document.getElementById('desktopAbilityBtn');
        const quickPotionsContainer = document.querySelector('.quick-potions-container');
        
        if (inventoryToggleBtn) inventoryToggleBtn.style.display = '';
        if (pauseBtn) pauseBtn.style.display = '';
        if (desktopAbilityBtn) desktopAbilityBtn.style.display = '';
        if (quickPotionsContainer) quickPotionsContainer.style.display = '';
      }
    }
  }
  
  static async togglePause() {
    if (gameState.screen !== 'game') {
      return;
    }
    
    gameState.isPaused = !gameState.isPaused;
    const overlay = document.getElementById('pauseOverlay');
    
    if (!overlay) {
      console.error('‚ùå Pause overlay not found');
      return;
    }
    
    if (gameState.isPaused) {
      overlay.classList.remove('hidden');
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞—É–∑—ã
      const inventoryOverlay = document.getElementById('inventoryOverlay');
      if (inventoryOverlay && !inventoryOverlay.classList.contains('hidden')) {
        (async () => {
          const { InventoryManager } = await import('./InventoryManager.js');
          InventoryManager.toggleInventory();
        })();
      }
      
      // –°–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã
      const inventoryToggleBtn = document.getElementById('inventoryToggle');
      const mobileInventoryBtn = document.getElementById('mobileInventoryBtn');
      const pauseBtn = document.getElementById('pauseBtn');
      const desktopAbilityBtn = document.getElementById('desktopAbilityBtn');
      const quickPotionsContainer = document.querySelector('.quick-potions-container');
      
      if (inventoryToggleBtn) inventoryToggleBtn.style.display = 'none';
      if (mobileInventoryBtn) mobileInventoryBtn.style.display = 'none';
      if (pauseBtn) pauseBtn.style.display = 'none';
      if (desktopAbilityBtn) desktopAbilityBtn.style.display = 'none';
      if (quickPotionsContainer) quickPotionsContainer.style.display = 'none';
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–æ–≤
      (async () => {
        const { SettingsManager } = await import('./SettingsManager.js');
        SettingsManager.setupAudioEventListeners();
        
        // –¢–∞–∫–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–∞—É–∑—ã
        setTimeout(() => {
          SettingsManager.setupPauseEventListeners();
        }, 100);
      })();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –º–µ–Ω—é –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞—É–∑—ã
      setTimeout(() => {
        MenuNavigationManager.updateFocusableElements();
      }, 100);
      
      // –£–º–µ–Ω—å—à–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏ –ø—Ä–∏ –ø–∞—É–∑–µ
      this.dimMusicOnPause();
    } else {
      overlay.classList.add('hidden');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      const inventoryToggleBtn = document.getElementById('inventoryToggle');
      const mobileInventoryBtn = document.getElementById('mobileInventoryBtn');
      const pauseBtn = document.getElementById('pauseBtn');
      const desktopAbilityBtn = document.getElementById('desktopAbilityBtn');
      const quickPotionsContainer = document.querySelector('.quick-potions-container');
      
      if (inventoryToggleBtn) inventoryToggleBtn.style.display = '';
      if (mobileInventoryBtn) mobileInventoryBtn.style.display = '';
      if (pauseBtn) pauseBtn.style.display = '';
      if (desktopAbilityBtn) desktopAbilityBtn.style.display = '';
      if (quickPotionsContainer) quickPotionsContainer.style.display = '';
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      this.restoreMusicOnResume();
    }
  }
  
  static dimMusicOnPause() {
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏ –¥–æ 10%
    (async () => {
      const { audioManager } = await import('../audio/AudioManager.js');
      if (audioManager.currentMusic) {
        audioManager.currentMusic.volume = gameState.audio.musicVolume * gameState.audio.masterVolume * 0.1;
      }
    })();
  }
  
  static restoreMusicOnResume() {
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏
    (async () => {
      const { audioManager } = await import('../audio/AudioManager.js');
      if (audioManager.currentMusic) {
        audioManager.currentMusic.volume = gameState.audio.musicVolume * gameState.audio.masterVolume;
      }
    })();
  }
} // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ - Fri Aug  1 19:39:05 MSK 2025
