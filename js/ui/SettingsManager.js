/* Darkfall Depths - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ */

import { gameState, canvas, DPR } from '../core/GameState.js';
import { audioManager } from '../audio/AudioManager.js';

export class SettingsManager {
  static saveSettings() {
    const settings = {
      enabled: gameState.audio.enabled,
      masterVolume: gameState.audio.masterVolume,
      musicVolume: gameState.audio.musicVolume,
      sfxVolume: gameState.audio.sfxVolume
    };
    localStorage.setItem('darkfall_settings', JSON.stringify(settings));
  }

  static loadSettings() {
    const saved = localStorage.getItem('darkfall_settings');
    if (saved) {
      const settings = JSON.parse(saved);
      gameState.audio = { ...gameState.audio, ...settings };
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
      this.initializeMainMenuAudioSettings();
    }
  }

  static setupAudioEventListeners() {
    console.log('üîß Setting up audio event listeners...');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–º –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    const masterVol = document.getElementById('masterVol');
    const musicVol = document.getElementById('musicVol');
    const sfxVol = document.getElementById('sfxVol');
    const muteToggle = document.getElementById('muteToggle');

    if (masterVol && !masterVol.hasAttribute('data-audio-listener')) {
      masterVol.setAttribute('data-audio-listener', 'true');
      masterVol.addEventListener('input', () => {
        gameState.audio.masterVolume = parseFloat(masterVol.value);
        const masterVolText = document.getElementById('masterVolText');
        if (masterVolText) masterVolText.textContent = Math.round(gameState.audio.masterVolume * 100) + '%';
        audioManager.updateMusicVolume();
        this.saveSettings();
      });
    }

    if (musicVol && !musicVol.hasAttribute('data-audio-listener')) {
      musicVol.setAttribute('data-audio-listener', 'true');
      musicVol.addEventListener('input', () => {
        gameState.audio.musicVolume = parseFloat(musicVol.value);
        const musicVolText = document.getElementById('musicVolText');
        if (musicVolText) musicVolText.textContent = Math.round(gameState.audio.musicVolume * 100) + '%';
        audioManager.updateMusicVolume();
        this.saveSettings();
      });
    }

    if (sfxVol && !sfxVol.hasAttribute('data-audio-listener')) {
      sfxVol.setAttribute('data-audio-listener', 'true');
      sfxVol.addEventListener('input', () => {
        gameState.audio.sfxVolume = parseFloat(sfxVol.value);
        const sfxVolText = document.getElementById('sfxVolText');
        if (sfxVolText) sfxVolText.textContent = Math.round(gameState.audio.sfxVolume * 100) + '%';
        this.saveSettings();
      });
    }

    if (muteToggle && !muteToggle.hasAttribute('data-audio-listener')) {
      muteToggle.setAttribute('data-audio-listener', 'true');
      muteToggle.addEventListener('click', () => {
        gameState.audio.enabled = !gameState.audio.enabled;
        muteToggle.textContent = gameState.audio.enabled ? 'üîá –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : 'üîä –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫';
        
        if (gameState.audio.enabled) {
          // Resume music if enabled
          if (gameState.screen === 'menu' || gameState.screen === 'select') {
            audioManager.playMusic('main');
          } else if (gameState.screen === 'game') {
            audioManager.playMusic('stage1');
          }
        } else {
          // Stop music if disabled
          audioManager.stopMusic();
        }
        
        this.saveSettings();
      });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–º –≤ –ø–∞—É–∑–µ
    const pauseMasterVol = document.getElementById('pauseMasterVol');
    const pauseMusicVol = document.getElementById('pauseMusicVol');
    const pauseSfxVol = document.getElementById('pauseSfxVol');
    const pauseMuteToggle = document.getElementById('pauseMuteToggle');

    if (pauseMasterVol && !pauseMasterVol.hasAttribute('data-audio-listener')) {
      pauseMasterVol.setAttribute('data-audio-listener', 'true');
      pauseMasterVol.addEventListener('input', () => {
        gameState.audio.masterVolume = parseFloat(pauseMasterVol.value);
        const pauseMasterVolText = document.getElementById('pauseMasterVolText');
        if (pauseMasterVolText) pauseMasterVolText.textContent = Math.round(gameState.audio.masterVolume * 100) + '%';
        audioManager.updateMusicVolume();
        this.saveSettings();
      });
      
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ MenuNavigationManager
    }

    if (pauseMusicVol && !pauseMusicVol.hasAttribute('data-audio-listener')) {
      pauseMusicVol.setAttribute('data-audio-listener', 'true');
      pauseMusicVol.addEventListener('input', () => {
        gameState.audio.musicVolume = parseFloat(pauseMusicVol.value);
        const pauseMusicVolText = document.getElementById('pauseMusicVolText');
        if (pauseMusicVolText) pauseMusicVolText.textContent = Math.round(gameState.audio.musicVolume * 100) + '%';
        audioManager.updateMusicVolume();
        this.saveSettings();
      });
      
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ MenuNavigationManager
    }

    if (pauseSfxVol && !pauseSfxVol.hasAttribute('data-audio-listener')) {
      pauseSfxVol.setAttribute('data-audio-listener', 'true');
      pauseSfxVol.addEventListener('input', () => {
        gameState.audio.sfxVolume = parseFloat(pauseSfxVol.value);
        const pauseSfxVolText = document.getElementById('pauseSfxVolText');
        if (pauseSfxVolText) pauseSfxVolText.textContent = Math.round(gameState.audio.sfxVolume * 100) + '%';
        this.saveSettings();
      });
      
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ MenuNavigationManager
    }

    if (pauseMuteToggle && !pauseMuteToggle.hasAttribute('data-audio-listener')) {
      pauseMuteToggle.setAttribute('data-audio-listener', 'true');
      pauseMuteToggle.addEventListener('click', () => {
        gameState.audio.enabled = !gameState.audio.enabled;
        pauseMuteToggle.textContent = gameState.audio.enabled ? 'üîá –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : 'üîä –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫';
        
        if (gameState.audio.enabled) {
          // Resume music if enabled
          if (gameState.screen === 'game') {
            audioManager.playMusic('stage1');
          }
        } else {
          // Stop music if disabled
          audioManager.stopMusic();
        }
        
        this.saveSettings();
      });
    }
  }

  static setupEventListeners() {
    console.log('üîß Setting up event listeners...');
    
    try {
    
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const startBtn = document.getElementById('startBtn');
    const recordsBtn = document.getElementById('recordsBtn');
    const settingsBtn = document.getElementById('settingsBtn');
    
    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:', {
      startBtn: !!startBtn,
      recordsBtn: !!recordsBtn,
      settingsBtn: !!settingsBtn
    });
    
    if (startBtn) {
      startBtn.addEventListener('click', async () => {
        console.log('Start button clicked');
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        ScreenManager.switchScreen('select');
        ScreenManager.buildCharacterSelect();
      });
    }
    
    if (recordsBtn) {
      recordsBtn.addEventListener('click', async () => {
        console.log('Records button clicked');
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        const { RecordsManager } = await import('../ui/RecordsManager.js');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Ä–µ–∫–æ—Ä–¥–æ–≤
        RecordsManager.updateTopRecordsScreen();
        
        ScreenManager.switchScreen('records');
      });
    }
    
    if (settingsBtn) {
      settingsBtn.addEventListener('click', async () => {
        console.log('Settings button clicked');
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        ScreenManager.switchScreen('settings');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
        this.initializeMainMenuAudioSettings();
      });
    }
    
    // –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –ø–∞—É–∑—ã
    const resumeBtn = document.getElementById('resumeBtn');
    const quitBtn = document.getElementById('quitBtn');
    
    console.log('Resume button found:', resumeBtn);
    console.log('Quit button found:', quitBtn);
    
    if (resumeBtn) {
      resumeBtn.addEventListener('click', async () => {
        console.log('Resume button clicked');
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        await ScreenManager.togglePause(); // –ó–∞–∫—Ä—ã—Ç—å –ø–∞—É–∑—É
      });
    } else {
      console.error('‚ùå Resume button not found!');
    }
    
    if (quitBtn) {
      quitBtn.addEventListener('click', async () => {
        console.log('Quit to main menu button clicked');
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        const { GameEngine } = await import('../game/GameEngine.js');
        
        // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É
        GameEngine.stopGame();
        
        // –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—É–∑—ã
        gameState.isPaused = false;
        const pauseOverlay = document.getElementById('pauseOverlay');
        if (pauseOverlay) pauseOverlay.classList.add('hidden');
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        ScreenManager.switchScreen('menu');
      });
    } else {
      console.error('‚ùå Quit button not found!');
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ESC —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ MenuNavigationManager
    
    // –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã –Ω–∞ –∏–≥—Ä–æ–≤–æ–º —ç–∫—Ä–∞–Ω–µ
    const pauseBtn = document.getElementById('pauseBtn');
    console.log('Pause button found:', pauseBtn);
    if (pauseBtn) {
      pauseBtn.addEventListener('click', async () => {
        console.log('Pause button clicked');
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        await ScreenManager.togglePause();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–∞—É–∑–µ
        this.initializePauseAudioSettings();
      });
    } else {
      console.error('‚ùå Pause button not found!');
    }
    
    // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    const closeInventoryBtn = document.getElementById('closeInventory');
    if (closeInventoryBtn) {
      closeInventoryBtn.addEventListener('click', async () => {
        console.log('Close inventory button clicked');
        const { InventoryManager } = await import('../ui/InventoryManager.js');
        InventoryManager.toggleInventory();
      });
    }
    
    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ (—Ç–æ–ª—å–∫–æ –≤ –∏–≥—Ä–µ)
    const inventoryToggleBtn = document.getElementById('inventoryToggle');
    if (inventoryToggleBtn) {
      inventoryToggleBtn.addEventListener('click', async () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∏–≥—Ä–µ –∏ –Ω–µ –≤ –ø–∞—É–∑–µ
        if (gameState.screen !== 'game') {
          console.log('Inventory button clicked outside game - ignoring');
          return;
        }
        
        if (gameState.isPaused) {
          console.log('Inventory button clicked during pause - ignoring');
          return;
        }
        
        console.log('Inventory toggle button clicked');
        const { InventoryManager } = await import('../ui/InventoryManager.js');
        InventoryManager.toggleInventory();
      });
    }
    
    // –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    const desktopAbilityBtn = document.getElementById('desktopAbilityBtn');
    if (desktopAbilityBtn) {
      desktopAbilityBtn.addEventListener('click', async () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∏–≥—Ä–µ, –Ω–µ –≤ –ø–∞—É–∑–µ –∏ —É –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        if (gameState.screen !== 'game' || !gameState.player) {
          console.log('Ability button clicked outside game - ignoring');
          return;
        }
        
        if (gameState.isPaused) {
          console.log('Ability button clicked during pause - ignoring');
          return;
        }
        
        console.log('Desktop ability button clicked');
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (gameState.player.hasDash && gameState.player.dashCooldown <= 0) {
          gameState.player.performDash();
        } else if (gameState.player.hasShield && gameState.player.shieldCooldown <= 0) {
          gameState.player.performShield();
        } else if (gameState.player.hasBlast && gameState.player.blastCooldown <= 0) {
          gameState.player.performBlast();
        }
      });
    }
    
    // –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    const nextLevelBtn = document.getElementById('nextLevelBtn');
    if (nextLevelBtn) {
      nextLevelBtn.addEventListener('click', async () => {
        console.log('Next level button clicked');
        console.log(`üéÆ Button click - level: ${gameState.level}, gameRunning: ${gameState.gameRunning}`);
        const { GameEngine } = await import('../game/GameEngine.js');
        const { LevelManager } = await import('../game/LevelManager.js');
        
        // –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const levelCompleteOverlay = document.getElementById('levelCompleteOverlay');
        if (levelCompleteOverlay) {
          levelCompleteOverlay.classList.add('hidden');
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —á–µ—Ä–µ–∑ LevelManager
        console.log(`üéÆ Before nextLevel: level ${gameState.level}, gameRunning: ${gameState.gameRunning}`);
        await LevelManager.nextLevel();
        console.log(`üéÆ After nextLevel: level ${gameState.level}, gameRunning: ${gameState.gameRunning}`);
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É —Å –Ω–æ–≤—ã–º —É—Ä–æ–≤–Ω–µ–º
        await GameEngine.continueGame();
      });
    }
    
    // –í–æ–∑–≤—Ä–∞—Ç—ã –≤ –º–µ–Ω—é
    const backToMenuFromSelect = document.getElementById('backToMenuFromSelect');
    const backToMenuFromRecords = document.getElementById('backToMenuFromRecords');
    const backToMenuFromSettings = document.getElementById('backToMenuFromSettings');
    
    if (backToMenuFromSelect) {
      backToMenuFromSelect.addEventListener('click', async () => {
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        ScreenManager.switchScreen('menu');
      });
    }
    
    if (backToMenuFromRecords) {
      backToMenuFromRecords.addEventListener('click', async () => {
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        ScreenManager.switchScreen('menu');
      });
    }
    
    if (backToMenuFromSettings) {
      backToMenuFromSettings.addEventListener('click', async () => {
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        ScreenManager.switchScreen('menu');
      });
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ –±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–∫—Ä–∞–Ω–æ–≤
    
    // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∫–æ—Ä–¥–æ–≤
    const clearRecords = document.getElementById('clearRecords');
    if (clearRecords) {
      clearRecords.addEventListener('click', async () => {
        console.log('Clear records button clicked');
        const { RecordsManager } = await import('../ui/RecordsManager.js');
        RecordsManager.clearRecords();
      });
    }
    
    // –ö–Ω–æ–ø–∫–∏ —ç–∫—Ä–∞–Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    const restartBtn = document.getElementById('restartBtn');
    const menuBtn = document.getElementById('menuBtn');
    
    if (restartBtn) {
      restartBtn.addEventListener('click', async () => {
        console.log('Restart button clicked');
        const { GameEngine } = await import('../game/GameEngine.js');
        const { LevelManager } = await import('../game/LevelManager.js');
        
        // –ó–∞–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        const gameOverOverlay = document.getElementById('gameOverOverlay');
        if (gameOverOverlay) {
          gameOverOverlay.classList.add('hidden');
        }
        
        // –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        LevelManager.endGame();
        GameEngine.startGame();
      });
    }
    
    if (menuBtn) {
      menuBtn.addEventListener('click', async () => {
        console.log('Menu button clicked');
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        const { LevelManager } = await import('../game/LevelManager.js');
        
        // –ó–∞–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        const gameOverOverlay = document.getElementById('gameOverOverlay');
        if (gameOverOverlay) {
          gameOverOverlay.classList.add('hidden');
        }
        
        // –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é
        LevelManager.endGame();
        ScreenManager.switchScreen('menu');
      });
    }
    } catch (error) {
      console.error('‚ùå Error in setupEventListeners:', error);
    }
  }

  static initializePauseAudioSettings() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–æ–≤ –≤ –ø–∞—É–∑–µ
    const pauseMasterVol = document.getElementById('pauseMasterVol');
    const pauseMusicVol = document.getElementById('pauseMusicVol');
    const pauseSfxVol = document.getElementById('pauseSfxVol');
    const pauseMuteToggle = document.getElementById('pauseMuteToggle');

    if (pauseMasterVol) {
      pauseMasterVol.value = gameState.audio.masterVolume;
      const pauseMasterVolText = document.getElementById('pauseMasterVolText');
      if (pauseMasterVolText) pauseMasterVolText.textContent = Math.round(gameState.audio.masterVolume * 100) + '%';
    }

    if (pauseMusicVol) {
      pauseMusicVol.value = gameState.audio.musicVolume;
      const pauseMusicVolText = document.getElementById('pauseMusicVolText');
      if (pauseMusicVolText) pauseMusicVolText.textContent = Math.round(gameState.audio.musicVolume * 100) + '%';
    }

    if (pauseSfxVol) {
      pauseSfxVol.value = gameState.audio.sfxVolume;
      const pauseSfxVolText = document.getElementById('pauseSfxVolText');
      if (pauseSfxVolText) pauseSfxVolText.textContent = Math.round(gameState.audio.sfxVolume * 100) + '%';
    }

    if (pauseMuteToggle) {
      pauseMuteToggle.textContent = gameState.audio.enabled ? 'üîá –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : 'üîä –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫';
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–∞—É–∑—ã
    this.setupAudioEventListeners();
  }

  static initializeMainMenuAudioSettings() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    const masterVol = document.getElementById('masterVol');
    const musicVol = document.getElementById('musicVol');
    const sfxVol = document.getElementById('sfxVol');
    const muteToggle = document.getElementById('muteToggle');

    if (masterVol) {
      masterVol.value = gameState.audio.masterVolume;
      const masterVolText = document.getElementById('masterVolText');
      if (masterVolText) masterVolText.textContent = Math.round(gameState.audio.masterVolume * 100) + '%';
    }

    if (musicVol) {
      musicVol.value = gameState.audio.musicVolume;
      const musicVolText = document.getElementById('musicVolText');
      if (musicVolText) musicVolText.textContent = Math.round(gameState.audio.musicVolume * 100) + '%';
    }

    if (sfxVol) {
      sfxVol.value = gameState.audio.sfxVolume;
      const sfxVolText = document.getElementById('sfxVolText');
      if (sfxVolText) sfxVolText.textContent = Math.round(gameState.audio.sfxVolume * 100) + '%';
    }

    if (muteToggle) {
      muteToggle.textContent = gameState.audio.enabled ? 'üîá –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : 'üîä –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫';
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.setupAudioEventListeners();
  }
} 