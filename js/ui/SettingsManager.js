/* Darkfall Depths - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ */

import { gameState, canvas, DPR } from '../core/GameState.js';
import { audioManager } from '../audio/AudioManager.js';
import { Logger } from '../utils/Logger.js';

export class SettingsManager {
  static escapeListenerAdded = false;
  static delegatedListenerAdded = false;
  
  static init() {
    this.loadSettings();
    this.setupEventListeners();
  }

  static reinitEventListeners() {
    this.setupEventListeners();
  }

  static saveSettings() {
    const settings = {
      enabled: gameState.audio.enabled,
      masterVolume: gameState.audio.masterVolume,
      musicVolume: gameState.audio.musicVolume,
      sfxVolume: gameState.audio.sfxVolume
    };
    localStorage.setItem('darkfall_settings', JSON.stringify(settings));
  }

  static loadSettings() {
    const saved = localStorage.getItem('darkfall_settings');
    if (saved) {
      const settings = JSON.parse(saved);
      gameState.audio = { ...gameState.audio, ...settings };
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
      this.initializeMainMenuAudioSettings();
    }
  }

  static setupAudioEventListeners() {
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–º –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    const masterVol = document.getElementById('masterVol');
    const musicVol = document.getElementById('musicVol');
    const sfxVol = document.getElementById('sfxVol');
    const muteToggle = document.getElementById('muteToggle');

    if (masterVol && !masterVol.hasAttribute('data-audio-listener')) {
      masterVol.setAttribute('data-audio-listener', 'true');
      
      // –î–æ–±–∞–≤–ª—è–µ–º touch –ø–æ–¥–¥–µ—Ä–∂–∫—É
      masterVol.style.touchAction = 'manipulation';
      masterVol.style.webkitTapHighlightColor = 'transparent';
      
      masterVol.addEventListener('input', () => {
        gameState.audio.masterVolume = parseFloat(masterVol.value);
        const masterVolText = document.getElementById('masterVolText');
        if (masterVolText) masterVolText.textContent = Math.round(gameState.audio.masterVolume * 100) + '%';
        audioManager.updateMusicVolume();
        this.saveSettings();
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–æ–±–∏–ª—å–Ω—ã—Ö
      masterVol.addEventListener('touchstart', (e) => {
        e.stopPropagation();
        // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
      });
      
      masterVol.addEventListener('touchmove', (e) => {
        e.stopPropagation();
        // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
      });
      
      masterVol.addEventListener('touchend', (e) => {
        e.stopPropagation();
        // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
      });
    }

    if (musicVol && !musicVol.hasAttribute('data-audio-listener')) {
      musicVol.setAttribute('data-audio-listener', 'true');
      
      // –î–æ–±–∞–≤–ª—è–µ–º touch –ø–æ–¥–¥–µ—Ä–∂–∫—É
      musicVol.style.touchAction = 'manipulation';
      musicVol.style.webkitTapHighlightColor = 'transparent';
      
      musicVol.addEventListener('input', () => {
        gameState.audio.musicVolume = parseFloat(musicVol.value);
        const musicVolText = document.getElementById('musicVolText');
        if (musicVolText) musicVolText.textContent = Math.round(gameState.audio.musicVolume * 100) + '%';
        audioManager.updateMusicVolume();
        this.saveSettings();
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–æ–±–∏–ª—å–Ω—ã—Ö
      musicVol.addEventListener('touchstart', (e) => {
        e.stopPropagation();
        // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
      });
      
      musicVol.addEventListener('touchmove', (e) => {
        e.stopPropagation();
        // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
      });
      
      musicVol.addEventListener('touchend', (e) => {
        e.stopPropagation();
        // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
      });
    }

    if (sfxVol && !sfxVol.hasAttribute('data-audio-listener')) {
      sfxVol.setAttribute('data-audio-listener', 'true');
      
      // –î–æ–±–∞–≤–ª—è–µ–º touch –ø–æ–¥–¥–µ—Ä–∂–∫—É
      sfxVol.style.touchAction = 'manipulation';
      sfxVol.style.webkitTapHighlightColor = 'transparent';
      
      sfxVol.addEventListener('input', () => {
        gameState.audio.sfxVolume = parseFloat(sfxVol.value);
        const sfxVolText = document.getElementById('sfxVolText');
        if (sfxVolText) sfxVolText.textContent = Math.round(gameState.audio.sfxVolume * 100) + '%';
        this.saveSettings();
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–æ–±–∏–ª—å–Ω—ã—Ö
      sfxVol.addEventListener('touchstart', (e) => {
        e.stopPropagation();
        // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
      });
      
      sfxVol.addEventListener('touchmove', (e) => {
        e.stopPropagation();
        // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
      });
      
      sfxVol.addEventListener('touchend', (e) => {
        e.stopPropagation();
        // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
      });
    }

    if (muteToggle && !muteToggle.hasAttribute('data-audio-listener')) {
      muteToggle.setAttribute('data-audio-listener', 'true');
      
      const handleMuteToggle = () => {
        gameState.audio.enabled = !gameState.audio.enabled;
        muteToggle.textContent = gameState.audio.enabled ? 'üîá –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : 'üîä –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫';
        
        if (gameState.audio.enabled) {
          // Resume music if enabled
          if (gameState.screen === 'menu' || gameState.screen === 'select') {
            audioManager.playMusic('main');
          } else if (gameState.screen === 'game') {
            audioManager.playMusic('stage1');
          }
        } else {
          // Stop music if disabled
          audioManager.stopMusic();
        }
        
        this.saveSettings();
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ã—à–∏ –∏ touch
      muteToggle.addEventListener('click', handleMuteToggle);
      muteToggle.addEventListener('touchend', handleMuteToggle);
      muteToggle.addEventListener('touchstart', (e) => e.preventDefault());
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–º –≤ –ø–∞—É–∑–µ
    const pauseMasterVol = document.getElementById('pauseMasterVol');
    const pauseMusicVol = document.getElementById('pauseMusicVol');
    const pauseSfxVol = document.getElementById('pauseSfxVol');
    const pauseMuteToggle = document.getElementById('pauseMuteToggle');

    if (pauseMasterVol && !pauseMasterVol.hasAttribute('data-audio-listener')) {
      pauseMasterVol.setAttribute('data-audio-listener', 'true');
      
      // –î–æ–±–∞–≤–ª—è–µ–º touch –ø–æ–¥–¥–µ—Ä–∂–∫—É
      pauseMasterVol.style.touchAction = 'manipulation';
      pauseMasterVol.style.webkitTapHighlightColor = 'transparent';
      
      pauseMasterVol.addEventListener('input', () => {
        gameState.audio.masterVolume = parseFloat(pauseMasterVol.value);
        const pauseMasterVolText = document.getElementById('pauseMasterVolText');
        if (pauseMasterVolText) pauseMasterVolText.textContent = Math.round(gameState.audio.masterVolume * 100) + '%';
        audioManager.updateMusicVolume();
        this.saveSettings();
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–æ–±–∏–ª—å–Ω—ã—Ö
      pauseMasterVol.addEventListener('touchstart', (e) => {
        e.stopPropagation();
        // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
      });
      
      pauseMasterVol.addEventListener('touchmove', (e) => {
        e.stopPropagation();
        // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
      });
      
      pauseMasterVol.addEventListener('touchend', (e) => {
        e.stopPropagation();
        // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
      });
    }

    if (pauseMusicVol && !pauseMusicVol.hasAttribute('data-audio-listener')) {
      pauseMusicVol.setAttribute('data-audio-listener', 'true');
      
      // –î–æ–±–∞–≤–ª—è–µ–º touch –ø–æ–¥–¥–µ—Ä–∂–∫—É
      pauseMusicVol.style.touchAction = 'manipulation';
      pauseMusicVol.style.webkitTapHighlightColor = 'transparent';
      
      pauseMusicVol.addEventListener('input', () => {
        gameState.audio.musicVolume = parseFloat(pauseMusicVol.value);
        const pauseMusicVolText = document.getElementById('pauseMusicVolText');
        if (pauseMusicVolText) pauseMusicVolText.textContent = Math.round(gameState.audio.musicVolume * 100) + '%';
        audioManager.updateMusicVolume();
        this.saveSettings();
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–æ–±–∏–ª—å–Ω—ã—Ö
      pauseMusicVol.addEventListener('touchstart', (e) => {
        e.stopPropagation();
        // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
      });
      
      pauseMusicVol.addEventListener('touchmove', (e) => {
        e.stopPropagation();
        // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
      });
      
      pauseMusicVol.addEventListener('touchend', (e) => {
        e.stopPropagation();
        // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
      });
    }

    if (pauseSfxVol && !pauseSfxVol.hasAttribute('data-audio-listener')) {
      pauseSfxVol.setAttribute('data-audio-listener', 'true');
      
      // –î–æ–±–∞–≤–ª—è–µ–º touch –ø–æ–¥–¥–µ—Ä–∂–∫—É
      pauseSfxVol.style.touchAction = 'manipulation';
      pauseSfxVol.style.webkitTapHighlightColor = 'transparent';
      
      pauseSfxVol.addEventListener('input', () => {
        gameState.audio.sfxVolume = parseFloat(pauseSfxVol.value);
        const pauseSfxVolText = document.getElementById('pauseSfxVolText');
        if (pauseSfxVolText) pauseSfxVolText.textContent = Math.round(gameState.audio.sfxVolume * 100) + '%';
        this.saveSettings();
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–æ–±–∏–ª—å–Ω—ã—Ö
      pauseSfxVol.addEventListener('touchstart', (e) => {
        e.stopPropagation();
        // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
      });
      
      pauseSfxVol.addEventListener('touchmove', (e) => {
        e.stopPropagation();
        // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
      });
      
      pauseSfxVol.addEventListener('touchend', (e) => {
        e.stopPropagation();
        // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
      });
    }

    if (pauseMuteToggle && !pauseMuteToggle.hasAttribute('data-audio-listener')) {
      pauseMuteToggle.setAttribute('data-audio-listener', 'true');
      
      const handlePauseMuteToggle = () => {
        gameState.audio.enabled = !gameState.audio.enabled;
        pauseMuteToggle.textContent = gameState.audio.enabled ? 'üîá –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : 'üîä –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫';
        
        if (gameState.audio.enabled) {
          // Resume music if enabled
          if (gameState.screen === 'game') {
            audioManager.playMusic('stage1');
          }
        } else {
          // Stop music if disabled
          audioManager.stopMusic();
        }
        
        this.saveSettings();
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ã—à–∏ –∏ touch
      pauseMuteToggle.addEventListener('click', handlePauseMuteToggle);
      pauseMuteToggle.addEventListener('touchend', handlePauseMuteToggle);
      pauseMuteToggle.addEventListener('touchstart', (e) => e.preventDefault());
    }
  }

  static setupGameButtonEventListeners() {
    // –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã –Ω–∞ –∏–≥—Ä–æ–≤–æ–º —ç–∫—Ä–∞–Ω–µ
    const pauseBtn = document.getElementById('pauseBtn');
    if (pauseBtn) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      const newPauseBtn = pauseBtn.cloneNode(true);
      pauseBtn.parentNode.replaceChild(newPauseBtn, pauseBtn);
      
      // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–∞—É–∑—ã
      const handlePauseClick = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        await ScreenManager.togglePause();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–∞—É–∑–µ
        this.initializePauseAudioSettings();
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ã—à–∏ –∏ touch
      newPauseBtn.addEventListener('click', handlePauseClick);
      newPauseBtn.addEventListener('touchend', handlePauseClick);
      
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
      newPauseBtn.addEventListener('touchstart', (e) => {
        e.preventDefault();
      });
      
    } else {
      Logger.error('‚ùå Pause button not found!');
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
      setTimeout(() => {
        const retryPauseBtn = document.getElementById('pauseBtn');
        if (retryPauseBtn) {
          // Logger.debug('‚úÖ Pause button found on retry');
          this.setupGameButtonEventListeners();
        }
      }, 500);
    }
    
    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ (—Ç–æ–ª—å–∫–æ –≤ –∏–≥—Ä–µ)
    const inventoryToggleBtn = document.getElementById('inventoryToggle');

    if (inventoryToggleBtn) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      const newInventoryBtn = inventoryToggleBtn.cloneNode(true);
      inventoryToggleBtn.parentNode.replaceChild(newInventoryBtn, inventoryToggleBtn);
      
      // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      const handleInventoryClick = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        if (gameState.screen !== 'game') {
          return;
        }
        
        if (gameState.isPaused) {
          return;
        }
        
        const { InventoryManager } = await import('../ui/InventoryManager.js');
        InventoryManager.toggleInventory();
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ã—à–∏ –∏ touch
      newInventoryBtn.addEventListener('click', handleInventoryClick);
      newInventoryBtn.addEventListener('touchend', handleInventoryClick);
      
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
      newInventoryBtn.addEventListener('touchstart', (e) => {
        e.preventDefault();
      });
      
    } else {
      Logger.error('‚ùå Inventory button not found!');
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
      setTimeout(() => {
        const retryInventoryBtn = document.getElementById('inventoryToggle');
        if (retryInventoryBtn) {
          // Logger.debug('‚úÖ Inventory button found on retry');
          this.setupGameButtonEventListeners();
        }
      }, 500);
    }
    
    // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞—É–∑—ã (–∫—Ä–µ—Å—Ç–∏–∫)
    const closePauseBtn = document.getElementById('closePause');
    if (closePauseBtn) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      const newClosePauseBtn = closePauseBtn.cloneNode(true);
      closePauseBtn.parentNode.replaceChild(newClosePauseBtn, closePauseBtn);
      
      // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞—É–∑—ã
      const handleClosePauseClick = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        await ScreenManager.togglePause();
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ã—à–∏ –∏ touch
      newClosePauseBtn.addEventListener('click', handleClosePauseClick);
      newClosePauseBtn.addEventListener('touchend', handleClosePauseClick);
      
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
      newClosePauseBtn.addEventListener('touchstart', (e) => {
        e.preventDefault();
      });
      
    }
    
    // –ú–æ–±–∏–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞)
    const mobileInventoryBtn = document.getElementById('mobileInventoryBtn');
    if (mobileInventoryBtn) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      const newMobileInventoryBtn = mobileInventoryBtn.cloneNode(true);
      mobileInventoryBtn.parentNode.replaceChild(newMobileInventoryBtn, mobileInventoryBtn);
      
      // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      const handleMobileInventoryClick = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        if (gameState.screen !== 'game') {
          return;
        }
        
        if (gameState.isPaused) {
          return;
        }
        
        const { InventoryManager } = await import('../ui/InventoryManager.js');
        InventoryManager.toggleInventory();
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ã—à–∏ –∏ touch
      newMobileInventoryBtn.addEventListener('click', handleMobileInventoryClick);
      newMobileInventoryBtn.addEventListener('touchend', handleMobileInventoryClick);
      
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
      newMobileInventoryBtn.addEventListener('touchstart', (e) => {
        e.preventDefault();
      });
      
    }
  }

  static setupPauseEventListeners() {
    // –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã
    const pauseBtn = document.getElementById('pauseBtn');
    if (pauseBtn) {
      const handlePauseClick = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        await ScreenManager.togglePause();
      };
      
      pauseBtn.addEventListener('click', handlePauseClick);
      pauseBtn.addEventListener('touchend', handlePauseClick);
      pauseBtn.addEventListener('touchstart', (e) => e.preventDefault());
    }
    
    // –ö–Ω–æ–ø–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    const inventoryToggleBtn = document.getElementById('inventoryToggle');
    if (inventoryToggleBtn) {
      const handleInventoryClick = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        if (gameState.screen !== 'game') {
          return;
        }
        
        if (gameState.isPaused) {
          return;
        }
        
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        await ScreenManager.toggleInventory();
      };
      
      inventoryToggleBtn.addEventListener('click', handleInventoryClick);
      inventoryToggleBtn.addEventListener('touchend', handleInventoryClick);
      inventoryToggleBtn.addEventListener('touchstart', (e) => e.preventDefault());
    }
    
    // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞—É–∑—ã (–∫—Ä–µ—Å—Ç–∏–∫)
    const closePauseBtn = document.getElementById('closePause');
    if (closePauseBtn) {
      const handleClosePauseClick = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        await ScreenManager.togglePause();
      };
      
      closePauseBtn.addEventListener('click', handleClosePauseClick);
      closePauseBtn.addEventListener('touchend', handleClosePauseClick);
      closePauseBtn.addEventListener('touchstart', (e) => e.preventDefault());
    }
    
    // –ú–æ–±–∏–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    const mobileInventoryBtn = document.getElementById('mobileInventoryBtn');
    if (mobileInventoryBtn) {
      const handleMobileInventoryClick = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        if (gameState.screen !== 'game') {
          return;
        }
        
        if (gameState.isPaused) {
          return;
        }
        
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        await ScreenManager.toggleInventory();
      };
      
      mobileInventoryBtn.addEventListener('click', handleMobileInventoryClick);
      mobileInventoryBtn.addEventListener('touchend', handleMobileInventoryClick);
      mobileInventoryBtn.addEventListener('touchstart', (e) => e.preventDefault());
    }
  }

  static setupRecordsEventListeners() {
    // Logger.debug('üìä Setting up records screen event listeners...');
    
    // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∫–æ—Ä–¥–æ–≤
    const clearRecords = document.getElementById('clearRecords');
          // Logger.debug('üóëÔ∏è Clear records button found:', !!clearRecords);
    if (clearRecords) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      const newClearRecords = clearRecords.cloneNode(true);
      clearRecords.parentNode.replaceChild(newClearRecords, clearRecords);
      
      const handleClearRecords = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        // Logger.debug('üóëÔ∏è Clear records button clicked! Event type:', e.type);
        const { RecordsManager } = await import('../ui/RecordsManager.js');
        RecordsManager.clearRecords();
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ã—à–∏ –∏ touch
      newClearRecords.addEventListener('click', handleClearRecords);
      newClearRecords.addEventListener('touchend', handleClearRecords);
      newClearRecords.addEventListener('touchstart', (e) => e.preventDefault());
      
      // Logger.debug('üóëÔ∏è Clear records button event listeners set up successfully');
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∏–∑ —Ä–µ–∫–æ—Ä–¥–æ–≤
    const backToMenuFromRecords = document.getElementById('backToMenuFromRecords');
          // Logger.debug('‚¨ÖÔ∏è Back from records button found:', !!backToMenuFromRecords);
    if (backToMenuFromRecords) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      const newBackButton = backToMenuFromRecords.cloneNode(true);
      backToMenuFromRecords.parentNode.replaceChild(newBackButton, backToMenuFromRecords);
      
      const handleBackToMenu = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        // Logger.debug('‚¨ÖÔ∏è Back from records button clicked! Event type:', e.type);
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        ScreenManager.switchScreen('menu');
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ã—à–∏ –∏ touch
      newBackButton.addEventListener('click', handleBackToMenu);
      newBackButton.addEventListener('touchend', handleBackToMenu);
      newBackButton.addEventListener('touchstart', (e) => e.preventDefault());
      
      // Logger.debug('‚¨ÖÔ∏è Back from records button event listeners set up successfully');
    }
  }

  static setupSettingsEventListeners() {
    // Logger.debug('‚öôÔ∏è Setting up settings screen event listeners...');
    
    // –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å —Å–æ –≤—Å–µ—Ö –ø–æ–ª–∑—É–Ω–∫–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    setTimeout(() => {
      const sliders = document.querySelectorAll('.settings-panel input[type="range"]');
      sliders.forEach(slider => {
        slider.blur();
      });
    }, 50);
    
    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const backToMenuFromSettings = document.getElementById('backToMenuFromSettings');
          // Logger.debug('‚¨ÖÔ∏è Back from settings button found:', !!backToMenuFromSettings);
    if (backToMenuFromSettings) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      const newBackButton = backToMenuFromSettings.cloneNode(true);
      backToMenuFromSettings.parentNode.replaceChild(newBackButton, backToMenuFromSettings);
      
      const handleBackToMenu = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        // Logger.debug('‚¨ÖÔ∏è Back from settings button clicked! Event type:', e.type);
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        ScreenManager.switchScreen('menu');
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ã—à–∏ –∏ touch
      newBackButton.addEventListener('click', handleBackToMenu);
      newBackButton.addEventListener('touchend', handleBackToMenu);
      newBackButton.addEventListener('touchstart', (e) => e.preventDefault());
      
      // Logger.debug('‚¨ÖÔ∏è Back from settings button event listeners set up successfully');
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫"
    const muteToggle = document.getElementById('muteToggle');
          // Logger.debug('üîá Mute toggle button found:', !!muteToggle);
    if (muteToggle) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      const newMuteToggle = muteToggle.cloneNode(true);
      muteToggle.parentNode.replaceChild(newMuteToggle, muteToggle);
      
      const handleMuteToggle = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        // Logger.debug('üîá Mute toggle button clicked! Event type:', e.type);
        gameState.audio.enabled = !gameState.audio.enabled;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        newMuteToggle.textContent = gameState.audio.enabled ? 'üîá –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : 'üîä –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫';
        
        // –£–ø—Ä–∞–≤–ª—è–µ–º –º—É–∑—ã–∫–æ–π
        if (gameState.audio.enabled) {
          if (gameState.screen === 'menu' || gameState.screen === 'select') {
            audioManager.playMusic('main');
          } else if (gameState.screen === 'game') {
            audioManager.playMusic('stage1');
          }
        } else {
          audioManager.stopMusic();
        }
        
        this.saveSettings();
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ã—à–∏ –∏ touch
      newMuteToggle.addEventListener('click', handleMuteToggle);
      newMuteToggle.addEventListener('touchend', handleMuteToggle);
      newMuteToggle.addEventListener('touchstart', (e) => e.preventDefault());
      
      // Logger.debug('üîá Mute toggle button event listeners set up successfully');
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª–∑—É–Ω–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π touch
    this.setupAudioEventListeners();
  }

  static setupEventListeners() {
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const startBtn = document.getElementById('startBtn');
    const recordsBtn = document.getElementById('recordsBtn');
    const settingsBtn = document.getElementById('settingsBtn');
    
    if (startBtn) {
      const handleStartClick = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        if (gameState.screen === 'select') return;
        
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        ScreenManager.switchScreen('select');
        ScreenManager.buildCharacterSelect();
      };
      
      startBtn.addEventListener('click', handleStartClick);
      startBtn.addEventListener('touchend', handleStartClick);
      startBtn.addEventListener('touchstart', (e) => e.preventDefault());
    }
    
    if (recordsBtn) {
      const handleRecordsClick = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        const { RecordsManager } = await import('../ui/RecordsManager.js');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Ä–µ–∫–æ—Ä–¥–æ–≤
        RecordsManager.updateTopRecordsScreen();
        
        ScreenManager.switchScreen('records');
      };
      
      recordsBtn.addEventListener('click', handleRecordsClick);
      recordsBtn.addEventListener('touchend', handleRecordsClick);
      recordsBtn.addEventListener('touchstart', (e) => e.preventDefault());
    }
    
    if (settingsBtn) {
      const handleSettingsClick = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        ScreenManager.switchScreen('settings');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
        this.initializeMainMenuAudioSettings();
      };
      
      settingsBtn.addEventListener('click', handleSettingsClick);
      settingsBtn.addEventListener('touchend', handleSettingsClick);
      settingsBtn.addEventListener('touchstart', (e) => e.preventDefault());
    }
    
    // –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –ø–∞—É–∑—ã
    const quitBtn = document.getElementById('quitBtn');
    
          // Logger.debug('Quit button found:', quitBtn);
    
    if (quitBtn) {
      quitBtn.addEventListener('click', async () => {
        // Logger.debug('Quit to main menu button clicked');
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        const { GameEngine } = await import('../game/GameEngine.js');
        
        // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É
        GameEngine.stopGame();
        
        // –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—É–∑—ã
        gameState.isPaused = false;
        const pauseOverlay = document.getElementById('pauseOverlay');
        if (pauseOverlay) pauseOverlay.classList.add('hidden');
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        ScreenManager.switchScreen('menu');
      });
    } else {
      Logger.error('‚ùå Quit button not found!');
    }
    
    // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞—É–∑—ã (–∫—Ä–µ—Å—Ç–∏–∫) - —Ç–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    const closePauseBtn = document.getElementById('closePause');
    if (closePauseBtn) {
      const handleClosePauseClick = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        // Logger.debug('‚ùå Close pause button clicked');
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        await ScreenManager.togglePause();
      };
      
      closePauseBtn.addEventListener('click', handleClosePauseClick);
      closePauseBtn.addEventListener('touchend', handleClosePauseClick);
      closePauseBtn.addEventListener('touchstart', (e) => e.preventDefault());
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ESC —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ MenuNavigationManager
    
    // –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã –Ω–∞ –∏–≥—Ä–æ–≤–æ–º —ç–∫—Ä–∞–Ω–µ
    const pauseBtn = document.getElementById('pauseBtn');
          // Logger.debug('Pause button found:', pauseBtn);
    if (pauseBtn) {
      // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–∞—É–∑—ã
      const handlePauseClick = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        // Logger.debug('üî¥ PAUSE BUTTON CLICKED! Event type:', e.type);
        // Logger.debug('üî¥ Current gameState.screen:', gameState.screen);
        // Logger.debug('üî¥ Current gameState.isPaused:', gameState.isPaused);
        
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        await ScreenManager.togglePause();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–∞—É–∑–µ
        this.initializePauseAudioSettings();
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ã—à–∏ –∏ touch
      pauseBtn.addEventListener('click', handlePauseClick);
      pauseBtn.addEventListener('touchend', handlePauseClick);
      
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
      pauseBtn.addEventListener('touchstart', (e) => {
        e.preventDefault();
      });
    } else {
      Logger.error('‚ùå Pause button not found!');
    }
    
    // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (—Ç–æ–ª—å–∫–æ –≤ –∏–≥—Ä–æ–≤–æ–º —ç–∫—Ä–∞–Ω–µ)
    const closeInventoryBtn = document.getElementById('closeInventory');
    if (closeInventoryBtn && gameState.screen === 'game') {
              // Logger.debug('‚úÖ –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      const newCloseInventoryBtn = closeInventoryBtn.cloneNode(true);
      closeInventoryBtn.parentNode.replaceChild(newCloseInventoryBtn, closeInventoryBtn);
      
      newCloseInventoryBtn.addEventListener('click', async (e) => {
        // Logger.debug('üî¥ Close inventory button clicked');
        e.preventDefault();
        e.stopPropagation();
        const { InventoryManager } = await import('../ui/InventoryManager.js');
        InventoryManager.toggleInventory();
      });
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ —à—Ç–æ—Ä–∫—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
      const inventoryOverlay = document.getElementById('inventoryOverlay');
      if (inventoryOverlay) {
        inventoryOverlay.addEventListener('click', async (e) => {
          if (e.target === inventoryOverlay) {
            // Logger.debug('üî¥ Inventory overlay clicked - closing');
            const { InventoryManager } = await import('../ui/InventoryManager.js');
            InventoryManager.toggleInventory();
          }
        });
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
      if (!SettingsManager.delegatedListenerAdded) {
        SettingsManager.delegatedListenerAdded = true;
        document.addEventListener('click', async (e) => {
        if (e.target && e.target.id === 'closeInventory') {
          // Logger.debug('üî¥ Close inventory button clicked (delegated)');
          e.preventDefault();
          e.stopPropagation();
          const { InventoryManager } = await import('../ui/InventoryManager.js');
          InventoryManager.toggleInventory();
        } else if (e.target && e.target.id === 'restartBtn') {
          // Logger.debug('üîÑ Restart button clicked (delegated)');
          e.preventDefault();
          e.stopPropagation();
          const { GameEngine } = await import('../game/GameEngine.js');
          const { LevelManager } = await import('../game/LevelManager.js');
          
          // –ó–∞–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
          const gameOverOverlay = document.getElementById('gameOverOverlay');
          if (gameOverOverlay) {
            gameOverOverlay.classList.add('hidden');
          }
          
          // –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
          LevelManager.endGame();
          GameEngine.startGame();
        } else if (e.target && e.target.id === 'menuBtn') {
          // Logger.debug('üè† Menu button clicked (delegated)');
          e.preventDefault();
          e.stopPropagation();
          const { ScreenManager } = await import('../ui/ScreenManager.js');
          const { LevelManager } = await import('../game/LevelManager.js');
          
          // –ó–∞–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
          const gameOverOverlay = document.getElementById('gameOverOverlay');
          if (gameOverOverlay) {
            gameOverOverlay.classList.add('hidden');
          }
          
          // –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é
          LevelManager.endGame();
          ScreenManager.switchScreen('menu');
        } else if (e.target && e.target.id === 'nextLevelBtn') {
          // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
          // Logger.debug('‚¨áÔ∏è Next level button clicked (delegated) - IGNORED');
          // –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π - –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø—Ä–∞–≤–∏—Ç—Å—è
        }
      });
      

      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à–∏ Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      if (!SettingsManager.escapeListenerAdded) {
        SettingsManager.escapeListenerAdded = true;
        document.addEventListener('keydown', async (e) => {
          if (e.key === 'Escape') {
            const inventoryOverlay = document.getElementById('inventoryOverlay');
            if (inventoryOverlay && !inventoryOverlay.classList.contains('hidden')) {
              // Logger.debug('üî¥ Escape key pressed - closing inventory');
              const { InventoryManager } = await import('../ui/InventoryManager.js');
              InventoryManager.toggleInventory();
              e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Escape
              e.stopPropagation();
              e.stopImmediatePropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
              return false; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
            }
          }
        });
      }
    } else if (closeInventoryBtn && gameState.screen !== 'game') {
      // –ö–Ω–æ–ø–∫–∞ –µ—Å—Ç—å, –Ω–æ –º—ã –Ω–µ –≤ –∏–≥—Ä–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
              // Logger.debug('‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –Ω–µ –≤ –∏–≥—Ä–æ–≤–æ–º —ç–∫—Ä–∞–Ω–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
    } else if (!closeInventoryBtn && gameState.screen === 'game') {
      // –ö–Ω–æ–ø–∫–∏ –Ω–µ—Ç, –Ω–æ –º—ã –≤ –∏–≥—Ä–µ - —ç—Ç–æ –æ—à–∏–±–∫–∞
      Logger.error('‚ùå –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —ç–∫—Ä–∞–Ω–µ!');
    } else {
      // –ö–Ω–æ–ø–∫–∏ –Ω–µ—Ç –∏ –º—ã –Ω–µ –≤ –∏–≥—Ä–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
              // Logger.debug('‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–Ω–µ –≤ –∏–≥—Ä–æ–≤–æ–º —ç–∫—Ä–∞–Ω–µ)');
    }
    
    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ (—Ç–æ–ª—å–∫–æ –≤ –∏–≥—Ä–µ)
    const inventoryToggleBtn = document.getElementById('inventoryToggle');
    if (inventoryToggleBtn) {
      // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      const handleInventoryClick = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        if (gameState.screen !== 'game') {
          return;
        }
        
        if (gameState.isPaused) {
          return;
        }
        
        const { InventoryManager } = await import('../ui/InventoryManager.js');
        InventoryManager.toggleInventory();
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ã—à–∏ –∏ touch
      inventoryToggleBtn.addEventListener('click', handleInventoryClick);
      inventoryToggleBtn.addEventListener('touchend', handleInventoryClick);
      
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
      inventoryToggleBtn.addEventListener('touchstart', (e) => {
        e.preventDefault();
      });
    }
    
    // –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    const desktopAbilityBtn = document.getElementById('desktopAbilityBtn');
    if (desktopAbilityBtn) {
      desktopAbilityBtn.addEventListener('click', async () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∏–≥—Ä–µ, –Ω–µ –≤ –ø–∞—É–∑–µ –∏ —É –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        if (gameState.screen !== 'game' || !gameState.player) {
          // Logger.debug('Ability button clicked outside game - ignoring');
          return;
        }
        
        if (gameState.isPaused) {
          // Logger.debug('Ability button clicked during pause - ignoring');
          return;
        }
        
        // Logger.debug('Desktop ability button clicked');
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (gameState.player.hasDash && gameState.player.dashCooldown <= 0) {
          gameState.player.performDash();
        } else if (gameState.player.hasShield && gameState.player.shieldCooldown <= 0) {
          gameState.player.performShield();
        } else if (gameState.player.hasBlast && gameState.player.blastCooldown <= 0) {
          gameState.player.performBlast();
        }
      });
    }
    
    // –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    const nextLevelBtn = document.getElementById('nextLevelBtn');
    if (nextLevelBtn) {
              // Logger.debug('‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      const newNextLevelBtn = nextLevelBtn.cloneNode(true);
      nextLevelBtn.parentNode.replaceChild(newNextLevelBtn, nextLevelBtn);
      
      newNextLevelBtn.addEventListener('click', async () => {
        // Logger.debug('üéÆ Next level button clicked');
        // Logger.debug(`üéÆ Button click - level: ${gameState.level}, gameRunning: ${gameState.gameRunning}`);
        
        try {
          const { GameEngine } = await import('../game/GameEngine.js');
          const { LevelManager } = await import('../game/LevelManager.js');
          
          // –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
          const levelCompleteOverlay = document.getElementById('levelCompleteOverlay');
          if (levelCompleteOverlay) {
            levelCompleteOverlay.classList.add('hidden');
            // Logger.debug('üéÆ Level complete overlay hidden');
          }
          
          // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —á–µ—Ä–µ–∑ LevelManager
          // Logger.debug(`üéÆ Before nextLevel: level ${gameState.level}, gameRunning: ${gameState.gameRunning}`);
          await LevelManager.nextLevel();
          // Logger.debug(`üéÆ After nextLevel: level ${gameState.level}, gameRunning: ${gameState.gameRunning}`);
          
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É —Å –Ω–æ–≤—ã–º —É—Ä–æ–≤–Ω–µ–º
          // Logger.debug('üéÆ Continuing game...');
          await GameEngine.continueGame();
          // Logger.debug('üéÆ Game continued successfully');
        } catch (error) {
          Logger.error('‚ùå Error in next level button handler:', error);
        }
      });
    } else {
      Logger.error('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    }
    
    // –í–æ–∑–≤—Ä–∞—Ç—ã –≤ –º–µ–Ω—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π touch —Å–æ–±—ã—Ç–∏–π
    const backToMenuFromSelect = document.getElementById('backToMenuFromSelect');
    const backToMenuFromRecords = document.getElementById('backToMenuFromRecords');
    const backToMenuFromSettings = document.getElementById('backToMenuFromSettings');
    
    // –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    const handleBackToMenu = async (e) => {
      e.preventDefault();
      e.stopPropagation();
      const { ScreenManager } = await import('../ui/ScreenManager.js');
      ScreenManager.switchScreen('menu');
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è backToMenuFromSelect —Ç–µ–ø–µ—Ä—å –≤ setupSelectEventListeners
    
    if (backToMenuFromRecords) {
      backToMenuFromRecords.addEventListener('click', handleBackToMenu);
      backToMenuFromRecords.addEventListener('touchend', handleBackToMenu);
      backToMenuFromRecords.addEventListener('touchstart', (e) => e.preventDefault());
    }
    
    if (backToMenuFromSettings) {
      backToMenuFromSettings.addEventListener('click', handleBackToMenu);
      backToMenuFromSettings.addEventListener('touchend', handleBackToMenu);
      backToMenuFromSettings.addEventListener('touchstart', (e) => e.preventDefault());
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ –±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–∫—Ä–∞–Ω–æ–≤
    
    // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∫–æ—Ä–¥–æ–≤
    const clearRecords = document.getElementById('clearRecords');
    if (clearRecords) {
      const handleClearRecords = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        // Logger.debug('Clear records button clicked');
        const { RecordsManager } = await import('../ui/RecordsManager.js');
        RecordsManager.clearRecords();
      };
      
      clearRecords.addEventListener('click', handleClearRecords);
      clearRecords.addEventListener('touchend', handleClearRecords);
      clearRecords.addEventListener('touchstart', (e) => e.preventDefault());
    }
    
    // –ö–Ω–æ–ø–∫–∏ —ç–∫—Ä–∞–Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    const restartBtn = document.getElementById('restartBtn');
    const menuBtn = document.getElementById('menuBtn');
    
    if (restartBtn) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      const newRestartBtn = restartBtn.cloneNode(true);
      restartBtn.parentNode.replaceChild(newRestartBtn, restartBtn);
      
      newRestartBtn.addEventListener('click', async () => {
        // Logger.debug('Restart button clicked');
        const { GameEngine } = await import('../game/GameEngine.js');
        const { LevelManager } = await import('../game/LevelManager.js');
        
        // –ó–∞–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        const gameOverOverlay = document.getElementById('gameOverOverlay');
        if (gameOverOverlay) {
          gameOverOverlay.classList.add('hidden');
        }
        
        // –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        LevelManager.endGame();
        GameEngine.startGame();
      });
    }
    
    if (menuBtn) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      const newMenuBtn = menuBtn.cloneNode(true);
      menuBtn.parentNode.replaceChild(newMenuBtn, menuBtn);
      
      newMenuBtn.addEventListener('click', async () => {
        // Logger.debug('Menu button clicked');
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        const { LevelManager } = await import('../game/LevelManager.js');
        
        // –ó–∞–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        const gameOverOverlay = document.getElementById('gameOverOverlay');
        if (gameOverOverlay) {
          gameOverOverlay.classList.add('hidden');
        }
        
        // –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é
        LevelManager.endGame();
        ScreenManager.switchScreen('menu');
      });
    }
    }
  }

  static initializePauseAudioSettings() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–æ–≤ –≤ –ø–∞—É–∑–µ
    const pauseMasterVol = document.getElementById('pauseMasterVol');
    const pauseMusicVol = document.getElementById('pauseMusicVol');
    const pauseSfxVol = document.getElementById('pauseSfxVol');
    const pauseMuteToggle = document.getElementById('pauseMuteToggle');

    if (pauseMasterVol) {
      pauseMasterVol.value = gameState.audio.masterVolume;
      const pauseMasterVolText = document.getElementById('pauseMasterVolText');
      if (pauseMasterVolText) pauseMasterVolText.textContent = Math.round(gameState.audio.masterVolume * 100) + '%';
    }

    if (pauseMusicVol) {
      pauseMusicVol.value = gameState.audio.musicVolume;
      const pauseMusicVolText = document.getElementById('pauseMusicVolText');
      if (pauseMusicVolText) pauseMusicVolText.textContent = Math.round(gameState.audio.musicVolume * 100) + '%';
    }

    if (pauseSfxVol) {
      pauseSfxVol.value = gameState.audio.sfxVolume;
      const pauseSfxVolText = document.getElementById('pauseSfxVolText');
      if (pauseSfxVolText) pauseSfxVolText.textContent = Math.round(gameState.audio.sfxVolume * 100) + '%';
    }

    if (pauseMuteToggle) {
      pauseMuteToggle.textContent = gameState.audio.enabled ? 'üîá –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : 'üîä –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫';
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–∞—É–∑—ã
    this.setupAudioEventListeners();
  }

  static initializeMainMenuAudioSettings() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    const masterVol = document.getElementById('masterVol');
    const musicVol = document.getElementById('musicVol');
    const sfxVol = document.getElementById('sfxVol');
    const muteToggle = document.getElementById('muteToggle');

    if (masterVol) {
      masterVol.value = gameState.audio.masterVolume;
      const masterVolText = document.getElementById('masterVolText');
      if (masterVolText) masterVolText.textContent = Math.round(gameState.audio.masterVolume * 100) + '%';
    }

    if (musicVol) {
      musicVol.value = gameState.audio.musicVolume;
      const musicVolText = document.getElementById('musicVolText');
      if (musicVolText) musicVolText.textContent = Math.round(gameState.audio.musicVolume * 100) + '%';
    }

    if (sfxVol) {
      sfxVol.value = gameState.audio.sfxVolume;
      const sfxVolText = document.getElementById('sfxVolText');
      if (sfxVolText) sfxVolText.textContent = Math.round(gameState.audio.sfxVolume * 100) + '%';
    }

    if (muteToggle) {
      muteToggle.textContent = gameState.audio.enabled ? 'üîá –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : 'üîä –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫';
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.setupAudioEventListeners();
  }

  static setupSelectEventListeners() {
    // Logger.debug('üë§ Setting up character select screen event listeners...');
    
    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∏–∑ —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    const backToMenuFromSelect = document.getElementById('backToMenuFromSelect');
          // Logger.debug('‚¨ÖÔ∏è Back from select button found:', !!backToMenuFromSelect);
    if (backToMenuFromSelect) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      const newBackButton = backToMenuFromSelect.cloneNode(true);
      backToMenuFromSelect.parentNode.replaceChild(newBackButton, backToMenuFromSelect);
      
      const handleBackToMenu = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        if (gameState.screen === 'menu') return;
        
        const { ScreenManager } = await import('../ui/ScreenManager.js');
        ScreenManager.switchScreen('menu');
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ã—à–∏ –∏ touch
      newBackButton.addEventListener('click', handleBackToMenu);
      newBackButton.addEventListener('touchend', handleBackToMenu);
      newBackButton.addEventListener('touchstart', (e) => e.preventDefault());
      
      // Logger.debug('‚¨ÖÔ∏è Back from select button event listeners set up successfully');
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ä—Ç" –∏–≥—Ä—ã
    const startGameBtn = document.getElementById('startGameBtn');
          // Logger.debug('üéÆ Start game button found:', !!startGameBtn);
    if (startGameBtn) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      const newStartButton = startGameBtn.cloneNode(true);
      startGameBtn.parentNode.replaceChild(newStartButton, startGameBtn);
      
      const handleStartGame = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        if (gameState.screen === 'game') {
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤—ã–±—Ä–∞–Ω
        if (!gameState.selectedCharacter) {
          return;
        }
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º –∞—É–¥–∏–æ –≤ —è–≤–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –∂–µ—Å—Ç–µ
        try { audioManager.createAudioContextAndPlay(); } catch (_) {}

        const { GameEngine } = await import('../game/GameEngine.js');
        GameEngine.startGame();
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ã—à–∏ –∏ touch
      newStartButton.addEventListener('click', handleStartGame);
      newStartButton.addEventListener('touchend', handleStartGame);
      newStartButton.addEventListener('touchstart', (e) => e.preventDefault());
      
      // Logger.debug('üéÆ Start game button event listeners set up successfully');
    }
  }
} 
