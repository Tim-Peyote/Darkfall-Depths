/* Darkfall Depths - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–∞–º–∏ */

import { gameState, Utils } from '../core/GameState.js';

export class RecordsManager {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
  static startNewSession() {
    gameState.stats.currentSessionKills = 0;
    gameState.stats.currentSessionTime = 0;
    gameState.stats.currentSessionStartTime = Date.now();
    gameState.stats.levelKills = 0;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏
  static updateSessionTime() {
    if (gameState.stats.currentSessionStartTime > 0) {
      gameState.stats.currentSessionTime = (Date.now() - gameState.stats.currentSessionStartTime) / 1000;
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–±–∏–π—Å—Ç–≤–∞ –≤ —Å–µ—Å—Å–∏—é
  static addSessionKill() {
    gameState.stats.currentSessionKills++;
    gameState.stats.levelKills++;
    gameState.stats.enemiesKilled++;
  }

  // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —É—Ä–æ–≤–Ω—è (–ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å)
  static resetLevelKills() {
    gameState.stats.levelKills = 0;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é (–ø—Ä–∏ —Å–º–µ—Ä—Ç–∏)
  static saveSessionToHistory() {
    const session = {
      date: new Date().toISOString(),
      hero: gameState.selectedCharacter?.name || 'Unknown',
      class: gameState.selectedCharacter?.class || 'Unknown',
      level: gameState.level,
      kills: gameState.stats.currentSessionKills,
      time: gameState.stats.currentSessionTime,
      levelKills: gameState.stats.levelKills
    };
    
    gameState.stats.sessionHistory.push(session);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 50 –∑–∞–ø–∏—Å—è–º–∏
    if (gameState.stats.sessionHistory.length > 50) {
      gameState.stats.sessionHistory = gameState.stats.sessionHistory.slice(-50);
    }
    
    this.saveRecords();
  }

  static saveRecords() {
    const data = {
      bestLevel: gameState.stats.bestLevel,
      enemiesKilled: gameState.stats.enemiesKilled,
      levelsCompleted: gameState.stats.levelsCompleted,
      totalPlayTime: gameState.stats.totalPlayTime,
      sessionHistory: gameState.stats.sessionHistory
    };
    localStorage.setItem('darkfall_records', JSON.stringify(data));
  }

  static loadRecords() {
    const saved = localStorage.getItem('darkfall_records');
    if (saved) {
      const data = JSON.parse(saved);
      gameState.stats = { ...gameState.stats, ...data };
    }
  }

  // –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
  static showSessionStats() {
    const sessionStats = document.getElementById('sessionStats');
    if (!sessionStats) return;
    
    this.updateSessionTime();
    
    sessionStats.innerHTML = `
      <div class="session-stats">
        <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏</h3>
        <div class="stat-item">
          <span>–£–±–∏—Ç–æ –≤ —Å–µ—Å—Å–∏–∏:</span>
          <span class="stat-value">${gameState.stats.currentSessionKills}</span>
        </div>
        <div class="stat-item">
          <span>–£–±–∏—Ç–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ:</span>
          <span class="stat-value">${gameState.stats.levelKills}</span>
        </div>
        <div class="stat-item">
          <span>–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏:</span>
          <span class="stat-value">${Utils.formatTime(gameState.stats.currentSessionTime)}</span>
        </div>
        <div class="stat-item">
          <span>–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:</span>
          <span class="stat-value">${gameState.level}</span>
        </div>
      </div>
    `;
  }

  static updateRecordsScreen() {
    const recordsData = document.getElementById('recordsData');
    if (!recordsData) return;
    
    recordsData.innerHTML = `
      <div class="record-item">
        <span>–õ—É—á—à–∏–π —É—Ä–æ–≤–µ–Ω—å:</span>
        <span class="record-value">${gameState.stats.bestLevel}</span>
      </div>
      <div class="record-item">
        <span>–ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–≤–Ω–µ–π:</span>
        <span class="record-value">${gameState.stats.levelsCompleted}</span>
      </div>
      <div class="record-item">
        <span>–£–±–∏—Ç–æ –≤—Ä–∞–≥–æ–≤ (–≤—Å–µ–≥–æ):</span>
        <span class="record-value">${gameState.stats.enemiesKilled}</span>
      </div>
      <div class="record-item">
        <span>–í—Ä–µ–º—è –∏–≥—Ä—ã (–≤—Å–µ–≥–æ):</span>
        <span class="record-value">${Utils.formatTime(gameState.stats.totalPlayTime)}</span>
      </div>
    `;
  }

  static clearRecords() {
    gameState.stats = {
      enemiesKilled: 0,
      levelsCompleted: 0,
      totalPlayTime: 0,
      bestLevel: 0,
      currentSessionKills: 0,
      currentSessionTime: 0,
      currentSessionStartTime: 0,
      levelKills: 0,
      sessionHistory: []
    };
    this.saveRecords();
    this.clearTopRecords();
    this.updateTopRecordsScreen();
  }

  static saveTopRecord(hero, stats) {
    const records = this.loadTopRecords();
    const newRecord = {
      name: hero.name,
      class: hero.class,
      level: stats.level,
      enemiesKilled: stats.currentSessionKills, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–±–∏–π—Å—Ç–≤–∞ —Å–µ—Å—Å–∏–∏
      playTime: stats.currentSessionTime, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
      date: new Date().toISOString()
    };
    records.push(newRecord);
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø–æ —É—Ä–æ–≤–Ω—é, –ø–æ—Ç–æ–º –ø–æ —É–±–∏—Ç—ã–º, –ø–æ—Ç–æ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    records.sort((a, b) => b.level - a.level || b.enemiesKilled - a.enemiesKilled || a.playTime - b.playTime);
    const top10 = records.slice(0, 10);
    localStorage.setItem('darkfall_top_records', JSON.stringify(top10));
  }

  static loadTopRecords() {
    const saved = localStorage.getItem('darkfall_top_records');
    if (saved) return JSON.parse(saved);
    return [];
  }

  static clearTopRecords() {
    localStorage.removeItem('darkfall_top_records');
  }

  static updateTopRecordsScreen() {
    const recordsData = document.getElementById('recordsData');
    if (!recordsData) return;
    
    // –¢–æ–ø-10 —Ç–∞–±–ª–∏—Ü–∞
    const top = this.loadTopRecords();
    
    if (top.length === 0) {
      recordsData.innerHTML = '<div class="record-item" style="text-align: center; color: #888; padding: 20px;">–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ—Ä–¥–æ–≤</div>';
      return;
    }
    
    let html = `
      <div class="record-item" style="font-weight: bold; background: rgba(0,0,0,0.1); padding: 8px; margin-bottom: 8px; border-radius: 4px; font-family: monospace; display: flex; align-items: center;">
        <span style="width: 40px; flex-shrink: 0;">#</span>
        <span style="width: 90px; flex-shrink: 0;">–ì–µ—Ä–æ–π</span>
        <span style="width: 70px; flex-shrink: 0;">–ö–ª–∞—Å—Å</span>
        <span style="width: 70px; flex-shrink: 0;">–£—Ä–æ–≤–µ–Ω—å</span>
        <span style="width: 70px; flex-shrink: 0;">–í—Ä–∞–≥–∏</span>
        <span style="width: 90px; flex-shrink: 0; text-align: right;">–í—Ä–µ–º—è</span>
      </div>
    `;
    
    top.forEach((rec, i) => {
      const medal = i === 0 ? 'ü•á' : i === 1 ? 'ü•à' : i === 2 ? 'ü•â' : '';
      html += `
        <div class="record-item" style="padding: 6px 8px; margin-bottom: 4px; border-radius: 4px; background: rgba(0,0,0,0.05); font-family: monospace; display: flex; align-items: center;">
          <span style="width: 40px; flex-shrink: 0;">${medal}${i+1}</span>
          <span style="width: 90px; flex-shrink: 0; font-weight: bold;">${rec.name}</span>
          <span style="width: 70px; flex-shrink: 0;">${rec.class}</span>
          <span style="width: 70px; flex-shrink: 0;">${rec.level}</span>
          <span style="width: 70px; flex-shrink: 0;">${rec.enemiesKilled}</span>
          <span style="width: 90px; flex-shrink: 0; text-align: right;">${Utils.formatTime(rec.playTime)}</span>
        </div>
      `;
    });
    
    recordsData.innerHTML = html;
  }

  // –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ —Å–º–µ—Ä—Ç–∏ —Å —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
  static showDeathScreen() {
    this.updateSessionTime();
    this.saveSessionToHistory();
    
    const deathScreen = document.getElementById('deathScreen');
    if (!deathScreen) return;
    
    const sessionStats = `
      <div class="death-stats">
        <h2>üíÄ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞</h2>
        <div class="session-summary">
          <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏</h3>
          <div class="stat-row">
            <span>–ì–µ—Ä–æ–π:</span>
            <span class="stat-value">${gameState.selectedCharacter?.name || 'Unknown'}</span>
          </div>
          <div class="stat-row">
            <span>–ö–ª–∞—Å—Å:</span>
            <span class="stat-value">${gameState.selectedCharacter?.class || 'Unknown'}</span>
          </div>
          <div class="stat-row">
            <span>–î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å:</span>
            <span class="stat-value">${gameState.level}</span>
          </div>
          <div class="stat-row">
            <span>–£–±–∏—Ç–æ –≤—Ä–∞–≥–æ–≤ –≤ —Å–µ—Å—Å–∏–∏:</span>
            <span class="stat-value">${gameState.stats.currentSessionKills}</span>
          </div>
          <div class="stat-row">
            <span>–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏:</span>
            <span class="stat-value">${Utils.formatTime(gameState.stats.currentSessionTime)}</span>
          </div>
          <div class="stat-row">
            <span>–£–±–∏—Ç–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —É—Ä–æ–≤–Ω–µ:</span>
            <span class="stat-value">${gameState.stats.levelKills}</span>
          </div>
        </div>
        
        <div class="total-stats">
          <h3>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
          <div class="stat-row">
            <span>–í—Å–µ–≥–æ —É–±–∏—Ç–æ –≤—Ä–∞–≥–æ–≤:</span>
            <span class="stat-value">${gameState.stats.enemiesKilled}</span>
          </div>
          <div class="stat-row">
            <span>–õ—É—á—à–∏–π —É—Ä–æ–≤–µ–Ω—å:</span>
            <span class="stat-value">${gameState.stats.bestLevel}</span>
          </div>
          <div class="stat-row">
            <span>–û–±—â–µ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã:</span>
            <span class="stat-value">${Utils.formatTime(gameState.stats.totalPlayTime)}</span>
          </div>
        </div>
        
        <div class="card__footer">
          <div class="flex gap-8">
            <button id="restartBtn" class="btn btn--primary">üîÑ –°–Ω–æ–≤–∞</button>
            <button id="menuBtn" class="btn btn--outline">üè† –ú–µ–Ω—é</button>
          </div>
        </div>
      </div>
    `;
    
    deathScreen.innerHTML = sessionStats;
    deathScreen.classList.remove('hidden');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
    setTimeout(() => {
      const restartBtn = document.getElementById('restartBtn');
      const menuBtn = document.getElementById('menuBtn');
      
      if (restartBtn) {
        restartBtn.addEventListener('click', () => {
          deathScreen.classList.add('hidden');
          (async () => {
            const { GameEngine } = await import('../game/GameEngine.js');
            GameEngine.startGame();
          })();
        });
      }
      
      if (menuBtn) {
        menuBtn.addEventListener('click', () => {
          deathScreen.classList.add('hidden');
          (async () => {
            const { ScreenManager } = await import('../ui/ScreenManager.js');
            ScreenManager.switchScreen('menu');
          })();
        });
      }
    }, 100);
  }
} 