/* Darkfall Depths - –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã */

import { gameState } from '../core/GameState.js';

export class MenuNavigationManager {
  static currentFocusIndex = 0;
  static focusableElements = [];
  
  static init() {
    console.log('üéØ Initializing menu navigation...');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é
    window.addEventListener('keydown', (e) => {
      // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∏–≥—Ä–µ –∫–æ–≥–¥–∞ –ù–ï –≤ –ø–∞—É–∑–µ, –ù–û –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ESC –≤—Å–µ–≥–¥–∞
      if (gameState.screen === 'game' && !gameState.isPaused && e.code !== 'Escape') return;
      
      switch (e.code) {
        case 'ArrowUp':
          e.preventDefault();
          this.navigateUp();
          break;
        case 'ArrowDown':
          e.preventDefault();
          this.navigateDown();
          break;
        case 'ArrowLeft':
          e.preventDefault();
          this.navigateLeft();
          break;
        case 'ArrowRight':
          e.preventDefault();
          this.navigateRight();
          break;
        case 'Enter':
        case 'Space':
          e.preventDefault();
          this.activateCurrentElement();
          break;
        case 'Escape':
          e.preventDefault();
          this.handleEscape();
          break;
      }
    });
  }
  
  static updateFocusableElements() {
    this.focusableElements = [];
    this.currentFocusIndex = 0;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–µ–º —ç–∫—Ä–∞–Ω–µ
    const currentScreen = document.querySelector('.screen.active');
    if (!currentScreen) return;
    
    const buttons = currentScreen.querySelectorAll('button, input[type="range"], .character-card');
    buttons.forEach((button, index) => {
      if (button.offsetParent !== null) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º
        // –ò—Å–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–∞—Ö
        if (button.id === 'inventoryToggle' || button.id === 'pauseBtn') {
          button.setAttribute('tabindex', '-1'); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏—Ä–∞–µ–º –∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
          return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–µ–∑–¥–µ
        }
        this.focusableElements.push(button);
        button.setAttribute('tabindex', index === 0 ? '0' : '-1');
      }
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    if (this.focusableElements.length > 0) {
      this.setFocus(0);
    }
  }
  
  static setFocus(index) {
    // –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å —Å–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    this.focusableElements.forEach(el => {
      el.classList.remove('keyboard-focus');
      el.setAttribute('tabindex', '-1');
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    if (this.focusableElements[index]) {
      this.focusableElements[index].classList.add('keyboard-focus');
      this.focusableElements[index].setAttribute('tabindex', '0');
      this.focusableElements[index].focus();
      this.currentFocusIndex = index;
    }
  }
  
  static navigateUp() {
    if (this.focusableElements.length === 0) return;
    
    let newIndex = this.currentFocusIndex - 1;
    if (newIndex < 0) {
      newIndex = this.focusableElements.length - 1;
    }
    this.setFocus(newIndex);
  }
  
  static navigateDown() {
    if (this.focusableElements.length === 0) return;
    
    let newIndex = this.currentFocusIndex + 1;
    if (newIndex >= this.focusableElements.length) {
      newIndex = 0;
    }
    this.setFocus(newIndex);
  }
  
  static navigateLeft() {
    // –î–ª—è —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
    if (gameState.screen === 'select') {
      const characterCards = document.querySelectorAll('.character-card');
      if (characterCards.length > 0) {
        let currentCardIndex = -1;
        characterCards.forEach((card, index) => {
          if (card.classList.contains('keyboard-focus')) {
            currentCardIndex = index;
          }
        });
        
        if (currentCardIndex > 0) {
          this.setFocus(currentCardIndex - 1);
        } else if (currentCardIndex === 0) {
          this.setFocus(characterCards.length - 1);
        }
      }
    } else {
      // –î–ª—è —Å–ª–∞–π–¥–µ—Ä–æ–≤ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
      const currentElement = this.focusableElements[this.currentFocusIndex];
      if (currentElement && currentElement.type === 'range') {
        const step = 0.1;
        const newValue = Math.max(0, parseFloat(currentElement.value) - step);
        currentElement.value = newValue;
        this.triggerSliderChange(currentElement);
        this.updateSliderText(currentElement);
        this.updateAudioSettings(currentElement, newValue);
        this.saveAudioSettings();
      }
    }
  }
  
  static navigateRight() {
    // –î–ª—è —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
    if (gameState.screen === 'select') {
      const characterCards = document.querySelectorAll('.character-card');
      if (characterCards.length > 0) {
        let currentCardIndex = -1;
        characterCards.forEach((card, index) => {
          if (card.classList.contains('keyboard-focus')) {
            currentCardIndex = index;
          }
        });
        
        if (currentCardIndex < characterCards.length - 1) {
          this.setFocus(currentCardIndex + 1);
        } else if (currentCardIndex === characterCards.length - 1) {
          this.setFocus(0);
        }
      }
    } else {
      // –î–ª—è —Å–ª–∞–π–¥–µ—Ä–æ–≤ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
      const currentElement = this.focusableElements[this.currentFocusIndex];
      if (currentElement && currentElement.type === 'range') {
        const step = 0.1;
        const newValue = Math.min(1, parseFloat(currentElement.value) + step);
        currentElement.value = newValue;
        this.triggerSliderChange(currentElement);
        this.updateSliderText(currentElement);
        this.updateAudioSettings(currentElement, newValue);
        this.saveAudioSettings();
      }
    }
  }
  
  static activateCurrentElement() {
    const currentElement = this.focusableElements[this.currentFocusIndex];
    if (currentElement) {
      if (currentElement.type === 'range') {
        // –î–ª—è —Å–ª–∞–π–¥–µ—Ä–æ–≤ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –ø—Ä–∏ Enter
        return;
      }
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫
      currentElement.click();
    }
  }
  
  static handleEscape() {
    // –ï—Å–ª–∏ –º—ã –≤ –∏–≥—Ä–µ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–∞—É–∑—É (–æ—Ç–∫—Ä—ã–≤–∞–µ–º/–∑–∞–∫—Ä—ã–≤–∞–µ–º)
    if (gameState.screen === 'game') {
      (async () => {
        const { ScreenManager } = await import('./ScreenManager.js');
        await ScreenManager.togglePause();
      })();
      return;
    }
    
    switch (gameState.screen) {
      case 'select':
        // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        (async () => {
          const { ScreenManager } = await import('./ScreenManager.js');
          ScreenManager.switchScreen('menu');
        })();
        break;
      case 'records':
      case 'settings':
        // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        (async () => {
          const { ScreenManager } = await import('./ScreenManager.js');
          ScreenManager.switchScreen('menu');
        })();
        break;
      case 'menu':
        // –ù–∞ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é Escape –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç
        break;
    }
  }
  
  static triggerSliderChange(slider) {
    // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ change –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞
    const event = new Event('input', { bubbles: true });
    slider.dispatchEvent(event);
  }
  
  static refreshNavigation() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞
    setTimeout(() => {
      this.updateFocusableElements();
    }, 100);
  }
  
  static updateSliderText(slider) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ä—è–¥–æ–º —Å–æ —Å–ª–∞–π–¥–µ—Ä–æ–º
    const sliderId = slider.id;
    const textElement = document.getElementById(sliderId + 'Text');
    if (textElement) {
      const value = parseFloat(slider.value);
      textElement.textContent = Math.round(value * 100) + '%';
    }
  }
  
  static updateAudioSettings(slider, value) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞ –≤ gameState
    const sliderId = slider.id;
    
    switch (sliderId) {
      case 'pauseMasterVol':
      case 'masterVol':
        gameState.audio.masterVolume = value;
        break;
      case 'pauseMusicVol':
      case 'musicVol':
        gameState.audio.musicVolume = value;
        break;
      case 'pauseSfxVol':
      case 'sfxVol':
        gameState.audio.sfxVolume = value;
        break;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏
    (async () => {
      const { audioManager } = await import('../audio/AudioManager.js');
      audioManager.updateMusicVolume();
    })();
  }
  
  static saveAudioSettings() {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞
    (async () => {
      const { SettingsManager } = await import('./SettingsManager.js');
      SettingsManager.saveSettings();
    })();
  }
} 